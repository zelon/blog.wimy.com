<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>blog.wimy.com</title>
    <link>http://blog.wimy.com/</link>
    <description>zelon의 프로그래밍과 일상</description>
    <pubDate>Mon, 11 Oct 2021 06:35:58 GMT</pubDate>
    <generator>wimyblog</generator>
    <item>
      <title>2020년 결산</title>
      <link>http://blog.wimy.com/464</link>
      <description>&lt;p&gt;늦었지만 2020년 결산해본다.&lt;/p&gt;

&lt;p&gt;일단 코로나... 코로나 때문에 바뀐 삶은 명확하다. 집에 있고, 마스크 쓴다.&lt;br /&gt;
 어머니가 어깨 수술을 했을 때 못 찾아뵈었다. 생신 때 못 찾아뵈었다. 제주도 여행은 미루고 미루다가 3차 대유행 직전에 다녀왔다.&lt;/p&gt;

&lt;p&gt;셜록 시즌 나온거 다 봤다. &lt;br /&gt;
 슬기로운 의사 생활 시즌1 다 봤다. 너무 재미있었다...&lt;br /&gt;
 젤다 야생의 숨결 영문판으로 깼었는데 한글판으로 한번 엔딩 봤다. 한글판 굳이 안 해도 되었을 것 같다... 영문판할 때 너무 스트레스 받아서(나는 모르는 단어나오면 하나하나 다 찾아가며 게임하는 스타일이다...). 다시 해도 잘 만들었더라&lt;br /&gt;
 판타지 사전 책 다 읽었다. 게임을 만드는 사람은 정말 한번쯤 봐두면 좋을 책이다. 2020년에는 저렇게 백과사전식 책이 몇권 더 나온 것 같다&lt;/p&gt;

&lt;p&gt;집콕생활하면서 많이 정리했다. 신박한 정리를 보고 아이들도 필요와 욕구로 정리했다&lt;/p&gt;

&lt;p&gt;턱걸이를 1개 이상할 수 있게 되었다. 근데 문이 벌어졌다...&lt;br /&gt;
 동물의 숲 애들이랑 열심히 했다. 코로나 대박 동물이 숲&lt;/p&gt;

&lt;p&gt;집에서 회사 노트북으로 일할 수 있게 되었다. 내 시간이 없어졌다. 너무 회사 일만 한다. 적절하게 책도 봐야하는데 책을 안 보게 되었다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/464</guid>
      <pubDate>Fri, 29 Jan 2021 15:25:00 GMT</pubDate>
    </item>
    <item>
      <title>wimybox 서비스 종료</title>
      <link>http://blog.wimy.com/463</link>
      <description>&lt;p&gt;Wimybox - &lt;a href="http://box.wimy.com"&gt;http://box.wimy.com&lt;/a&gt; 을 이제 더이상 서비스할 수 없게 되었다. 그래서 더이상 개발도 하지 않게 되었다.&lt;/p&gt;

&lt;p&gt;회사 일도 바쁘고 조금 지친 것도 있지만, 직접적인 원인은 YouTube API를 쓰는데 너무 복잡한 것을 요구해왔기 때문이다&lt;/p&gt;

&lt;p&gt;아마 YouTube API를 쓰는 다른 사람들도 관련 메일을 받았겠지만 얼마 전부터 YouTube API측에서 약관을 지키라면서 Audit Form(사용 방법 등 - &lt;a href="https://support.google.com/youtube/contact/yt_api_form"&gt;https://support.google.com/youtube/contact/yt&lt;em&gt;api&lt;/em&gt;form&lt;/a&gt;)을 등록하라고 해왔고, 귀찮기도 하고, 엄청나게 긴 영어로 된 약관을 하나하나 읽어보기는 힘들었기 때문에 Audit Form을 보내지 않았다. 참고로 읽어보고 준수해야 하는 약관은 3개이며 그 중에 1개는 이만큼(&lt;a href="https://developers.google.com/youtube/terms/developer-policies"&gt;https://developers.google.com/youtube/terms/developer-policies&lt;/a&gt;)의 길이다. 여튼 Form을 보내지 않았더니 YouTube API 접근이 제한되었고 결국 wimybox 서비스는 오류를 발생하게 되었다.&lt;/p&gt;

&lt;p&gt;시간이 되어서 Audit Form을 채워서 보냈더니, "이런저런 약관이 위배되었으니 A,B,C를 고쳐주세요"라고 답변 받았고, 다시 예전 소스를 꺼내서 수정하고, 약관을 첫 화면 잘 보이는 곳에 배치하고, 링크도 걸고 해서 답변을 보냈더니, 아래처럼 답변이 왔다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Screencast or Video recording(s) that clearly demonstrates how your API Client and its users access and use the YouTube API Services&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Please confirm that you don't wish to use the YouTube API services any longer in the future for this project key. Once we get the confirmation, we will revoke access for the project keys from our end&lt;/p&gt;

&lt;p&gt;동영상을 만드는 것도 힘들고, 나의 구현 방법을 알려달라는 것도 웃기고... 사용 안할거면 알려달라고 친절하게 설명도 해준다(내가 귀찮아한다는 것을 알았나...) 그래서 wimybox 서비스를 종료하기로 결정했다.&lt;/p&gt;

&lt;p&gt;2009년 무한도전 듀엣 가요제의 냉면을 들으면서 열심히 만들고, 2011년 원더걸스의 Be My Baby를 들으면서 재미있게 업그레이드 했던 기억이 난다. 아쉽지만 여기까지.&lt;/p&gt;

&lt;p&gt;시간이 되면 코드만 마지막으로 정리하고, 정식으로 사이트 닫아야 겠다. 앞으로 취미 삼아 토이프로젝트 만들 때도 이제 구글의 API를 가능하면 사용하지 않도록 해야겠다&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/463</guid>
      <pubDate>Tue, 30 Jun 2020 15:25:00 GMT</pubDate>
    </item>
    <item>
      <title>리눅스 데스크탑은 여전히 쓸만한 물건이 아니다</title>
      <link>http://blog.wimy.com/462</link>
      <description>&lt;p&gt;몇 년만에 집의 데스크탑PC에 우분투 리눅스 19.10버전을 설치했는데, 로그인이 안 되었다. 클린 설치였는데도... "우분투 무한 로그인" 으로 검색해보면 수많은 글들이 나온다. 대충 보면 그래픽카드와의 충돌 현상이며, 이래저래 회파하면 된다. 하지만 웃긴 건 저 문제는 꽤 오래 되었다는 것이다. NVidia 그래픽 카드와의 충돌 현상이 몇 년 째 해결되지 않고 있다. 오픈소스라서 누군가는 고칠까... 과연...?&lt;/p&gt;

&lt;p&gt;결국에는 너무 짜증이 나서 다른 배포판을 깔았는데, 다른 배포판은 또 괜찮았다. 우분투의 문제... 사실 우분투면 리눅스 데스크탑에서 가장 기본이 되고, 다른 배포판들도 우분투를 기반으로 나오는 경우가 많은데 이정도라니 안타깝다.&lt;/p&gt;

&lt;p&gt;아직 리눅스 데스크탑은 갈 길이 멀었다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/462</guid>
      <pubDate>Tue, 24 Mar 2020 15:43:00 GMT</pubDate>
    </item>
    <item>
      <title>KT에서 U+알뜰모바일로 셀프개통 통신사 이동 후기</title>
      <link>http://blog.wimy.com/461</link>
      <description>&lt;p&gt;드디어 1월 4일부로 KT의 2년 약정이 끝나서 알뜰 통신사로 옮겨가게 되었다. 이상하게 좀 알아보니, U+알뜰모바일과 헬로모바일 요금이 완전 같아서(헬로모바일 주소가 lghellovision인 걸 봐서는 뭔가 합쳐진듯) 고민하다가 그냥 GS25에서 유심을 구하고, '셀프개통'을 할 수 있는  U+알뜰모바일로 선택했다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;요금제 및 셀프개통: &lt;a href="https://gs25.uplussave.com/prtn/gs25/index.mhp"&gt;https://gs25.uplussave.com/prtn/gs25/index.mhp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;직접 해보니 신기(?)한 것이 통신사 대리점에서 할 법한 일들을 내가 직접 하면서 새로운 유심을 등록한다. KT에다가 ARS로 전화해서 확인하고, 본인 인증을 내 카드로 하고 등등... 여튼 완전 자동은 아니지만, 대리점 직원이 아닌 나도 한번에 할 수 있을 정도의 수준이었다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;장점들&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;U+알뜰모바일 및 KT와도 상담사 연결을 할 필요가 없었다. 기껏해야 ARS에 숫자 입력해주는 정도&lt;/li&gt;
&lt;li&gt;매달 4만 8천원을 내면서 데이터 2기가를 받고 있었는데 2만 5천원에 15기가를 받는 요금제로 옮겨간 것이다. 절반가격으로 데이터를 7배 넘게 받는다. 이게 핵심. 이걸 왜 이제야했을까...(사실 KT 2년 약정 때문이었지만;;)&lt;/li&gt;
&lt;li&gt;크롬 웹 브라우저로 진행이 가능하다(!!!!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;아쉬운 점들&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;이상하게 GS25 편의점에서 산 유심이 잘못된 유심일련번호라면서 등록이 안되는데, 이게 홈페이지의 오류처럼 보인다. 내가 혹시나하고, U+알뜰모바일 사이트를 여기저기 다니면서 '셀프개통' 시작페이지가 여러 군데인 것을 확인했고, 이 여러군데 중 한곳은 나의 유심 일련번호를 제대로 인식했다. 홈페이지의 특정 페이지를 잘못 만든듯하다&lt;/li&gt;
&lt;li&gt;컴퓨터 앞에서 진행하다가, 휴대폰으로 카톡이 와서 양쪽 진행?? 같은 게 이상하다&lt;/li&gt;
&lt;li&gt;KT에서 문자가와서 해당 url을 클릭하라는 설명이 있는데 있는데  KT의 문자에는 해당 url이 없었다. 그래서 잠깐 헤매었다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;안전한 것들&lt;/h1&gt;

&lt;p&gt;사실 내 환경에서는 날아간게 하나도 없어서 적기도 민망하지만 일단 찝찝했지만 안전한 것들을 적어본다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;카카오톡을 백업할 필요도 없었다&lt;/li&gt;
&lt;li&gt;문자 메시지도 날아가지 않는다. 보통 문자 메시지를 유심에 저장하지 않기 때문에 괜찮다&lt;/li&gt;
&lt;li&gt;삼성 페이가 기본적으로 동작하지 않게 된다. 삼성 페이 앱을 직접 실행해주면 유심이 바뀌었다가면서 다시 본인 확인 후 정상 동작한다. 다만 교통카드 기능도 함께 초기화되는 데 난 안 썻기 때문에 어떻게 될지 모르겠다. 내가 안 쓰는 이유는 신한카드를 교통카드로 사용하는데 삼성 페이를 통해서 교통카드 결재를 하면 교통카드 혜택이 안되기 때문이다&lt;/li&gt;
&lt;li&gt;T전화를 다시 등록하라고 왔다. T전화 초기화를 눌렀지만 다행히 주소록이 날아가지는 않았다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;기타&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;실제로 컴퓨터에 앉아서 약 20분이 걸렸으며, 실제로 통화가 안 되는 시간은 정말 2~3분 정도 밖에 안될 것 같다&lt;/li&gt;
&lt;li&gt;유심을 갈아끼우고 해당 카드에 정보를 기록했다면서 리부팅이 한번 있었다. 그런데 이 때 리부팅 한다는 앱(?)이 전체 화면을 가려서 잠시 동안 폰 리부팅을 안하면 아무것도 못하는 상황이 벌어진다

&lt;ul&gt;
&lt;li&gt;구글로부터 이상한 문자 하나가 왔다. Google SIM verification 이라고 오면서 url이 하나 오는데 따라가서 읽어보면 원래 전화번호가 바뀌면 문자를 보내면서 바뀐 인증 같은 걸 한단다. 사실 전화번호가 바뀐게 아니라 유심만 바뀌었지만 뭐...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;U+알뜰모바일에서 문자가 3통 밖에 안 왔다. 그 내용도 담백하다 ㅋㅋ KT에 처음 가입했을 때 문자가 정말 10통은 넘게 왔었던 것 같은데, 다 쓸데없는 내용으로 기억한다. 그리고 문자 하나에 고객님 어쩌구부터, 마지막에는 초능력 5G라는 둥... 내용을 읽게 힘드는 문구들이 가득하다. U+ 알뜰모바일에서는 이래도 되나 싶을 정도로 문자가 적고, 오히려 빠져나오는 KT에서 여러 문자를 보내면서 이런저런 내용(남은 요금이 어쩌구)을 안내했다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;결론&lt;/h1&gt;

&lt;p&gt;KT에서 U+ 알뜰모바일로 꽤 쉽게 넘어갈 수 있으며, GS25에서 유심을 미리 사서 시작하면 약 20분 만에 통신사를 바꿀 수 있다. 다들 3대 통신사를 쓰고 있다면 한번쯤 알아보시길~~&lt;/p&gt;

&lt;h1&gt;ps&lt;/h1&gt;

&lt;p&gt;아내도 KT에서 U+알뜰모바일로 가려고 했는데, KT가 더 싼 조건이 있긴 했다. 바로 3만원 대 요금을 쓰면서 무제한 음성통화를 사용할 경우. 아내의 평균 월 통화량이 거의 400분이어서... 아내의 상황에서는 KT가 더 쌌다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/461</guid>
      <pubDate>Wed, 08 Jan 2020 06:12:00 GMT</pubDate>
    </item>
    <item>
      <title>2019년 돌아보기</title>
      <link>http://blog.wimy.com/460</link>
      <description>&lt;p&gt;이 글을 쓰기 시작할 때는 2019년 정말 한 일이 없구나하면서 시작했는데, 다 적고 보니 나름 열심히 살았는 것 같다. 2020년도 화이팅~~!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;블로그(&lt;a href="http://blog.wimy.com"&gt;http://blog.wimy.com&lt;/a&gt;)에 글 10개. 나쁘지 않은 갯수. 2020년에는 한달에 1개씩 적어보자&lt;/li&gt;
&lt;li&gt;github(&lt;a href="http://github.com/zelon"&gt;http://github.com/zelon&lt;/a&gt;)에 commit 271개. 2020년에는 365개를 넘길려나&lt;/li&gt;
&lt;li&gt;wimygit(&lt;a href="http://github.com/zelon/wimygit"&gt;http://github.com/zelon/wimygit&lt;/a&gt;) - p4v처럼 만든 git gui client. 이제 원하는 기능이 대부분 구현되었다. 다만 내가 쓰는 기능들 위주. 코드 구현도 마음에 드는 수준까지 올라왔고, 덕분에 WPF/MVVM 구현에 제법 익숙해졌다. 2019년에 개인 프로젝트로 재미있게 코딩한 듯&lt;/li&gt;
&lt;li&gt;기술

&lt;ul&gt;
&lt;li&gt;WPF/MVVM : 이제 제법 이걸로 데스크탑 애플리케이션을 만들 수 있을 것 같다&lt;/li&gt;
&lt;li&gt;C#/.NET CORE : 최신 트렌드를 따라가봤다. 이제 하나의 실행 파일로 .NET이 배포되는 것 만으로도 정말 좋아졌다&lt;/li&gt;
&lt;li&gt;ASP.NET CORE : ASP.NET 은 십 몇년간 사용하지 않았었는데, .NET CORE의 발전과 회사에서의 사용으로 어느 정도 다시 감을 찾았다&lt;/li&gt;
&lt;li&gt;docker : 2019년 말에 갑자기 필이 꽂혀서 이것저것 해봤다. 아직 실전에는 투입 못해봤지만, 개발용으로는 제법 쓸 수 있다&lt;/li&gt;
&lt;li&gt;UnrealEngine : 클라이언트 게임 프로그래밍은 유니티를 만지고 놀았는데 이제 언리얼 엔진을 좀 보기 시작했다. 열심히 온라인 강좌도 듣고, 책도 보지만 이제 겨우 간단한 플랫포머 게임 하나 만들 정도&lt;/li&gt;
&lt;li&gt;git : 개인 프로젝트들은 당연히 git으로 관리되고, Wimygit을 만들면서 좀 더 다양하게 사용하게 되었다. 다만 혼자만 쓰는 코드 관리이기 때문에 conflict 상황에 대해 경험치는 계속 안 쌓이는 듯...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;책

&lt;ul&gt;
&lt;li&gt;클린 소프트웨어(&lt;a href="http://blog.wimy.com/456/"&gt;http://blog.wimy.com/456/&lt;/a&gt;) 완독. 좀 많이 두꺼워서 읽는 데 1년이 넘게 걸린듯... 그래도 오랜만에 두꺼운 책을 다 봐서 만족감이 있다&lt;/li&gt;
&lt;li&gt;WPF MVVM 일주일만에 배우기(&lt;a href="http://blog.wimy.com/451/"&gt;http://blog.wimy.com/451/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;달빛조각사 거의 완독(회사 도서관에 있는 것 - 54권까지). 2018년 6월부터 시작해서 2019년 7월까지 읽음

&lt;ul&gt;
&lt;li&gt;달빛조각사 게임 만드시는 지인이 있어서 읽기 시작했는데 꽤 재미있어서 쭈욱 정주행했다. 그런데 정작 달빛조각사 게임 개발한 지인은 안 읽으셨다고...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;영화 - 육아를 하면서 아이들과 꽤 많은 영화를 봤지만 인상 깊었던 것들

&lt;ul&gt;
&lt;li&gt;스파이더맨 : 뉴 유니버스 - 이건 정말 두고두고 보고 싶은 영화. 특히 비주얼이 멋지다&lt;/li&gt;
&lt;li&gt;레고 무비 - 이것도 정말 대박. 이것이 진정한 레고 정신&lt;/li&gt;
&lt;li&gt;맨 프럼 어스&lt;/li&gt;
&lt;li&gt;알라딘&lt;/li&gt;
&lt;li&gt;칠드런 오브 맨&lt;/li&gt;
&lt;li&gt;쥬만지: 새로운 세계&lt;/li&gt;
&lt;li&gt;조선명탐정2, 3&lt;/li&gt;
&lt;li&gt;세 얼간이&lt;/li&gt;
&lt;li&gt;명량&lt;/li&gt;
&lt;li&gt;흐르는 강물처럼&lt;/li&gt;
&lt;li&gt;겨울왕국2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/460</guid>
      <pubDate>Wed, 01 Jan 2020 05:10:00 GMT</pubDate>
    </item>
    <item>
      <title>Visual Studio WPF Designer View에서 Exit Code: 80131623</title>
      <link>http://blog.wimy.com/459</link>
      <description>&lt;p&gt;.NET Core 3.0으로 WPF로 GUI Git client(&lt;a href="https://github.com/zelon/wimygit"&gt;https://github.com/zelon/wimygit&lt;/a&gt;)를 취미삼아 만들고 있는데, 특정 상황에서 Visual Studio의 WPF Designer View에서 80131623 에러를 내면서 제대로 미리보기를 보여주지 않았다. 버그 리포팅을 해도 묵묵부답이고... 뭔가 내 컴퓨터에서만 발생하는 문제인가 싶기도 한데, window10의 샌드박스에서 테스트해도, Visual Studio 2019 preview 버전에서도 같은 문제가 발생했다.&lt;/p&gt;

&lt;p&gt;&lt;img src="XAML_Designer_Error.png" alt="XAML Designer Error" /&gt;&lt;/p&gt;

&lt;p&gt;문제의 원인은 XAML 코드를 여기저기 주석처리하다가 알았는데, ListBox에 MultiBinding을 사용할 때였다. 문제도 없는 코드이고 빌드 및 실행도 잘되는데, XAML preview에서만 'The XAML Designer has exited unexpectedly. (Exit code: 80131623)' 과 같은 화면을 띄우면서 preview를 보여주지 못했다. 이런저런 방법을 써도 잘 안되다가 정말 엉뚱한 방법으로 문제를 회피(!)했다. 바로 MultiBinding Coverter에 사용되는 클래스 이름을 바꾸는 것. 희안하게 클래스의 이름을 줄였더니 이 문제가 회피가 되었는데, 웃기는 것이 XAML Designer에서는 새롭게 변경한 클래스 이름을 발견을 못한다. 그래서 경고 밑줄을 띄우면서, preview는 잘보여준다. 아마 내가 사용했던 클래스 이름이 반쯤(?) 인식되어서 뭔가 동작을 하다가 멈춘게 아닌가 생각된다. 이름을 더 길게도 해보고 어떤 패턴이나 어떤 단어에 문제가 생기는 지 더 찾고 싶지만 이 문제에 너무 오래 시달려서 일단 preview가 보이는 데서 만족하고 포스팅 중...&lt;/p&gt;

&lt;p&gt;혹시나 이런 문제를 겪는 사람이 있다면 일단 클래스 이름을 바꿔 보시길.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/459</guid>
      <pubDate>Thu, 21 Nov 2019 13:28:00 GMT</pubDate>
    </item>
    <item>
      <title>Visual Studio WPF Designer에서 내가 만든 UserControl을 인식하지 못할 때</title>
      <link>http://blog.wimy.com/458</link>
      <description>&lt;h1&gt;업데이트&lt;/h1&gt;

&lt;p&gt;아래의 내용은 임시로 취해진 조치이며, 결국에는 Visual Studio 16.4 버전이 릴리즈되면서 해결되었다&lt;/p&gt;

&lt;h1&gt;예전&lt;/h1&gt;

&lt;p&gt;Visual Studio의 WPF Designer에서 내가 만든 UserControl을 추가했는데, 실행은 문제가 없는데 Could not load type xxxx 라면서 Designer에서 제대로 previwe가 안 될 때는, bin 폴더를 삭제하고, 다시 빌드 시켜본다. 뭔가 임시 파일에서 정보를 캐싱하는 게 있는지 삭제하고 빌드를 해야 인식하는 경우가 있다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/458</guid>
      <pubDate>Sun, 27 Oct 2019 15:25:00 GMT</pubDate>
    </item>
    <item>
      <title>구글 클라우드 쉘에서 VS Code 사용하기</title>
      <link>http://blog.wimy.com/457</link>
      <description>&lt;p&gt;구글 클라우드에서 돌아가는 toy project가 있어서 오랜만에 유지보수를 하려니, SDK 설치부터 너무 힘들었다. 그래서 좀 뒤져보다 보니, google에서도 Cloud Shell을 제공하고 있었고, Cloud Shell에는 이미 SDK 및 관련 툴들이 이미 설치되어 있어서 개발 환경을 구축할 필요없이 바로 개발을 이어갈 수 있었다.&lt;/p&gt;

&lt;p&gt;하지만 파일 편집 환경이 너무 불편해서 좀 더 찾아보니, Cloud Shell안에서 VS Code를 웹 서버로 띄워서 사용할 수 있다고 한다. &lt;a href="https://medium.com/google-cloud/how-to-run-visual-studio-code-in-google-cloud-shell-354d125d5748"&gt;https://medium.com/google-cloud/how-to-run-visual-studio-code-in-google-cloud-shell-354d125d5748&lt;/a&gt; 에서 해당 내용을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;정리하자면 아래와 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cdr/code-server/"&gt;https://github.com/cdr/code-server/&lt;/a&gt; 라는 프로젝트가 VS Code를 웹 서버로 띄울 수 있도록 해준다&lt;/li&gt;
&lt;li&gt;Google Cloud Shell 안(!)에서 해당 프로젝트를 다운 받아서 압축을 해제한 후 실행한다. 그러면 8080를 통해서 VS Code를 서비스해준다&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Google Cloud Shell의 Web Preview 기능을 통해서 해당 포트를 연결하는 주소를 생성해주고 해당 주소를 통해서 VS Code 서비스에 접속해서 사용한다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;혹시나 'Not Found' 같은 오류가 난다면, 주소줄에서 xxxx.appspot.com 이후의 문자열들을 삭제한 주소로 접속하면 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;재미있는 것은 이렇게 열린 VS Code in WebBrowser를 통해서, Google Cloud Shell도 열 수가 있다는 것이다. 뭔가 현대적인 클라우드 컴퓨팅을 사용한다는 느낌이 팍팍 든다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="VSCodeInWebBrowser.png" alt="VS Code in WebBrowser" /&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/457</guid>
      <pubDate>Mon, 21 Oct 2019 14:39:00 GMT</pubDate>
    </item>
    <item>
      <title>[책 후기] 클린 소프트웨어</title>
      <link>http://blog.wimy.com/456</link>
      <description>&lt;p&gt;꽤 흥미롭게 읽었다. 꽤 두꺼웠지만, 하루에 한 챕터 혹은 힘들면 반 챕터씩 읽었다. 나에게 꾸준함을 다시 일깨워준 책이다.&lt;/p&gt;

&lt;p&gt;내용은 프로그램을 애자일 방법으로 설계하고 코딩 해나가는 방법에 대한 것이다. 나에게 많은 위로를 줬던 것이, 한번에 잘 설계할 수는 없다는 내용이다. 설계는 초기 설계가 있으면 당연히 코드가 자라면서 그 설계 방향과 형태는 계속 흔들리면서 자라나게 된다는 것이다. 한번에 설계를 잘하면 좋겠지만 다들 그렇게는 안된다고 한다. (다행이다. 나만 그런게 아니라...)&lt;/p&gt;

&lt;p&gt;주요 구문들을 정리해서 구글 문서(&lt;a href="https://docs.google.com/document/d/1SjjrAc3Hni2OFK3odyXBIZwLn1AR7KBXns5Pvjnwelo/edit?usp=sharing"&gt;https://docs.google.com/document/d/1SjjrAc3Hni2OFK3odyXBIZwLn1AR7KBXns5Pvjnwelo/edit?usp=sharing&lt;/a&gt;)에 올렸지만, 그 중에서도 많이 와 닿은 문장들을 적어본다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;시스템에 대한 이해를 계속 유지하기 위해 지속적으로 코드를 읽고 소화한다&lt;/li&gt;
&lt;li&gt;애자일 선언문

&lt;ul&gt;
&lt;li&gt;프로세스와 툴보다 개인과 상호작용이 우선이다&lt;/li&gt;
&lt;li&gt;포괄적인 문서보다 동작하는 소프트웨어가 우선이다&lt;/li&gt;
&lt;li&gt;계약 협상보다 고객 협력이 우선이다&lt;/li&gt;
&lt;li&gt;계획을 따르는 것보다 변화에 대한 반응이 우선이다&lt;/li&gt;
&lt;li&gt;왼쪽 항목 각각에도 가치는 있지만, 우리는 오른쪽 항목에 더 가치를 부여한다는 뜻이다&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;그 필요가 급박하고 중요하지 않다면 아무 문서도 만들지 마라 - 마틴의 문서화 제1법칙&lt;/li&gt;
&lt;li&gt;테스트 케이스와 코드는 함께 진화하며, 테스트 케이스가 코드보다 아주 약간 앞서는 정도다. 이 방식은 리팩토링을 굉장히 용이하게 만든다&lt;/li&gt;
&lt;li&gt;어떻게든 동작하는 가장 단순한 것을 생각한다. DB없이 파일로 할 수 있다면 파일로 한다. 멀티스레딩 없이 현재 스토리를 구현할 수 있다면, 멀티스레딩을 포함시키지 않을 수도 있다. 그리고 실제로 구현할 수 있을 정도로 최대한 단순한 솔루션을 선택한다&lt;/li&gt;
&lt;li&gt;코드는 부패하기 쉽다. 기능 요소 다음에 또 기능 요소를 추가하고 버그 다음에 또 버그를 잡아나갈수록 코드 구조는 퇴화한다&lt;/li&gt;
&lt;li&gt;테스트를 먼저 작성함으로써, 프로그래머는 자신이 반드시 테스트 가능한 프로그램을 설계하도록 강제할 수 있다&lt;/li&gt;
&lt;li&gt;모든 소프트웨어 모듈에는 세 가지 기능이 있다. 동작하는 기능, 변경 기능, 읽는 사람과 의사소통하는 기능이다. 변경이 힘든 모듈은 망가진 것이다. 읽기 힘든 모듈도 망가진 것이다&lt;/li&gt;
&lt;li&gt;아무 악취도 나지 않을 때는 원칙을 적용하지 않는다. 그저 원칙이라는 이유만으로 무조건 따르는 것은 좋지 않다. 원칙에 대한 맹종은 불필요한 복잡성이란 설계의 악취로 이어진다&lt;/li&gt;
&lt;li&gt;현재 시점에서는 유용하지 않은 요소가 설계에 포함되어 있다면, 이 설계는 불필요한 복잡성을 포함하는 것이다&lt;/li&gt;
&lt;li&gt;요구사항의 변경 때문에 소프트웨어는 부패하지만, 프로그래머인 우리들 대부분은 요구사항이 프로젝트에서 가장 변덕스러운 요소임을 인식하고 있다. 만약 계속되는 요구사항 변경 때문에 설계가 실패한다면, 우리의 설계와 방식에 문제가 있는 것이다. 이런 변경에 대해서도 탄력적인 설계를 만드는 방식을 찾아야 한다&lt;/li&gt;
&lt;li&gt;SRP: 한 클래스는 단 한 가지의 변경 이유 만을 가져야 한다&lt;/li&gt;
&lt;li&gt;OCP: 확장에 대해 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 한다. 해결책은 추상화다&lt;/li&gt;
&lt;li&gt;LSP: 서브타입은 그것의 기반 타입으로 치환 가능해야 한다&lt;/li&gt;
&lt;li&gt;DIP: 상위 수준의 모듈은 하위 수준의 모듈에 의존해서는 안 된다. 둘 모두 추상화에 의존해야 한다&lt;/li&gt;
&lt;li&gt;ISP: 인터페이스 분리 원칙. 클라이언트가 자신이 사용하지 않는 메소드에 의존하도록 강제되어서는 안 된다&lt;/li&gt;
&lt;li&gt;순환을 끊으려녀 인터페이스를 만들어서 해결하거나 두 개의 패키지가 둘 다 의존하는 새로운 패키지를 만든다&lt;/li&gt;
&lt;li&gt;패키지 구조는 시스템이 성장하고 변화하면서 같이 진화하는 것으로 보인다&lt;/li&gt;
&lt;li&gt;애플리케이션이 계속 성장하면서 재사용 가능한 요소를 만드는 일도 고려하기 시작한다&lt;/li&gt;
&lt;li&gt;패키지 의존 관계 그래프는 조금씩 흔들리면서 성장한다&lt;/li&gt;
&lt;li&gt;어떤 패키지는 불안정하고 또 어떤 패키지는 안정적인 설계가 우리가 원하는 패키지 구조의 설계다&lt;/li&gt;
&lt;li&gt;패키지는 안정적인 만큼 추상적이기도 해야한다. 반대로 불안정한 패키지는 구체적이어야 한다&lt;/li&gt;
&lt;li&gt;팩토리 패턴은 큰 도움이 되지만 피하려면 피할 수도 있는 복잡함이다&lt;/li&gt;
&lt;li&gt;잦은 변경을 겪게 될지는 예상 할 수 밖에 없으며, 처음에는 간단하게 시작하고 필요에 따라 구조를 발전시키는 것이 가장 좋다&lt;/li&gt;
&lt;li&gt;어떤 모듈을 테스트하려면, 그 모듈을 시스템의 다른 모듈로부터 분리할 수 있어야 한다&lt;/li&gt;
&lt;li&gt;테스트를 먼저 생각해본 것이 설계에서 결합을 줄이는 일에 도움이 되었다&lt;/li&gt;
&lt;li&gt;이 세상에 충분한 분석 같은 것은 없다. 얼마나 잘 설계하든 고객이 언제나 그 구조를 망쳐버릴 새로운 변경사항을 들고 나온다는 사실을 알게 될 것이다.&lt;/li&gt;
&lt;li&gt;시간이 흐르면서 시스템에 대한 요구사항이 변경되면 이 구조들도 변경되어야 한다. 이런 변경들을 잘 해나갈 수 있는 비결은 시스템을 되도록 단순하고 유연하게 유지하는 것이다&lt;/li&gt;
&lt;li&gt;적어도 세 번 이상 그 프레임워크를 기반으로 애플리케이션을 구축해봐야(그리고 실패해봐야) 그 도메인에 맞는 올바른 아키텍처를 구축했다는 자신감이 그런대로 생길 수 있다 - 레베카 워프스-브록&lt;/li&gt;
&lt;li&gt;복잡성을 다루기 위해, 소프트웨어는 계층 구조로 설계된다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/456</guid>
      <pubDate>Thu, 10 Oct 2019 14:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Hyper-V에서 네트워크가 제대로 되지 않을 때</title>
      <link>http://blog.wimy.com/455</link>
      <description>&lt;p&gt;언제부터인지는 모르겠지만, 윈도우 10 Pro 1903버전에서 Hyper-V를 통해 VM을 만들면 네트워크가 Default Switch라는 걸로 기본 설정이 되고, 이 설정으로 VM을 만들면 네트워크가 제대로 되지 않는다. 인터넷에서 검색해보면 이런 현상이 다른 사람들도 종종 겪고 있는 것 같은데, 이런저런 삽질 끝에 나는 아래의 방법으로 성공하였다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hyper-V 관리자에서 메인 메뉴 중 '동작 -&gt; 가상 스위치 관리자'를 열어서 '새 가상 네트워크 스위치'를 눌러서 '외부' 가상 스위치를 만든다&lt;/li&gt;
&lt;li&gt;기존의 VM이 실행 중이라면 종료한다&lt;/li&gt;
&lt;li&gt;기존의 VM에서 기존의 Default Switch 네트워크 어댑터를 제거하고 새로 만든 '외부' 가상 스위치를 연결한다&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VM 재시작&lt;/p&gt;

&lt;p&gt;위와 같이 하면 VM안의 네트워크가 정상적으로 실행된다&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/455</guid>
      <pubDate>Wed, 09 Oct 2019 14:36:35 GMT</pubDate>
    </item>
    <item>
      <title>[게임 플레이 후기] Limbo</title>
      <link>http://blog.wimy.com/454</link>
      <description>&lt;p&gt;2019-06-17 Limbo 플레이 후기&lt;/p&gt;

&lt;p&gt;뭔가 있어보이는 분위기로 시작해서, 뜬금없이 퍼즐 게임인가 싶다가... 액션 퍼즐이 되는 게임... 나무위키의 '해설'을 보면 '그래... 그럴수도 있겠다' 싶긴 하지만, 퍼즐을 풀 때 너무 뜬금없는 것들이 있다. 중반까지는 꽤 재미있고 흥미진진하고, 분위기에 흠뻑 젖어드는데, 후반으로 갈수록 '너무 퍼즐인데...' 싶다. 분위기를 잘 이어나가면서 퍼즐에 힘을 조금 뺐으면 어땠을까 싶다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/454</guid>
      <pubDate>Sat, 05 Oct 2019 14:20:35 GMT</pubDate>
    </item>
    <item>
      <title>AMD CPU 컴퓨터에서 idle 상태에서 CPU가 사용되고 있을 때</title>
      <link>http://blog.wimy.com/453</link>
      <description>&lt;p&gt;최근에 AMD CPU를 가진 컴퓨터를 구입했는데, 이상하게도 idle 상태일 때 CPU가 계속 사용 중인 것처럼 나타났다. 이래저래 살펴보다 보니, 결국 CPU 꾸미는 소프트웨어가 문제였다.&lt;/p&gt;

&lt;p&gt;LightingService.exe 가 점유율을 많이 차지한다면. Aura app을 실행 한 후에 Off시켜봐라. CPU 그래프 1개가 완전 꺽이는 현상을 볼 수 있다. 아마 '무지개'를 켰을 때 계속 계산하기 위해서 인듯 싶다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/453</guid>
      <pubDate>Mon, 10 Jun 2019 14:20:35 GMT</pubDate>
    </item>
    <item>
      <title>Office 365 설치 중 멈춰있을 때</title>
      <link>http://blog.wimy.com/452</link>
      <description>&lt;p&gt;&lt;img src="Screenshot.png" alt="Office 설치 중" /&gt;&lt;/p&gt;

&lt;p&gt;Office 365 설치 중 특정 진행 단계에서 멈추는 경우가 있다. 작업 표시줄의 아이콘을 클릭하면 "백그라운드에서 Office 설치 중 (26%)"와 같이 표시되면서 더이상 퍼센트가 올라가지 않는 현상이 있다. 구글링해보니 이런저런 방법들이 있는 것 같지만, 나는 특이하게도 무선 네트워크를 유선 네트워크로 전화시켜보니 진행이 다시 시작되었다. 즉, 그냥 유선랜선을 꽂았더니 해결되었다. 전에도 이런 현상이 있어서, 프로세스를 강제로 종료시키고 다시 설치를 진행하기도 했었는데, 그냥 랜선을 꽂으면 되는 거였다. 아마 다운로드 속도가 너무 느리면, 이런 현상이 발생하는 것으로 추측된다.&lt;/p&gt;

&lt;p&gt;일단 노트북에서 멈춤 현상이 있는 분들은 먼저 랜선을 꽂아보시길...&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/452</guid>
      <pubDate>Sun, 02 Jun 2019 14:20:35 GMT</pubDate>
    </item>
    <item>
      <title>WPF MVVM 일주일 만에 배우기 - 책 소개</title>
      <link>http://blog.wimy.com/451</link>
      <description>&lt;p&gt;간만에 얇고 재미있게 본 책이 있어서 소개해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src="mvvm.jpg" alt="MVVM 일주일 만에 배우기" title="MVVM 일주일 만에 배우기" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;얇다. 212페이지다&lt;/li&gt;
&lt;li&gt;C#이니, XML이니 이런거 알고 있다는 전제하에 WPF/MVVM이 뭐가 다른지 어떻게 쓰면 되는지를 핵심을 짚어서 설명해준다. 이게 정말 좋다&lt;/li&gt;
&lt;li&gt;&lt;p&gt;이런/저런 것들도 있긴 하지만 잘 쓰이지 않는다고 얘기해준다. 이런건 키워드가 기억해뒀다가 필요할 때 그 키워드로 구글링을 잘해서 쓰면 된다&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/zelon/wimygit"&gt;https://github.com/zelon/wimygit&lt;/a&gt; 를 만들어보면서 너무 대충 코딩했는데 이제 코드 정리를 어떤 식으로 해야하는지, WPF를 어떤 식으로 써야하는지 감이 잡혔다. 물론 좀 더 전문적인 책을 보면 좋겠지만, WPF의 핵심을 파악하는데는 무척 유용한 책이었다&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/451</guid>
      <pubDate>Sat, 02 Mar 2019 15:21:08 GMT</pubDate>
    </item>
    <item>
      <title>CD ROM에서 Audio CD를 인식하지 못해서 고생함</title>
      <link>http://blog.wimy.com/450</link>
      <description>&lt;p&gt;그냥 몇 일간 고생한 게 억울해서 글로 남겨본다.&lt;/p&gt;

&lt;p&gt;책을 사면, 오디오 시디를 주는 책들이 있고, 당연히 휴대폰이나 차에서 들으려고 mp3로 만들어서 듣는다. 요즘은 데스크탑PC에는 CD-ROM/DVD-ROM을 보통 장착하지 않고, 나같이 꼭 필요한 사람들은 휴대용(Portable) CD-ROM/DVD-ROM을 사서 필요할 때만 USB로 연결해서 쓴다. 그런데!!!&lt;/p&gt;

&lt;p&gt;이상하게 윈도우를 재설치한 이 후로 오디오 시디를 컴퓨터가 인식하지 못했다. 혹시나 해서 노트북에 휴대용 CD-ROM/DVD-ROM을 연결해도 오디오 시디를 인식하지 못했다. 사용하지 않던 데스크탑용 CD-ROM/DVD-ROM도 있었는데 이걸 연결해도 인식하지 못했다. 웃긴건 오디오 시디는 인식하지 못하는데 DVD는 인식해서 플레이도 잘 되었다. 당연히 다른 오디오 시디를 넣어도 안되고...&lt;/p&gt;

&lt;p&gt;혹~~~시나 해서 휴대용 CD-ROM/DVD-ROM을 하나 새로 사서 연결하니 잘 되었음 ㅠㅜ 결론은 휴대용 CD-ROM/DVD-ROM과 데스크탑용 CD-ROM/DVD-ROM 둘다 오디오 시디만 인식 못하는 문제가 있는 걸로 결론남.&lt;/p&gt;

&lt;p&gt;핵심: CD-ROM 기능과 DVD-ROM기능은 별개의 기능으로 별도로 고장날 수 있음. 물론 나의 PS3처럼 둘다 한번에 고장날 수도 있음&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/450</guid>
      <pubDate>Fri, 01 Mar 2019 14:10:08 GMT</pubDate>
    </item>
    <item>
      <title>윈도우10에서 미러링 중 &amp;#39;다시 동기화하는 중&amp;#39; 퍼센트가 나오지 않는 현상</title>
      <link>http://blog.wimy.com/449</link>
      <description>&lt;p&gt;윈도우10에서 RAID-1(Mirroring)으로 HDD를 사용 중인데, 어쩌다 디스크 관리에 들어가면 아래처럼 '다시 동기화하는 중(Resynching)'으로 나온다. 그런데 얼마나 동기화가 진행되었는지 그 퍼센트(아래에서 빨간 네모 안의 숫자)가 나오지 않는 경우가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src="resynching.png" alt="다시 동기화하는 중" /&gt;&lt;/p&gt;

&lt;p&gt;한동안 그냥 지켜보다가 꽤 오래 컴퓨터를 사용해도 퍼센트가 나오지 않길래 답답한 마음에 구글링을 해보니 꽤 옛날 자료가 많고해서 좀 뒤져본 결과, 윈도우10에서는 저 상황이 벌어지면 F5를 눌러주면 된다. 몇 십초쯤 뒤에 잘 나온다... 뭔가 억울하지만 여튼 퍼센트 잘 나온다.&lt;/p&gt;

&lt;p&gt;#다시동기화하는중 #Resynching #F5&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/449</guid>
      <pubDate>Thu, 20 Dec 2018 15:27:08 GMT</pubDate>
    </item>
    <item>
      <title>갤럭시 노트8 사용기</title>
      <link>http://blog.wimy.com/448</link>
      <description>&lt;p&gt;갤럭시 노트8을 작년(2017년) 12월쯤 샀던 것 같다. 아내가 그 한달 전에 샀고, 나도 아이들의 사진과 동영상을 좀 더 좋은 품질로 찍어주고 싶어서 샀던 것 같다. 그 전에 쓰던 휴대폰은 구글의 레퍼런스 폰인 넥서스5(Nexus5)이다&lt;/p&gt;

&lt;p&gt;일단 좋은 점들이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;카메라는 좋다. 정확히 말하면 카메라로 찍은 사진의 품질과 해상도 그리고 버튼을 눌렀을 때 빠른 반응으로 찍힌다는 점이다. 그리고 어두운 곳에서도 그전 폰에 비해서 확실히 잘 나온다.&lt;/li&gt;
&lt;li&gt;펜은 꽤 좋은데, 지원해주는 앱들이 거의 없다. 삼성에서 만든 앱만 제대로 '펜'과 '터치'를 지원해준다. 하지만 삼성앱이 꽤 잘 만들긴했다&lt;/li&gt;
&lt;li&gt;&lt;p&gt;방수 기능. 노파심에 방수 커버를 씌워서 물놀이를 하긴 하지만, 확실히 안심된다&lt;/p&gt;

&lt;p&gt;이제부터 단점들이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;무겁다. 커서 무겁다는 느낌보다도 더 묵직했다. 다행히 이건 쓰면 쓸수록 적응되긴 했다.&lt;/li&gt;
&lt;li&gt;엣지 스크린이라는, 좌우의 화면이 부드럽게 곡면이다. 이거 때문에 사기 싫을 정도였는데, 카메라 좋은 것을 찾다보니 어쩔 수 없이 선택했었다. 써보니 역시 싫다. 액정보호 필름도 잘 안 붙는다. 그냥 삼성이 기술력보이려고 했는데, 나는 엣지 스크린이 싫다. 주위에 물어보면 좋아하는 사람은 거의 없는듯... 한 2만원정도 더 주고서라도 빼고 싶은 기능&lt;/li&gt;
&lt;li&gt;지문 인식이 뒤에 있다. 기술적으로 어쩔 수 없다고 하지만, 정말 아쉽다. 그냥 홈버튼도 앞에 있고 지문 인식도 뒤에 있는게 훨씬 좋을 것 같다. 인식률이 문제가 아니라 그냥 뒤에 있어서 불편하다. 이것도 5만원쯤 더 주더라도 앞으로 돌리고 싶다&lt;/li&gt;
&lt;li&gt;삼성 페이. 안 쓰게 되더라. 지문인식이 불편한 것도 있고, 난 주로 교통카드로 쓰려고 했는데, 카드에 있는 교통카드 할인이 안되더라!!!!! 이 사실 알고 깜짝 놀랐었음. 그리고 교통카드 인식률도 실제 카드보다 낮아서 종종 실패함. 특히 마을버스에서 너무 잘 실패함. 참고로 어찌어찌하다보면 삼성 페이에서 막 마케팅 알림도 보내옴. 어찌어찌 메뉴에 잘 들어가서 막긴했음&lt;/li&gt;
&lt;li&gt;알림 표시줄의 아이콘들. 왜 KT아이콘과 HD아이콘이 계속 떠 있는지 도대체 이해할 수가 없다. 알림 표시줄이 뭔지를 모르는 것 같다. KT마크가 대체 어떤 정보를 가지고 있는가. 내가 KT망을 쓰는 줄 모르는 줄 아나... 불필요한 정보를 가진 건 빼는게 기본인데, 검색해보면 추노마크라고 불리면서 엄청 사용자들이 싫어하는 걸 삼성은 모르나보다. 그리고 통화할 때 좀 음질 좋게 통화하는 HD voice 기능이 켜져있다는 HD아이콘... 이거도 왜 항상 떠 있는지 모르겠다. 이런 아이콘 제거해준다면 2만원쯤 주고서라도 빼고 싶다&lt;/li&gt;
&lt;li&gt;안면 인식. 잘 안된다. 나처럼 안경 쓰고 있으면 더 잘 안된다. 없다 치자.&lt;/li&gt;
&lt;li&gt;참고로 보안툴이 깔려있어서 계속 감시를 하는데, 내가 만든 SMS 전달 앱을 악성 코드로 인식하더라. 관련 팀에 메일까지 보내서 풀기는 했는데, 대충 내용보니, 내가 앱 업데이트하면 또 악성 코드로 인식될 것 같다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;삼성은 혁신하기 힘들면 위의 단점들만 커버해서 제대로 내 놓아도 좋을 것 같다&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/448</guid>
      <pubDate>Fri, 27 Jul 2018 14:25:08 GMT</pubDate>
    </item>
    <item>
      <title>더이상 배우려 하지 않는 개발자 : Expert Beginner의 등장</title>
      <link>http://blog.wimy.com/447</link>
      <description>&lt;p&gt;좋은 글을 읽어서 공유한다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@jwyeom63/%EB%8D%94-%EC%9D%B4%EC%83%81-%EB%B0%B0%EC%9A%B0%EB%A0%A4-%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90-expert-beginner%EC%9D%98-%EB%93%B1%EC%9E%A5-dd40c40aeedf"&gt;더이상 배우려 하지 않는 개발자 : Expert Beginner의 등장&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;뭐, 결론은 계속 공부하자. 자신이 알고 있는 것을 돌아보자 정도로 요약할 수 있겠다. 경력상 어느 정도 중반에 들어선 나에게 좋은 자극이 되는 글이다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/447</guid>
      <pubDate>Fri, 10 Nov 2017 13:13:19 GMT</pubDate>
    </item>
    <item>
      <title>여름 앱의 종료가 아쉽다</title>
      <link>http://blog.wimy.com/446</link>
      <description>&lt;p&gt;&lt;img src="Summer.png" alt="여름 서비스 종료" /&gt;&lt;/p&gt;

&lt;p&gt;여름이라는 앱이 종료되었다. 그렇게 많이 알려진 앱은 아니지만, SK텔레콤에서 제공했던 문자 앱이다. 구글에 '여름 문자 대체'를 검색해보면 꽤 많은 사람들이 이 앱을 잘 쓰고 있었음을 알 수 있다. 물론 나도 그 중의 한 사람이다.&lt;/p&gt;

&lt;p&gt;나는 넥서스5라는 기기를 사용하고 있는데, 구글에서 제공해주는 기본 문자앱이 영 마음에 들지 않아서 다른 문자앱을 찾아보고 있었는데, 다들 고만고만하기도 하고, 외국 앱이 우리나라의 MMS를 제대로 지원해주지 않을 것같고, T전화를 워낙 만족스럽게 쓰고 있었기 때문에 같은 회사에서 나온 '여름' 앱을 골랐었다. 그런데 앱 서비스가 종료되었다.&lt;/p&gt;

&lt;p&gt;사실 "T전화"가 꽤 인기가 있다. 기본적인 스팸 관리 기능이 사용자들에게 좋은 평가를 얻고 있으면서, SKT외에도 다른 사용자들에게도 사용하게 해준게 꽤 좋은 평가를 얻고 있는게 아닌가 싶다. 그래서 여름앱을 만족스럽게 쓰면서 자연스레 "이거 SKT에서 통신사의 새로운 기준을 제시하겠구나"라는 생각이 들었었다. 바로, 통신사에서 제일 잘할 수 있는, "전화와 문자 서비스"를 제대로 짚었기 때문이었다.&lt;/p&gt;

&lt;p&gt;T전화와 여름앱은 SKT에서 만들었지만, 모든 통신사들에서 쓸 수 있었다. 삼성에서 만든 휴대폰이든, LG, 구글에서 만든 휴대폰이든 SKT, KT, LGT를 쓰든, 모든 안드로이드 폰이 이 앱을 사용할 수 있었다. 정말 제대로 잘 만든다면, 전세계 모든 안드로이드 앱의 전화와 문자앱을 SKT에서 먹어버릴 수 있는 상황이었다. 특히 T전화는 삼성에서도 T전화를 벤치마킹한다는 말이 나올 정도였다.&lt;/p&gt;

&lt;p&gt;만약 이렇게 계속 영향력을 넓혀서 문자 시장에서도 최고자리를 차지한다면, 자연스럽게 다른 앱으로 영향력을 넓힐 수 있을 것이었다. 예를 들면, 구글의 inbox처럼 문자를 할 일 목록처럼 관리해서 개인비서나 노트앱 시장을 노려본다와 같은 시도를 해볼 수 있었을 것이다.&lt;/p&gt;

&lt;p&gt;사실 딱히 돈이 안되고, 당장 눈에 보이는 성과가 없으니 서비스를 종료하지 않았나하는 생각이 든다. 특히 문자 시장은 저물어가는 시장으로 인식되어서 그런가 싶다. 하지만 이 상황에서도 통신사가 본의아니게 우위를 점하고 있는게 사실 전화와 문자이다. 역설적이지만, 카카오톡과 같은 메신저들이 득세를 해도 모든 휴대폰에는 문자앱이 설치되어 있다. 그리고 아직까지는 많은 서비스들(카드 결제 알림, 공과금 안내 등)이 문자를 통해서 이루어지고 있다. 앞에서 얘기한 것처럼 T전화가 전화 서비스를 제대로 제공하고 사용자들에게 다가가는데 성공했다면, 자연스레 문자앱 시장에서도 성공하는게 당연한 수순으로 보였다.&lt;/p&gt;

&lt;p&gt;한국 통신사에서 재미난 사업 방향을 제시한 것 같았는데 아니어서 아쉽고, 사용자 입장에서 괜찮은 앱 하나가 사라져서 아쉽다. 여름 앱의 종료는 정말 아쉽다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/446</guid>
      <pubDate>Sat, 23 Sep 2017 14:28:59 GMT</pubDate>
    </item>
    <item>
      <title>블로그 이전 및 WimyBlog 소개</title>
      <link>http://blog.wimy.com/445</link>
      <description>&lt;p&gt;블로그를 이사했다. 티스토리가 백업을 중지한 후부터 언젠가는 티스토리를 떠나야겠다라고 생각하고 있었는데, 이런저런 생각을 해보다가 github로 가자는 결론을 내렸고 정적 페이지로 블로그를 만들어야겠다고 생각하고 있었다. 하나 걸리는 것이 github의 공식적인 블로그툴이 Jekyll 이라는 툴인데, 루비 언어로 만들어져있었고, 조금 들여다보니 '정적인 페이지들인데 간단히 만들 수 있지 않을까' 라는 생각에 직접 만들기 시작했다.&lt;/p&gt;

&lt;h1&gt;WimyBlog&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/zelon/WimyBlog"&gt;WimyBlog on github&lt;/a&gt;에 C#, .NET Core 2.0에서 동작하는 소스를 올려두었다. 참고로 이 블로그는 &lt;a href="https://github.com/zelon/blog.wimy.com"&gt;blog.wimy.com on github&lt;/a&gt;에 소스가 있다. 즉, &lt;a href="https://github.com/zelon/blog.wimy.com"&gt;blog.wimy.com on gihub&lt;/a&gt;에 markdown 형식으로 글을 쓰고, &lt;a href="https://github.com/zelon/blog.wimy.com"&gt;WimyBlog on gihub&lt;/a&gt;를 실행해서 html들을 뽑아내게 된다&lt;/p&gt;

&lt;p&gt;그냥 기존처럼 파이썬이나 Go를 쓰지 않고, 정적인 페이지들을 만들면 되니까 어떤 언어를 써도 상관은 없었는데, C++ 다음으로 관심이 많은 C#을 좀 더 써보기로 하고, 최신(!) 트렌드인 .NET Core로 만들어보기로 했다. 1.1에서 만들었는데, 도중에 2.0이 나와서 업데이트. Microsoft에서 한창 밀고 있는 .NET Core가 어떤지 궁금하기도 했다.&lt;/p&gt;

&lt;h1&gt;장점: github에서 직접 markdown으로 글 작성 가능&lt;/h1&gt;

&lt;p&gt;Markdown이 글의 원본이다. github.com에서 원래 웹 브라우저에서 Repository에 파일을 생성할 수 있고, Markdown파일의 경우 꽤 편리하게 편집할 수 있기 때문에, 웹에서 글을 편집할 수 있고, 글 배포를 위해서 정적 페이지를 만들 때만 git pull을 한 후 정적 파일들을 만들어내게 되었다. 꽤 좋은 장점이 될듯. 물론 로컬에서 직접 Atom Editor에서 preview를 보면서 편집하는 것도 편하다&lt;/p&gt;

&lt;h1&gt;장점: Local Web Server&lt;/h1&gt;

&lt;p&gt;사용성 입장에서 생각해보면 index.md는 Atom Editor에서 preview를 보면서 편집할 수 있지만, 정적 페이지는 실제로 github에 push를 해야만 볼 수 있다. 그냥 웹 브라우저에 html을 드래그하면 상대 경로나 절대 경로 때문에 css를 제대로 못 가져오거나, 링크가 제대로 연결되지 않는다. 그래서 간단한 웹 서버를 내장하면 layout이나 css편집이 쉬워질 것 같아서 웹 서버를 추가했다. .NET Core에서는 기존의 간단한 방식의 C# Console로는 작성이 안되고(HttpListener클래스가 없어졌음;;) ASP.NET Core로 프로젝트를 만들어야 된다. 실제로 만들어보니 꽤 간단한 코드로 동작이 되어서 만족스러움. 이 로컬 웹 서버 덕분에 github에 push하지 않아도 css, html 편집을 쉽게 할 수 있다&lt;/p&gt;

&lt;h1&gt;참고: github의 정적 페이지 서비스 방식&lt;/h1&gt;

&lt;p&gt;특정 디렉토리에 index.md, index.html이 있으면 해당 디렉토리의 url을 요청했을 때, index.html을 먼저 보여주고, index.xml도 바로 서비스 해준다. 즉, blog.wimy.com/5 라는 디렉토리에 index.md와 index.html 파일이 있으면 항상 index.html 파일을 보여준다. 그래서, index.md는 원본이 되고, 서비스하는 파일은 index.html 파일이 되도록 구성했다. 그래서 하나의 글은 하나의 디렉토리 아래에 모을 수 있었다. 글에 embed된 이미지 파일이나 metadata 파일도 하나의 디렉토리에 모이도록 구성했다.&lt;/p&gt;

&lt;p&gt;그리고 rss를 위해서 조사해보니, index.xml도 바로 서비스를 해줬다. 글들을 모은 후에 rss 형식으로 rss 디렉토리 아래에 index.xml 파일을 만들어주면 blog.wimy.com/rss 서비스를 할 수 있었다.&lt;/p&gt;

&lt;h1&gt;참고: index.md 에서 github 형태로 index.html로 변환&lt;/h1&gt;

&lt;p&gt;pandoc을 이용하면 github 문법으로 index.html로 변환해준다&lt;/p&gt;

&lt;h1&gt;참고: RSS&lt;/h1&gt;

&lt;p&gt;아무래도 나도 다른 블로그의 글을 항상 feedly로 rss를 통해서 보기 때문에 rss를 달지 않을 수 없었다. 티스토리의 rss와 공식 스펙을 보면서 그대로 구현했다. 딱히 어려운 점은 없었고, GMT 시각으로 변환하는 점만 주의하면 끝&lt;/p&gt;

&lt;h1&gt;참고: 기존 데이터의 이전&lt;/h1&gt;

&lt;p&gt;전체 들인 시간 중에 가장 많은 공을 들인 부분. 기존 티스토리 백업 파일(xml)에서 index.md 파일들을 뽑아내는 것이었다. 검색을 해보면, 3~4가지의 포스팅과 소스 파일이 나오는데, 내가 원하는 형태가 없었다. php라든지, 첨부 파일을 고려하지 않았다든지.. 그래서 직접 만들어봤다. &lt;a href="https://github.com/zelon/TistoryConvertor"&gt;TistoryConvertor on Github &lt;/a&gt;에 소스를 올려두었다. 사실 한번만 제대로 실행되고 버려질 프로젝트이지만 ㅠㅜ&lt;/p&gt;

&lt;h1&gt;에필로그&lt;/h1&gt;

&lt;p&gt;티스토리의 데이터 복원 기능 종료가 2013년이었다고 하니, 거의 4년을 마음 속에만 간직한 작업을 이제야 끝냈다. 물론 기능은 너무 미미하지만, 대학교 때 처음 php로 내 전용 게시판을 만들 때처럼 감회가 새롭다. 덕분에 .NET Core를 좀 써볼 기회가 있었고, 유닛테스트를 제법 고려한 코딩을 해보기도 했다. 앞으로 WimyBlog에 얼마나 더 시간을 쓸 수 있을지는 모르겠지만, 대부분의 개인 프로젝트가 그렇듯이 즐거운 마음으로 시작했고, 재미있게 코딩해서 좋았던 것 같다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/445</guid>
      <pubDate>Sat, 26 Aug 2017 14:28:17 GMT</pubDate>
    </item>
    <item>
      <title>[책후기] 게임 프로그래밍 패턴</title>
      <link>http://blog.wimy.com/444</link>
      <description>&lt;p&gt;&lt;img src="GameProgrammingPattern.jpg" alt="GameProgrammingPattern" /&gt;&lt;/p&gt;

&lt;p&gt;한참 회사 일에 여유가 있을 때 읽기 시작했는데, 갑자기 엄청나게 바빠져서 미뤄두다가, 찝찝함을 견디지 못하고 다시 읽기 시작해서 끝까지 읽게 되었다.&lt;/p&gt;

&lt;p&gt;일단 책의 내용은 너무 와닿는다. 전혀 추상적이지 않고, 짤막한 예제들로 이루어져 있어서 술술 읽힌다. 그리고 책도 두껍지 않다;; 게임 프로그래밍을 하고 있는 입장에서는 필독서라고 불릴만한 것 같다.&lt;/p&gt;

&lt;p&gt;다른 책들은 읽으면서 요점들을 구글 문서에 정리했었는데, 이 책은 정리할 수가 없었다. 한번 읽은 후에는 제목만 봐도 무슨 얘기를 하는지 알 정도의 자세한 설명이 있기 때문이다. 정리를 꼭 해야 한다면 책을 베끼는 수준이 될지도...;&lt;/p&gt;

&lt;p&gt;전반적으로 패턴들을 소개하면서, 해당 패턴의 장점뿐만 아니라 단점도 소개하면서 해당 패턴을 사용할 때 어떤점들을 고려해야 하는지에 대해서 자세히 설명되어 있는 부분이 특히 좋았다.&lt;/p&gt;

&lt;p&gt;게임 프로그래밍을 한다면 다들 읽어보시길...&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/444</guid>
      <pubDate>Sat, 29 Jul 2017 09:16:23 GMT</pubDate>
    </item>
    <item>
      <title>[책후기] 훌륭한 프로그래머 되는 법</title>
      <link>http://blog.wimy.com/443</link>
      <description>&lt;p&gt;책 제목부터가 멋지다 '훌륭한 프로그래머 되는 법'. 나는 스스로 훌륭한 프로그래머라고 생각하지만 늘 그렇지 않다는 사실을 깨달으며 살고 있기 때문에, 대체 어떻게 하면 훌륭한 프로그래머가 될 수 있을까를 고민하며 책을 읽기 시작했다.&lt;/p&gt;

&lt;p&gt;내가 가장 많이 느낀 건, 코드에 신경을 쓰라는 것이다. 오랜 코딩에 익숙해져 너무나 당연히 한줄한줄 쓰는 코드를 돌아보는 계기가 되었다. 어떤 일이 주어지면 주욱 코드를 적어내는데, 이제는 다시 한번 이렇게 코딩하는 것이 맞는 것인가, 아니면 더 좋은 방법이 있는가, 이 코드가 최선인가라는 생각을 한번쯤은 하면서 코딩을 하게 되었다.&lt;/p&gt;

&lt;p&gt;책 내내 유닛테스트의 중요성에 대해서 강조한다. 이 책을 읽으면서 테스트 케이스를 가능하면 만들려고 노력하게 되었다. 그 덕분에 조금이나마 테스트 가능한 코드에 대한 고민을 더 하게 되었고, 그에 기반하여 조금 더 자신감있는 리팩토링을 할 수 있게 되었다. 사실 유닛 테스트는 다른 책들에서도 항상 강조하는 것이었는데, 이 책을 보면서 다시 한번 마음 잡고 습관화하려고 노력하고 있다.&lt;/p&gt;

&lt;p&gt;책의 많은 부분이 마음가짐에 대한 것이다. 실수를 해도 용기를 내고, 이렇게 하는 것이 우울함에 빠져있는 것보다 더 나은 방법이라는 등, 프로그래머의 삶에서 중요한 마음가짐과 태도에 대한 얘기가 많다.&lt;/p&gt;

&lt;p&gt;프로그래머라면 한번쯤 읽어볼만한 좋은 책인 것 같다. 그리고 꽤 얇다 :)&lt;/p&gt;

&lt;p&gt;이 책을 읽으며 메모한 내용을 &lt;a href="https://docs.google.com/document/d/e/2PACX-1vQxjG3v1QNhYCUqpJEVlediT902t0-zcU4a0iMT7KDNIHmcT6Qty_2CYOI3cde1yogz62tzRbQyP6-_/pub"&gt;구글 문서&lt;/a&gt;에 공유한다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/443</guid>
      <pubDate>Tue, 18 Jul 2017 14:12:23 GMT</pubDate>
    </item>
    <item>
      <title>미니멀리즘 책을 읽고 실행하다</title>
      <link>http://blog.wimy.com/442</link>
      <description>&lt;p&gt;회사에서 eBook 대여를 해주기 시작하면서, 아내가 관심있어하고, 직장 동료도 관심을 가지고 실천해서, 미니멀리즘 관련 책을 3권쯤 읽어봤다.&lt;/p&gt;

&lt;p&gt;"나는 단순하게 살기로 했다", "버리면 버릴수록 행복해졌다", "미니멀라이프 아이디어 55"&lt;/p&gt;

&lt;p&gt;기본은 불필요한 물건을 버리기. 버리면 공간이 넓어진다. 버린 후 남겨진 물건들에 집중하게 된다. 모든 물건들은 메시지를 보낸다고 한다. "날 좀 봐줘!! 날 언제쓸꺼야! 난 잊어버린거야?" 이런 메시지들이 여기저기서 받게 되면, 우리는 은연 중에 스트레스를 받게 된다.&lt;/p&gt;

&lt;p&gt;나는 기본적으로 쇼핑을 즐기지 않고, 뭔가를 막 사모으는 사람은 아니지만, 뭔가를 정말 버리지 못하는 사람인 건 확실했다. 그런데 버리기 시작하니 기분이 좋다. 뭔가 마음의 짐을 버리는 느낌이다.&lt;/p&gt;

&lt;p&gt;책을 읽고나서, 많은 물건들을 필요한 사람에게 주고, 팔고, 버렸다. 특히 읽지도 않고 쌓아두던 많은 책들을 버렸다;; 그랬더니, 남은 책들은 열심히 읽기 시작했다. 그리고 버려두었던 블로그에도 다시 글을 쓰기 시작했다.&lt;/p&gt;

&lt;p&gt;버릴 것들을 정리하면서, 쓸 수 있는 것들을 다시 확인해보니, 넥서스7가 있었다. 이제 넥서스7을 들고다니면서 eBook을 퇴근길에 보기 시작했다. 하루에 조금이라도 더 책을 읽기 시작하니, 삶에 활력이 더해지는 느낌이다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/442</guid>
      <pubDate>Tue, 04 Apr 2017 14:23:23 GMT</pubDate>
    </item>
    <item>
      <title>Clean Code를 읽다</title>
      <link>http://blog.wimy.com/441</link>
      <description>&lt;p&gt;&lt;img src="CleanCode.jpg" alt="CleanCode" /&gt;&lt;/p&gt;

&lt;p&gt;Clean Code를 읽었다. 육아에 지치고, 컴퓨터에 앉으면 코딩을 우선시하느라 당분간 책을 못 읽었었는데, 마음잡고 하루에 1챕터씩 읽어내려갔다. 하루에 1챕터라는 목표를 정하고, 애들 재우고 나와서 무조건 책을 읽고 다른 일을 시작한다고 정하니 확실히 목표를 달성할 수 있었다.&lt;/p&gt;

&lt;p&gt;책 내용은 코딩의 전반적인 권장 사항에 관해서이다. 결론을 요약하자면, "읽기 좋게 코드를 짜라. 테스트 코드를 짜라. 시간을 들여서 코드를 재검토해라"로 요약해볼 수 있겠다. 알면서도 지키지 못했던 부분들을 꼬집는 내용을 읽을 때마다 뜨끔뜨끔했다;; 그리고 어렴풋이 그러리라 생각했던 부분들을, 왜 그런지, 어떻게 해야하는지를 명확히 적어놓은 부분들이 많았다. 꼭 몸에 익히도록 해야겠다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.google.com/document/d/1jLGEkWy5V7CCus5gWjioVJNMoAk3aBgRJHVISuA_hnE/pub"&gt;구글 문서에 정리한 내용 링크&lt;/a&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/441</guid>
      <pubDate>Tue, 04 Apr 2017 14:07:16 GMT</pubDate>
    </item>
    <item>
      <title>나의 프로그래밍 언어 선택 기준</title>
      <link>http://blog.wimy.com/437</link>
      <description>&lt;p&gt;언젠가 한번 글로 정리해봐야지 하던 것을 한번 적어본다.&lt;/p&gt;

&lt;p&gt;내가 처음 hello world를 모니터에 띄워본지 꽤 되었기 때문에, 지금은 어느 정도 쓸 수 있다고 생각하는 언어가 몇 개 있다. C++, Python, C#, Java, Go, Javascript 정도가 있다. 물론 언어마다 숙련도가 꽤 차이가 난다.&lt;/p&gt;

&lt;p&gt;어떤 새로운 프로그램을 만들 때 어떤 기준으로 언어를 고를까를 생각해보다가, 나에게는 2가지의 기준이 있다는 생각이 들었다.&lt;/p&gt;

&lt;h1&gt;Garbage Collection&lt;/h1&gt;

&lt;p&gt;먼저 Garbage Collection 이 있느냐 없느냐이다. 이 기준은 성능에 민감한, 특히 온라인 게임 서버 중 필드 던전(불특정 다수가 만나서 전투를 할 수 있는 공간)을 랙 없이 구현할 수 있는 언어이냐 아니냐를 판단하는 기준이 된다. 쉽게 생각해서 Garbage Collection이 동작하게 되었을 때, 전투가 벌어진다면, 버벅이게 될 것이기 때문이다. 그래서 Garbage Collection이 있는 언어는 이런 서버를 제작할 때는 배제되어야 한다. &lt;/p&gt;

&lt;p&gt;그래서, 이런 서버를 만들 때는 C++을 쓸 수 밖에 없을 것 같다. Rust라는 언어가 최근에 나온 언어 중에는 Garbage Collection이 없다고 하는데, 아직 한번도 안 써봐서, 기회가 온다면 한번 살펴봐야 겠다.&lt;/p&gt;

&lt;h1&gt;동적 타입 vs 정적 타입&lt;/h1&gt;

&lt;p&gt;그리고 또 하나의 기준은 동적 타입이냐, 정적 타입이냐이다. 동적 타입인 python+Javascript로 약 4천줄의 코드를 5년 정도 유지보수하면서 느낀 것은 컴파일을 하면 쉽게 잡히는 버그들을 실행시간에 만나게 된다는 것이다. 그냥 함수 이름을 하나 더 알아보기 쉽게 바꾸었는데, 혹시나 내가 검색하지 못한 곳에서 참조하고 있을까봐 전전긍긍하게 되거나, 변수 하나 삭제했는데, 테스트 못한 케이스가 있을까봐 조바심을 낸다. 혹시나 이런 경우는 유닛 테스트를 잘 짜지 못해서 그렇다고 할 수도 있지만, 글쎄, 많은 케이스들을 로직 검증을 위해서가 아닌, code coverage 테스트를 위해서 하나하나 유닛 테스트로 짜고 있는 자신을 보고 있으면, 내가 왜 이러고 있나라는 생각이 든다.&lt;/p&gt;

&lt;p&gt;그래서, 동적 타입의 스크립트 언어(pytho, javascript등)는 실행시켰을 때, if/for/while 등의 조건 분기가 없는 코드를 짜는 것 정도는 납득할만하다. 어차피 한번 실행시키면 대부분의 코드가 테스트되기 때문이다. 그 외에 복잡한 로직이 들어가고 depth가 깊어지는 코드라면 동적 타입의 언어는 버리자. 사실 이렇게 생각하면, python을 쓸 수 없는데, 그자리를 go언어와 C#스크립트(Visual Studio 2015 Update3이상 설치)가 이제 그 대안이 될 수 있을 것 같다. 그리고 javascript의 경우에는 typescript를 통해서 컴파일해낸 javascript를 사용하게 될 것 같다.&lt;/p&gt;

&lt;h1&gt;나의 결론&lt;/h1&gt;

&lt;p&gt;python 이제 봉인하자&lt;/p&gt;

&lt;p&gt;javascript는 typescript로 컴파일해내서 쓴다&lt;/p&gt;

&lt;p&gt;스크립트는 가능하면 C# script, cross platform은 go언어&lt;/p&gt;

&lt;p&gt;랙없어야 하는 서버는 C++. 시간나면 rust 잠깐 봐두자&lt;/p&gt;

&lt;p&gt;랙이 큰 문제없는 서버는 내가 만들 일이 거의 없긴 한데, C#을 기본으로 하고, java를 보는게 어떨까 고민 중...&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/437</guid>
      <pubDate>Wed, 28 Sep 2016 14:43:47 GMT</pubDate>
    </item>
    <item>
      <title>[책소개] 코딩을 지탱하는 기술</title>
      <link>http://blog.wimy.com/436</link>
      <description>&lt;p&gt;예전에 재미있게 읽었던 책인데, 제목만 적어놓고 내용이 없었다...;&lt;/p&gt;

&lt;p&gt;마치 프로그래머의 교양서 같은 느낌의 책으로, 짬짬이 공부는 하기 싫고(!) 뭔가 책 읽고는 싶을 때 읽어보면 재밌게 읽을 수 있을 것 같다. 게다가 책이 얇기(270페이지)까지 하다.&lt;/p&gt;

&lt;p&gt;왜 프로그래밍 언어가 이렇게 발달해왔는지, 우리가 무심코 사용하는 프로그래밍 기법들이 어떻게 생겨났는지에 대한 얘기를 재미있게 해준다.&lt;/p&gt;

&lt;p&gt;프로그래머라면 한번쯤 읽어볼만하다.&lt;/p&gt;

&lt;p&gt;&lt;img src="book.jpg" alt="코딩을 지탱하는 기술" /&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/436</guid>
      <pubDate>Fri, 08 Jul 2016 00:53:31 GMT</pubDate>
    </item>
    <item>
      <title>대체 누가 내 스택에 숫자 2를 적었나</title>
      <link>http://blog.wimy.com/435</link>
      <description>&lt;p&gt;&lt;a href="http://blogs.unity3d.com/kr/2016/04/25/debugging-memory-corruption-who-the-hell-writes-2-into-my-stack-2/"&gt;http://blogs.unity3d.com/kr/2016/04/25/debugging-memory-corruption-who-the-hell-writes-2-into-my-stack-2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;갑자기 스택에 이상한 값이 쓰여지는 현상을 디버깅하는 과정을 정리한 글. 과정을 따라가는 것이 흥미롭다.&lt;/p&gt;

&lt;p&gt;결론은 시스템 콜 안에서 예외가 발생해서 unwinding 되었고, 콜 안에서 사용된 스택 변수의 값이 뒤늦게 세팅되어서 발생되었다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/435</guid>
      <pubDate>Wed, 18 May 2016 09:36:17 GMT</pubDate>
    </item>
    <item>
      <title>[영화감상] 하늘에서 음식이 내린다면</title>
      <link>http://blog.wimy.com/434</link>
      <description>&lt;p&gt; 하늘에서 음식이 내린다면2가 있길래, 우와 1편이 꽤 재미있었나보다. 애들이랑 같이 봐야지하고 빌렸는데, 애들이랑 같이보면서, 정작 내가 엄청 신나게 봤다.&lt;/p&gt;

&lt;p&gt; 하늘에서 비가 아닌 음식이 내리면 어떻게 될까라는 생각에서 시작된 영화인데, 정말 재미있는 상황들이 벌어진다. 가족애, 멜로, 액션, (말도 안되는)과학, 자기 개발(?) 등 다양한 재미를 준다. 후반부를 볼 때, 애들이랑 저녁 먹으면서 봐서, 윈도우10에 DVD Player App 을 설치하면서 까지 다시 뒷장면을 제대로 봤다. 애들이 있다면 강추~&lt;/p&gt;

&lt;p&gt; 내가 봤을 때는 포탈, 스타워즈, 모탈컴뱃, 반지의 제왕 정도의 오마주가 있었다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/434</guid>
      <pubDate>Sun, 08 May 2016 12:31:05 GMT</pubDate>
    </item>
    <item>
      <title>유니티 클라우드 빌드에서 만든 app 이 유니티 로그 화면에서 멈출 때</title>
      <link>http://blog.wimy.com/433</link>
      <description>&lt;p&gt; 집에서 종종 unity 만지면서 놀다가, 유니티 클라우드 빌드를 써보기로 하고 간단히 설정해서 써봤는데, 로컬에서 빌드하면 잘 시작되는데, 유니티 클라우드 빌드에서 빌드한 apk 를 받아서 실행하면 유니티 로그 화면에서 멈추는 것이다. 이 문제로 고생하다가 해결하려고 마음 먹고 adb 로 로그를 찍어봐도 별 이상없고 해서 유니티 클라우드 빌드 웹페이지의 설정 화면을 살펴보니, 해결할 수 있었다.&lt;/p&gt;

&lt;p&gt; Config -&amp;gt; Show Advanced Options -&amp;gt; Edit Advanced Options 클릭 -&amp;gt; Scene List 에 본인의 Scene 파일 이름(예를 들면 Default)를 적고 Add 버튼을 누른 후 저장하자. 아마 제대로 된 경로(Assets/Default.unity)를 보여줄 것이다. &lt;/p&gt;

&lt;p&gt; 즉, 클라우드 빌드 시에 기본으로 시작할 scene 을 지정해주지 않아서 발생한 문제였다(사실 이걸 왜 굳이 설정해줘야 하는지는 의아하지만;;). 여튼 이제 다시 빌드를 후 apk 를 설치해보자. 잘 시작된다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/433</guid>
      <pubDate>Mon, 25 Apr 2016 15:30:33 GMT</pubDate>
    </item>
    <item>
      <title>동방불패를 보다</title>
      <link>http://blog.wimy.com/432</link>
      <description>&lt;p&gt;이제야 영화 '동방불패' 를 봤다. 1992년 작품이다. 아는 형이 '동방불패'를 외치며 뛰어다닐 때도 그러려니 하고 있었는데, 난 명작 영화를 놓친 게 너무 많다. 돌이켜보면 사실 저 시대에는 난 국민학교 6학년이었고, 그 나이가 볼 영화도 그 당시에 볼 환경도 아니었던 것 같다.&lt;/p&gt;

&lt;p&gt; '양들의 침묵' 을 봤을 때 느꼈던, 그 이후에 나온 많은 영화들이 그 모티브를 가져와서 너무 식상해진 명작 영화를 보는 느낌이었지만, 동방불패는 지금봐도 꽤 볼만하다는 느낌이었다. 동성애와 원수와의 사랑이 적절하게 녹아있고, 오랜 만에 봐서인지 중국식 칼싸움 액션(!)이 꽤 멋있다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/432</guid>
      <pubDate>Mon, 07 Mar 2016 13:14:00 GMT</pubDate>
    </item>
    <item>
      <title>한국에서 appengine 응답이 느린 이유는 위치 때문이다</title>
      <link>http://blog.wimy.com/431</link>
      <description>&lt;p&gt;뭐 당연한 얘기일 수도 있는데, go언어를 appengine 으로 개발하면서 로컬에서 띄운 서버인데도 1초 정도 걸렸다. 너무 느려서 stackoverflow 에 질문했더니... &lt;a href="http://stackoverflow.com/questions/33942583/too-slow-ttfblatency-with-go-language-in-appengine/" class="uri" class="tx-link"&gt;&lt;a href="http://stackoverflow.com/questions/33942583/too-slow-ttfblatency-with-go-language-in-appengine/"&gt;http://stackoverflow.com/questions/33942583/too-slow-ttfblatency-with-go-language-in-appengine/&lt;/a&gt;&lt;/a&gt; 실서버에서는 괜찮을거라고...&lt;/p&gt;

&lt;p&gt;근데 나는 실서버에 올려도 느려서 혹시나 하고 developer console 에서 확인해보니 appengine 의 위치가 us-central 이다. 그래서 azure 를 통해서 가상 컴퓨터를 미국 중부에 만들어서 접속해보니 37ms 안에 응답이 시작되었다. 역시...&lt;/p&gt;

&lt;p&gt;appengine 을 쓸 때는 빠른 응답을 기대하고 쓰면 안되겠군.&lt;/p&gt;

&lt;p&gt;테스트 사이트 : &lt;a href="http://test-try-go.appspot.com/" class="uri" class="tx-link"&gt;&lt;a href="http://test-try-go.appspot.com/"&gt;http://test-try-go.appspot.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;소스 코드 : &lt;a href="https://github.com/GoogleCloudPlatform/appengine-try-go" class="uri" class="tx-link"&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-try-go"&gt;https://github.com/GoogleCloudPlatform/appengine-try-go&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/431</guid>
      <pubDate>Sat, 28 Nov 2015 02:53:14 GMT</pubDate>
    </item>
    <item>
      <title>TubeEnglish 를 소개합니다</title>
      <link>http://blog.wimy.com/430</link>
      <description>&lt;p&gt;Google Hackfair 에 내려고 만들었는데, 안타깝게도 전시회에는 못 나가게 되었음 ㅠㅜ 마무리하는 의미로 블로그에 소개글 남겨본다.&lt;/p&gt;

&lt;p&gt;메인 주제는 YouTube 를 통한 영어 공부를 할 때 도움이 되는 웹앱이다.&lt;/p&gt;

&lt;p&gt;&lt;img src="tube_english.png" width="700" height="524" /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;다음과 같은 기능이 있다.&lt;/p&gt;

&lt;p&gt;* 구간 반복&lt;/p&gt;

&lt;p&gt;* 속도 조절&lt;/p&gt;

&lt;p&gt;* 5초/10초 앞으로 가기&lt;/p&gt;

&lt;p&gt;* 자막 켜고 끄기&lt;/p&gt;

&lt;p&gt;* 사전 연동&lt;/p&gt;

&lt;p&gt;소개 동영상 주소는 &lt;a href="https://www.youtube.com/watch?v=_UVfek-zRqE" class="uri" class="tx-link"&gt;&lt;a href="https://www.youtube.com/watch?v=_UVfek-zRqE"&gt;https://www.youtube.com/watch?v=_UVfek-zRqE&lt;/a&gt;&lt;/a&gt; 이다.&lt;/p&gt;

&lt;p&gt;홈페이지 주소는 &lt;a href="http://tube-english.appspot.com/" class="uri" class="tx-link"&gt;&lt;a href="http://tube-english.appspot.com/"&gt;http://tube-english.appspot.com/&lt;/a&gt;&lt;/a&gt; 이다. 여기서 검색 창에 YouTube 주소를 붙여넣고 검색하면 위의 화면처럼 로딩되면서 앞의 기능들을 사용할 수 있다. 크롬 웹브라우저에서는 &lt;a href="https://chrome.google.com/webstore/detail/bcojlbpjgjmaniipjelppbehhfhankcb/publish-accepted?hl=ko&amp;amp;utm_source=chrome-ntp-launcher" class="tx-link"&gt;[플러그인]&lt;/a&gt; 을 설치하면 YouTube 에서 동영상을 보다가 원클릭에 갈 수 있다.&lt;/p&gt;

&lt;p&gt;오픈소스이며 주소는 &lt;a href="https://github.com/zelon/youtube-english" class="uri" class="tx-link"&gt;&lt;a href="https://github.com/zelon/youtube-english"&gt;https://github.com/zelon/youtube-english&lt;/a&gt;&lt;/a&gt; 이다. 개발 환경은 golang + appengine, javascript, bootstrap, chrome extension 이다.&lt;/p&gt;

&lt;p&gt;나름 열심히 준비했는데, 아이디어가 조금 부족했던 것 같다. 나름 요긴하게 쓰는 사이트가 되겠지만 말이다. 아쉽지만, 다음을 기약하며 관련 지식을 좀 더 습득했는 걸로 만족하자.&lt;/p&gt;

&lt;p&gt;끝.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/430</guid>
      <pubDate>Tue, 24 Nov 2015 15:24:40 GMT</pubDate>
    </item>
    <item>
      <title>go언어 + appengine 으로 개발하면서 겪은 것들</title>
      <link>http://blog.wimy.com/429</link>
      <description>&lt;p&gt;google hackfair 2015 를 준비하면서 겪었던 것들을 잊기 전에 정리해본다. 아쉽게도 전시회 명단에는 들지 못했지만 ㅠㅜ&lt;/p&gt;

&lt;p&gt;go 로 만든다고 매우 큰 속도 향상은 없었다. 연산을 많이 하는 작업은 빨라질 거라 예상하는데, 단순한 request~response 의 경우 속도가 그렇게 빠르다는 느낌은 없다. (내가 아직 잘 몰라서겠지만)오히려 단순한 작업의 경우 1,2초의 응답 속도를 보일 때가 있다. 왜 그런지는 좀 더 파악해봐야 할듯.&lt;/p&gt;

&lt;p&gt;appengine 에서 datastore 를 사용할 때 로컬에서는 문제가 없었는데 실제 서버에서 "" 이런 오류가 날 경우가 있다. 해당 쿼리문의 조합을 지원하는 복합 인덱스가 있어야 한다는 것인데, 로컬 서버에서는 문제가 없었기 때문에 좀 난감했다. 로컬 서버를 띄울 때 'devappserver.py --require_indexes yes .' 형태로 띄우면 로컬 서버에서도 해당 문제가 재현이 된다. 원인은 index.yaml 에 복합 인덱스를 실수로 수동으로 지웠기 때문이었다. require indexes 옵션없이 로컬에서 서버를 동작시키면 index.yaml 파일을 갱신해주는데 이 파일을 수동으로 편집하고 서버에 올렸기 때문에 발생한 문제였다. 이것도 나중에 자세히 살펴봐야할듯. 여튼 중요한 건, 쿼리문에서 2개 이상의 필드를 함께 사용하면 그 필드들이 묶인 복합 인덱스가 필요하다. filter("A").order("B") 이면 A+B 의 복합 인덱스가 필요.&lt;/p&gt;

&lt;p&gt;datastore 에서 1500자 넘는 문자열은 string 으로 저장이 안되는 것으로 나오는데, 좀 더 살펴보니 index 를 걸지 않으면 사용할 수 있다. 자동으로 index 가 걸려서 사용 못하나 싶었지만, `datastore:",noindex"` 를 구조체 필드에 붙여주면 index 를 걸지 않게 된다.&lt;/p&gt;

&lt;p&gt;일반 go 언어에서는 http.Get 으로 다른 웹페이지를 가져오지만, appengine 에서는 "appengine/urlfetch" 를 사용해야 한다&lt;/p&gt;

&lt;p&gt;index.yaml 에서 특정 디렉토리 전체를 업로드/노출시킬 수 있다. static_dir 구문을 사용하면 쉽게 가능하다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/429</guid>
      <pubDate>Tue, 24 Nov 2015 14:48:20 GMT</pubDate>
    </item>
    <item>
      <title>어느 게임 서버 개발자의 하루</title>
      <link>http://blog.wimy.com/428</link>
      <description>&lt;p&gt;어느날 갑자기 나는 회사에서 무엇을 하고 있는가하는 생각이 들었다. 블로그가 원래 개인의 기록을 남기는 것이기 때문이기도 하고 혹시나 게임 서버 개발자가 되고 싶어하는 사람들이 궁금해할까 싶기도 하고...&lt;/p&gt;

&lt;p&gt; 대략 9시 전후로 자전거를 타고 출근을 한다. 집에서 나서서 회사 자리에 앉기까지 대략 20분 정도 걸리는 거리라서 부담이 없다. 오히려 버스를 타면, 걸어나오는 시간, 버스 기다리는 시간 등 때문에 더 오래 걸린다. 비오면 버스타야함. 9시 30분 기준으로 업무가 시작되며, 좀 늦게 와도 뭐라하는 사람은 없다. 다만, 업무시간 8시간은 다들 알아서 지킨다.&lt;/p&gt;

&lt;p&gt; 출근해서 자리에 앉으면, 어느 자리에서나 보이는, 매우 커다란 모니터에 주기적으로 개발 상태를 체크하는 CI(젠킨스)가 현재 어떤 문제가 발생했는지 알려준다. 문제가 발생하면 빨간 배경에 'XXX Failed, YYY Failed' 같은 화면을 보여주고, 문제가 없으면 '최신 걸그룹 뮤직 비디오' 를 보여준다. 5일 중에 2일 정도는 이런저런 문제가 있기 때문에 이런 문제를 해결한다. 보통은 단순 실수, CI 프로세스의 버그 정도이다. 물론 해결하기 골치 아픈거라서 임시 땜빵으로 넘어가는 경우도 있다. 이런 문제를 해결하는 데 대략 1시간 정도 소모되는 것 같다.&lt;/p&gt;

&lt;p&gt; 일단 급해보이는 'XXX Failed' 들을 해결하고나서 걸그룹 뮤직 비디오가 나오는 걸 잠시 잠깐 보고나서... 덤프 수집 웹페이지를 확인하고 처리한다. 그리고 팀원들의 commit log 들을 훑어보기 시작한다. 어떤 일들이 진행되고 있는지, 내가 실수한 걸 다른 팀원들이 고쳐주지는 않았는지, 다른 팀원들은 어떻게 코드를 만드는지, 나만 이상한 형태로 코드를 만들고 있지는 않은지 확인한다. 좀 관심있거나 흥미를 끄는 commit 은 파일 한줄한줄 diff 하면서 자세히 훑어본다. 궁금한게 있으면 작성자에게 의도를 물어보거나, 내가 생각한 방법은 어떤지 의견을 교환하기도 한다. 의견을 교환하면서 많이 배운다는 느낌도 받는다. 대략 30분~60분 정도의 시간이 소모된다.&lt;/p&gt;

&lt;p&gt; 여기까지 오면 대략 10시나 11시쯤 된다. 12시부터 점심 시간이므로 이 때부터 점심시간 전까지는 코드를 다듬는 시간으로 한다. 지난번 구현에서 일정 부족으로 Ctrl+CV 했던 코드를 정리하거나, 특정 코드들을 모아서 클래스로 뽑아낸다. 평소에 마음에 들지 않았던 코드들을 조금씩 손보는 시간으로 활용한다. 일정과 상관없이 팀장님이 시킨 일들도 한다. 평소에 이런 일을 조금씩 계속 진행해놓아야 디버깅도 편하고, 가슴속의 답답함도 줄어들고, 숨겨진 버그들도 발견되어 수정된다. 물론 바쁜 일정이 있다면 일정을 진행한다.&lt;/p&gt;

&lt;p&gt; 점심시간에는 운동하고 밥 먹거나(50%) 찜질방에서 자고 밥 먹거나(40%) 게임하고 밥 먹는다(10%)&lt;/p&gt;

&lt;p&gt; 오후에는 일정에 따른 일들을 주로 한다. 기획팀에서 주도하는 '이런저런 기능을 추가해주세요', '이거 불편해요' 이런것들이다. 이런 일들을 하기 위해서, 생각도 하고, 코딩도 하고, 기획팀이랑 얘기도 한다. 그러다보면 팀장님이 와서 '뭐 도와줄거 없어요?' 라든지 '이거 좀 이상해요' 라면서 새로운 잡일들을 맡기고 간다... 간단한 일이면 바로 하고 아니면 할일목록에 넣어둔다. 또 계속 일정 진행... &lt;/p&gt;

&lt;p&gt; CI 는 주기적으로 계속 체크를 하기 때문에, 갑자기 빨간색 화면을 보여준다. 그러면 살짝 쉴겸 CI 가 알려주는 문제를 해결한다. 이게 빨리 해결이 안되면 일정 진행을 미루고 해결하는데 시간을 들인다. 여기의 빨간색 화면은 적게는 몇십명, 많게는 백여명이 될 수 있으므로 가능하면 빨리 해결해야 한다.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; 다시 일정을 진행하려고 했는데, 누군가와서 이 덤프 좀 확인해주세요라며 덤프 확인을 요청한다. 나한테 왔다는건 내가 일을 저질렀다는 것이다. 열심히 일을 처리한 후, 핫픽스가 필요하면 해당 브랜치에 핫픽스를 진행하고 다시 배포를 진행한다.&lt;/p&gt;

&lt;p&gt; 다시 일정을 진행하려고 하는데, 이번에는 기획팀원이 와서 이런저런 것들을 물어본다. 당연히 친절히 설명해준다. 나도 잘 모르면 잘 아는 팀원에게 같이가서 설명을 듣는다. 그리고 기획팀원이 헷갈려하는 부분을 헷갈려하지 않도록 하는 방안이 나온다면 또 할일목록에 넣어둔다.&lt;/p&gt;

&lt;p&gt; 일정진행 좀 한다...&lt;/p&gt;

&lt;p&gt; 5일 중에 하루나 이틀은 오후에 팀원들이랑 티타임을 하는 시간이 생겼다. 한번은 꼭 팀장님이 전체 팀원을 모으고, 그냥 몇몇 팀원들이 모여서 티타임을 가지기도 한다. 한창 바쁜데 무슨 티타임이냐고 할 수도 있지만, 팀원들간의 티타임은 중요하다고 생각한다. 서로 개인적인 이야기나 일에 대한 의견교환, 그리고 시덥잖은 농담따먹기도 팀웍에 도움이 된다고 생각한다. 이 팀웍이 일을 할 때 커뮤니케이션 비용을 줄여주고, 불필요한 설명이나 논쟁을 줄여준다. 그리고 사실 나에게도 잠시의 휴식도 필요하고... 어디서 논문인지 통계인지를 봤는데, 직장인이 가장 행복할 때는 상사의 인정, 월급, 승진 같은 것보다도 직장 동료와 즐겁게 대화하는 시간이라고 한다. 나는 행복해...&lt;/p&gt;

&lt;p&gt; 잠시의 휴식 시간을 가진 후 다시 일정 진행...&lt;/p&gt;

&lt;p&gt; 회의가 하나 잡혀있다. 대부분 1시간 정도 회의를 진행한다. 갔다오면 할일목록에 할일 추가 ㅋㅋㅋ&lt;/p&gt;

&lt;p&gt; 다시 일정진행...&lt;/p&gt;

&lt;p&gt; 오후 6시 30분이 퇴근 시간이다. 이 시간이 가까워지면 보통 살짝 다른 형태로 일을 진행하게 된다. 먼저, 함부로 commit 을 만들지 않는다. commit 해서 빌드가 깨지거나 큰 문제가 발생하면 집에 못가는 거다. 그 상태로 집에 가면 무책임하다는 소리가 나올 수 밖에 없다. 물론 조금 늦게 갈 거면 상관없다. 그리고 새로운 작업을 가능하면 시작하지 않는다. 그 대신 밀린 메일을 읽거나, 다른 팀원들의 commit log 를 보기도 한다. 물론 일정이 급하면 일정을 최대한 진행한다.&lt;/p&gt;

&lt;p&gt; 좀 재미있는게, 'XXX Failed' 라는 메시지를 보는 팀원들의 시각이다. 누구나 빨간 배경 화면을 보면 무언가 문제가 있다는 것을 안다. 그리고 누군가는 이 문제를 해결해야 겠다. 누군가는 이 문제를 알려야 겠다. 누군가는 신경 안 쓴다... 누군가 해결하고 있겠지... 하지만 이건 단순한 현상일 뿐이고, 실제로는 얼마큼 해결할 수 있냐에 따라서 반응하는 것 같다. 저게 뭐야 해결해볼까... 아... 어렵구나... 흰건 배경이고 까만건 글자인데... 아몰랑... 그래서 팀에 합류한지 오래되면 문제 해결을 더 잘하게 되는 경향이 있다. 그런데 이걸 잘 해결한다고 해서 프로그래밍을 잘하게 된다거나 그런건 아니다. 그냥 소모적인 시간을 좀 더 쓸 뿐...&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/428</guid>
      <pubDate>Wed, 02 Sep 2015 16:23:51 GMT</pubDate>
    </item>
    <item>
      <title>코드가 망가지는 과정</title>
      <link>http://blog.wimy.com/427</link>
      <description>&lt;p&gt;누군가 코드를 만든다. 꽤 잘 만들었다.&lt;/p&gt;

&lt;p&gt;다른 누군가 그 코드에 수정사항을 가할 일이 생겼다. 원래 코드의 의도를 100% 이해하지는 못하고 만들게 된다. 당연하다. 일정이 있고, 간단해보이는 일을 하는데, 원래 전체 코드를 다 읽고 일할 수는 없다. 하지만, 특정 함수가 길어지게 되었다.&lt;/p&gt;

&lt;p&gt;또다른 누군가가 새로운 기능을 추가한다. 또다시 전체 코드를 모두 이해하고 작업을 하지 않는다. 하지만 새 기능은 제대로 동작하며, 딱히 고쳐야할 이유는 없다. 기존의 코드와 모양새가 다르고, 독립적인 모듈처럼 보이기도 한다.&lt;/p&gt;

&lt;p&gt;또 새로운 기능이 추가되는데 앞의 기능과 비슷한 기능이다. 앞에서 누군가가 만든 클래스와 비슷한(복사~붙여넣기를 한) 클래스를 만들어서 하위 모듈로 추가한다. 여전히 잘 동작한다. 꽤 큰 기능인데, 쉽게 만들었다고 좋아한다.&lt;/p&gt;

&lt;p&gt;앞의 4명 중, 처음 2명이 퇴사를 하였다. 누구도 코드의 의도를 제대로 파악한 사람이 없다.&lt;/p&gt;

&lt;p&gt;새로운 누군가가 정말 간단한 기능을 추가했다. 그런데 중요한 기능이 동작하지 않는다. 디버깅을 한다. 헤맨다. 함수는 엄청나게 길고, 비슷한 클래스들이 여기저기 있고, 이상하게 코드들이 일관성이 없다. 읽기가 힘들다. 이 파일 저 파일을 따라가면서 디버깅을 해야한다.&lt;/p&gt;

&lt;p&gt; What the XXXX. 코드가 왜 이렇게 된거야~~~~~!!!&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/427</guid>
      <pubDate>Tue, 01 Sep 2015 15:21:00 GMT</pubDate>
    </item>
    <item>
      <title>여러명이 함께 협업해서 코드를 만들 때 발생하는 일들</title>
      <link>http://blog.wimy.com/426</link>
      <description>&lt;p&gt;내가 주석으로 남겨놓은 코드는 남들에게 '이게 왜 주석처리되어 있는가, 앞으로 쓰일 코드인가?'라는 의구심을 주게 되고, 코드를 읽는데 방해를 주게 된다.&lt;/p&gt;

&lt;p&gt;사용하지 않게 된 변수, 함수들을 남겨놓으면 그 코드를 잘못 사용하게 될 여지가 있다. 동료가 그 함수를 잘못 사용해버릴 수도 있고, 마찬가지로 더이상 사용하지 않는 변수를 비교한다든지할 수도 있고, 코드를 읽기도 힘들어 진다.&lt;/p&gt;

&lt;p&gt;내가 A라는 작업과 B라는 작업을 동시에 진행하고 한번에 submit 하게 되면, 나의 코드를 리뷰하는 동료들은 도대체 이 submit 은 왜 이렇게 복잡한거야라면서 리뷰를 하지 않게 된다.&lt;/p&gt;

&lt;p&gt;'가나다 동작 방식을 바꿈' 이라고 적어놓은 submit log 는 '가나다 동작 방식을 바꿈. 정렬을 먼저 시킨 후에 공백을 제거함' 이라고 적어놓은 submit log 보다 동료들을 고생시키게 된다.&lt;/p&gt;

&lt;p&gt;내가 별 의미없이 수정한 코드를 동료들이 볼 때 '왜 이렇게 했을까... 뭔가 이상한데, 분명 의도가 있을거야. 그 의도는 무엇일까...' 하게 되는 경우가 있다.&lt;/p&gt;

&lt;p&gt; 위에서 동료들은 '6개월 후의 자기 자신' 그리고 '디버깅 중인 자기 자신' 이 포함된다는 걸 잊지말자.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/426</guid>
      <pubDate>Mon, 31 Aug 2015 15:21:14 GMT</pubDate>
    </item>
    <item>
      <title>프로그래밍을 할 때 변수, 클래스의 이름을 잘 지어야한다</title>
      <link>http://blog.wimy.com/425</link>
      <description>&lt;p&gt;오늘 팀장님께 열심히 강의들었던 내용임... 조금은 각색해서...&lt;/p&gt;

&lt;p&gt;다들 알다시피 프로그래밍을 할 때 이름이 중요하다. 한 눈에 알아보기 쉽고, 읽기 쉽고, 의도를 파악하기 쉽다. 뭐 대충 책에서 이런 내용들이 있고, 다들 알고 있다. 하지만 우리는 비영어권이기 때문에 늘 이름짓기를 힘들어한다.&lt;/p&gt;

&lt;p&gt;오늘 한창 디버깅을 하고 있는데, 살짝 멘탈이 붕괴되는 상황에서, 다른 사람들이 마구 추가한 코드를 접했다. 사실 내가 추가한 것도 있겠지. 하지만 내 기억과는 먼 코드들이다. 왜 여기에 이런 코드들이 존재하는가. 팀장님이 이런 얘기를 해줬다.&lt;/p&gt;

&lt;p&gt;자꾸 다른 사람들이 이 XXXManager 클래스에 이런저런 코드들을 넣는 이유는 이름이 Manager 이기 때문이다. 클래스 이름을 좀더 특화시켜서, Creator 라고 지었으면, 생성과 관련 없는 코드를 다른 사람들이 추가하지 않았을 것이고, 생성에 관련된 코드만 모여있게 될 것이다. Manager 라는 이름으로 클래스를 만들면, 누구나 아무 코드를 집어넣는다. 그리고 그렇게 뚱뚱해진 클래스는 디버깅하는 데에 계속 걸림돌이 된다.&lt;/p&gt;

&lt;p&gt;이름을 잘 짓자.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/425</guid>
      <pubDate>Mon, 31 Aug 2015 15:08:39 GMT</pubDate>
    </item>
    <item>
      <title>iocp WSARecv 에서의 특이한 10014 오류</title>
      <link>http://blog.wimy.com/424</link>
      <description>&lt;p&gt;아는 친구가 만든 프로그램에서 MFC 를 제거하고, x86에서 x64 로 전환하는 과정 중에서 생긴 버그였다. IOCP 에서 WSARecv 를 했는데, 실패하면서 에러코드를 살펴보니 10014 오류가 났다. 한글 번역으로는 '호출에 대한 포인터 인수를 사용하려는 동안 시스템에서 잘못된 포인터 주소를 감지했습니다.' 이고, msdn 에서는 lpbuffers 인자가 잘못되었다고 하고, 이래저래 검색해보면 인자의 생명 주기라든지, 다른 인자가 잘못되었느니라고 적혀있었다.&lt;/p&gt;

&lt;p&gt; 결론은 winsock2.h 를 include 하기 전에 #pragma pack (1) 코드가 있었다. 제거하니 잘된다. ㅠㅜ 아마 pragma pack 에 의해서 winsock2.h 에서 정의하는 구조체가 pack 되어버렸을 것이고, 그렇게 pack 된 구조체만큼을 new 해서 인자로 넘겨주니, 함수로 넘겨진 포인터는 함수가 원하는 크기가 아니어서 생긴 오류인 듯.&lt;/p&gt;

&lt;p&gt; bad pointer 오류 상황에서는 pragma pack 도 연관될 수 있다는 걸 깊이 새겨야겠다. 하지만 이런 오류를 다시 만날 일은 없겠지.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/424</guid>
      <pubDate>Thu, 04 Jun 2015 14:21:52 GMT</pubDate>
    </item>
    <item>
      <title>나의 백업 방법</title>
      <link>http://blog.wimy.com/423</link>
      <description>&lt;p&gt;한 때는 외장하드에 주기적으로 백업을 했었으나 집에 불이라도 나면 다 날아간다는 생각에 클라우드로 백업을 하기로 했다.&lt;br /&gt;
주기적으로 알람을 걸어놓고 때가 되면 스크립트로 ms azure 파일 서비스를 이용해서 백업을 한다. 초기 백업에는 시간이 꽤 걸리지만 두번째부터는 바뀌거나 새로운 파일만 가기 때문에 시간도 그나지 많이 걸리지도 않는다. 그리고 회사에서 msdn subscription을 지원해줘서 무려 공짜! ㅋㅋ&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/423</guid>
      <pubDate>Sat, 09 May 2015 14:13:59 GMT</pubDate>
    </item>
    <item>
      <title>레이드1 이라도 fat 는 날아간다 ㅠㅜ</title>
      <link>http://blog.wimy.com/422</link>
      <description>&lt;p&gt;윈도우에서 제공하는 소프트웨어 레이드1 구축하고 중요한 데이터를 넣어놓았는데 파일 할당 테이블이 갑자기 RAW 로 바뀌었다. testdrive 도 써봤는데 제대로 복구가 안되어서 결국 포기.&lt;br /&gt;
원래 하드가 꽤 오래되어서 2개를 새로 사서 다시 레이드1 구성해서 쓰게로 했다. 다행히 클라우드에 백업을 두기적으로 했기에 날아간건 약 일주일 분량의 사진 20장 정도. 그래도 뭔가 궁극의 레이드! 라고 생각했었는데 생각보다 쉽게 데이터가 깨져서 좀 멘붕이다 ㅠㅜ&lt;/p&gt;

&lt;p&gt; 역시 궁극은 클라우드 백업이다 -_-/&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/422</guid>
      <pubDate>Sat, 09 May 2015 14:10:31 GMT</pubDate>
    </item>
    <item>
      <title>버팔로 공유기가 이상할 때</title>
      <link>http://blog.wimy.com/421</link>
      <description>&lt;p&gt;비공식 펌웨어 이거 깔아보니 잘됨&lt;br /&gt;
현상은 와이파이가 계속 한번씩 안되는거였는데 첨에 펌웨어 자동 업그레이드 후부터 그런거 같았는데... 그래서 버리기 직전에 저거 한번 써보자해서 해봤는데 잘됨&lt;br /&gt;
다들 한번 해보세요~&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/421</guid>
      <pubDate>Sat, 09 May 2015 14:03:10 GMT</pubDate>
    </item>
    <item>
      <title>[책] 프로그래머가 몰랐던 멀티코어 CPU 이야기</title>
      <link>http://blog.wimy.com/420</link>
      <description>&lt;p&gt;서버 프로그래머라면 확 땡기는 제목을 가진 "멀티코어 CPU 이야기" 책을 사둔지는 꽤 된 것 같은데 이상하게 어려울 것이라는 생각에 책을 펼쳐보지 않았던 것 같다 -_-;;; 일단 읽어보니 쉽고 재미있게 적혀있고, 내가 컴퓨터과학을 전공하여 그나마 한번쯤은 들어본 단어들도 많이 나왔다. 항상 책을 읽고나서 좋은 책이었으면 하는 생각이 "왜 좀 더 빨리 이 책을 읽지 않았을까... ㅠㅜ" 이 책도 그런 책 중의 하나가 될 것 같다.&lt;/p&gt;

&lt;p&gt; 멀티코어 CPU 의 동작 방식을 차근차근 풀어나가면서 이런저런 기법들로 CPU 가 돌아가고, 우리는 프로그래밍을 할 때 이런 것들을 고려하면 좋겠다 정도로 이 책을 요약....(너무 짧은가...)할 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt; 이 책을 보고 뽐뿌를 받아서, 미루고 있던 멀티스레드 적용을 ZViewer 의 디코딩 쓰레드를 FileIO 와 Decode 스레드로 분리해서 적용을 해봤는데 대략 2개의 이미지를 읽는데 기존의 60%의 시간만 걸렸다. 만족 중~&lt;/p&gt;

&lt;p&gt; 책의 밑줄 친 내용은 &lt;a href="https://docs.google.com/document/d/105D0-K746Mgk-scuDWUVmuKxcs_a3De4n9r0j_ysJYw/edit?usp=sharing" class="tx-link"&gt;구글 문서[링크]&lt;/a&gt;로 정리했다.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/420</guid>
      <pubDate>Fri, 13 Mar 2015 13:46:00 GMT</pubDate>
    </item>
    <item>
      <title>프로그래머의 정파와 사파</title>
      <link>http://blog.wimy.com/419</link>
      <description>&lt;p&gt;난 열혈강호를 좋아한다. 팀장님의 정파 사파 이론.&lt;/p&gt;

&lt;p&gt;구글 검색을 바로 하면 사파, API Manual 을 뒤진다면 정파 등등&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/419</guid>
      <pubDate>Wed, 04 Mar 2015 14:15:37 GMT</pubDate>
    </item>
    <item>
      <title>boost 라이브러리 사용 중 링크 에러</title>
      <link>http://blog.wimy.com/418</link>
      <description>&lt;p&gt; 갑자기 boost 라이브러리의 asio 를 써보고 싶어져서 boost 를 다운받아서 잠깐 매뉴얼을 읽어본 후에 하라는 대로 bootstrap 과 b2 를 실행해서 라이브러리 빌드를 한 다음에 Visual Studio 2013 에서 asioTest 프로젝트를 만든 후 include/lib 디렉토리를 제대로 설정 후 빌드를 걸었더니 다음과 같은 링크 에러가 났다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Error    1    error LNK2019: unresolved external symbol "class boost::system::error_category const &amp;amp; __cdecl boost::system::system_category(void)" (?system_category@system@boost@@YAAEBVerror_category@12@XZ) referenced in function "public: __cdecl boost::system::error_code::error_code(void)" (??0error_code@system@boost@@QEAA@XZ)    E:\git\asioTest\asioTest\asioTest.obj    asioTest&lt;/p&gt;
  
  &lt;p&gt;Error    2    error LNK2019: unresolved external symbol "class boost::system::error_category const &amp;amp; __cdecl boost::system::generic_category(void)" (?generic_category@system@boost@@YAAEBVerror_category@12@XZ) referenced in function "void __cdecl boost::system::`dynamic initializer for 'errno_ecat''(void)" (??__Eerrno_ecat@system@boost@@YAXXZ)    E:\git\asioTest\asioTest\asioTest.obj    asioTest&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt; 대충 해석해보면, boost::system::system_category 를 찾을 수 없다는건데, 강제적으로 라이브러리 파일 링크를 걸어봐도 안되고, 도통 알 수가 없었다. 그러다가 asio 를 사용 중인 지인의 도움을 받아서 이리저리 비교해보다가 그 분도 링크 에러가 난 적이 있다면서, Win32 build 에서는 같은 에러가 나는 것을 보게 되었다...&lt;/p&gt;

&lt;p&gt; 그랬다. 나는 요즘 계속 x64 프로그래밍만 하고 있어서 무의식적으로 x64 로 프로젝트를 설정했는데, boost 라이브러리는 win32 로 빌드가 기본이었다.&lt;/p&gt;

&lt;p&gt; b2 address-model=64 로 빌드를 다시 하니 링크 오류 해결~!! &lt;/p&gt;

&lt;p&gt;ps: 왜 boost 라이브러리에는 x86 이니 x64 같은게 lib 파일이름에 없을까라며 괜히 욕해본다;;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/418</guid>
      <pubDate>Thu, 08 Jan 2015 16:18:17 GMT</pubDate>
    </item>
    <item>
      <title>Google Inbox 에 대한 생각</title>
      <link>http://blog.wimy.com/417</link>
      <description>&lt;p&gt;난 스마트폰을 자주 쓴다. 버스를 타고 갈 때도, 자기 전에도, 컴퓨터 앞에서도 종종 쓴다. 그리고 트위터도 한다(주로 읽기만 하지만), 페이스북도 한다. 하지만 이런 것들은 짧은 시간동안 하는 것들이다. 예를 들어, 트위터에서 꽤 괜찮은 글을 발견했다. 하지만 난 버스에서 내려야 한다. 그러면 난 SendMe 를 이용해서 해당 링크를 나의 지메일로 보내놓고, 시간이 될 때, 스마트폰의 메일함이나, 데스크탑의 메일함에서 해당 메일을 열어서 천천히 해당 글을 읽어본다.&lt;/p&gt;

&lt;p&gt; SendMe - (&lt;a href="https://play.google.com/store/apps/details?id=com.wimy.android.sendme" class="uri" class="tx-link"&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.wimy.android.sendme"&gt;https://play.google.com/store/apps/details?id=com.wimy.android.sendme&lt;/a&gt;&lt;/a&gt;) 는 한창 안드로이드를 공부할 때 취미로 만들어본 프로그램인데, 안드로이드의 '공유' 를 눌렀을 때 항상 내 메일주소로 해당 내용을 공유하는 간단한 프로그램이다. 쉽게 얘기하자면 지메일을 띄우고, 내 메일 주소, 제목, 본문을 자동으로 넣어주는 셈이다. 안드로이드 앱의 많은 앱들이 '공유' 기능을 지원하기 때문에 많은 앱들의 내용을 나에게 메일로 쉽게 내용을 보낼 수 있다.&lt;/p&gt;

&lt;p&gt; 여튼 나는 이렇게 스마트폰을 활용하고 있었는데, 구글에서 Inbox 라는 것을 발표했다. 발표한지는 조금 되었는데 구글에 관심이 많은 나도 '이메일이 얼마나 다르겠어' 라면서 신경을 안 쓰고 있다가, 얼마전에 우연히 'inbox 는 지메일을 todo 처럼 관리한다' 는 문구를 보고 급히 초대 신청을 해서 써보게 되었다. 그래서 관련 글들도 조금 살펴봤는데, 구글에서는 많은 사람들이 지메일을 할일목록처럼 사용한다는 사실을 알게되었고 그래서 inbox 가 나왔다고 한다. 사실 나도 SendMe 를 통해서 지메일을 마치 할일목록처럼 사용하고 있었기 때문에, 많은 사람들이 나처럼 지메일을 사용하는구나 싶었다. &lt;span style="font-size: 9pt; line-height: 1.5;"&gt;사실 개인적인 이메일보다, 회사에서의 이메일 사용패턴을 생각해보면, 이메일은 정말 '할일목록' 이라는 생각이 많이 든다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt; Inbox 를 잠깐 써본 소감은 간단히 얘기하자면 '지메일의 용어를 바꾸고, 알림을 추가했다' 정도이다. 기본 메일 목록을 할일 목록으로 생각하고, 보관함은 처리가 끝난 일로 생각한다. 이 방법은 사실 지메일을 할일목록처럼 쓰던 많은 사람들이 머릿속으로 생각하고 있던 방식일 것이다. 그리고 여기에 할일목록 앱의 기본 기능 중 하나인 알람을 넣었다.&lt;/p&gt;

&lt;p&gt; 사람들의 사용 패턴을 분석하고, 그에 기반하여 새로운 관점을 만들어내었다. 이런 형태로 얼마나 많은 사람들이 사용할지는 모르겠지만 나에게는 정말 맞춤앱이라는 생각까지 든다. 구글에서 앞으로 내놓을 새로운 관점들도 기대한다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/417</guid>
      <pubDate>Sun, 14 Dec 2014 04:22:49 GMT</pubDate>
    </item>
    <item>
      <title>Code Complete 를 읽고...</title>
      <link>http://blog.wimy.com/416</link>
      <description>&lt;p&gt;&lt;a href="http://www.aladin.co.kr/shop/wproduct.aspx?ISBN=8956742561" class="tx-link"&gt;Code Complete 2nd&lt;/a&gt; 를 드디어 다 읽은 기념 포스팅.&lt;/p&gt;

&lt;p&gt;회사 동료들의 추천으로 읽게 되었는데, 정말 유명한 책이다. 구현에 집중한 책이라는데 정말 나에게 많은 깨우침을 줬다. 사실 나는 내 스스로를, 우리 팀장님이 사파라고 부르는, 경험에 의존하는 프로그래머의 성격이 강하다고 생각하는데, 나에게 좀더 탄탄한 정파의 무공을 가르쳐주는 책이 아닌가 싶다. 스스로는 경험과 이론이 합쳐져야 제대로 힘을 내지라고 생각하면서도 이론보다는 경험에만 치우친 프로그래밍을 하고 있었다는 반성을 할 수 있었다.&lt;/p&gt;

&lt;p&gt; 항상 머릿속에서는 '왜 그런지는 모르지만, 뭔가 이상한데...' 라고 생각하던 부분들을 '이래서 뭔가 이상했었군!!!' 이라는 생각을 많이 할 수 있었다. 역시 책을 많이 읽어야 한다는 생각을 다시 일깨워주고, 두 아이의 육아에 지쳤어도 작은 시간을 내어서 하루에 한번씩은 책을 보는 습관을 들여준 책이기도 하다. 꽤 두꺼워서 다 읽고 말겠다는 오기가 생겨서 이기도 하지만, 어쨌든 6개월이 걸려서 다 읽었다 ㅠㅜ&lt;/p&gt;

&lt;p&gt;&lt;span style="font-size: 9pt; line-height: 1.5;"&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-size: 9pt; line-height: 1.5;"&gt; 누군가 나에게 묻는다면, 꼭 읽어보라고 권하고 싶은 책이다.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-size: 9pt; line-height: 1.5;"&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-size: 9pt; line-height: 1.5;"&gt; 책을 읽으면서 나름 와닿은 구문은 &lt;a href="https://docs.google.com/document/d/17IDtU7xXY94gTW_bB7mezWVWKGf4qvSLvqKLM68DH3I/edit?usp=sharing" class="tx-link"&gt;[여기]&lt;/a&gt;에 정리해뒀다. 한번씩 다시 읽어보야지~!&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-size: 9pt; line-height: 1.5;"&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/416</guid>
      <pubDate>Sat, 06 Dec 2014 14:40:46 GMT</pubDate>
    </item>
    <item>
      <title>습관은 무거운 돌을 굴리는 것과 같다</title>
      <link>http://blog.wimy.com/415</link>
      <description>&lt;p&gt; 책 읽는 습관을 들이기 위해서 노력하고 있다. 그런데 생각보다 쉽지 않다. 아니, 쉽지 않았다. 책을 읽으려고 하면 어찌나 방해하는 게 많은지... 책을 읽다가 중요한 것들을 메모하려고 컴퓨터를 켜면, 게임이 나를 유혹하고, 스마트폰에 메모하려고 해도 SNS 아이콘에 손이 간다. 그리고 책을 조금 읽어도 눈도 아프고, 잠도 온다.&lt;/p&gt;

&lt;p&gt; 그런데 재미있는 것은 일단 습관이 몸에 배이기 시작하면 이런 것들은 모두 사라진다. 책을 잡으면 1페이지도 읽기 힘들던 내 눈이 이제는 10페이지를 읽어도 아프지 않다. 처음에는 하루에 한 단락만 읽어야지 했던 것이 이제는 두 단락을 읽어도 할만하다.&lt;/p&gt;

&lt;p&gt; 습관은 무거운 돌을 굴리는 것과 같다. 처음에는 무거운 돌을 조금 움직이기도 힘에 버거워서 낑낑되는 데, 한번 굴러가기 시작하면, 하루 이틀은 돌을 굴리지 않아도 계속 쉽게 굴러가고 있다.&lt;/p&gt;

&lt;p&gt;&lt;span style="font-size: 9pt; line-height: 1.5;"&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style="font-size: 9pt; line-height: 1.5;"&gt; 처음에는 힘들더라도, 조금 움직이는데 왜 이렇게 힘들지라는 생각이 들더라도, 일단 굴리기 시작하자. 몇번만 힘을 주어 굴리면, 어느새 굴러가는 돌 위에 올라탄 자기 자신을 발견하게 될 것이다. &lt;/span&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/415</guid>
      <pubDate>Sat, 18 Oct 2014 14:30:17 GMT</pubDate>
    </item>
    <item>
      <title>Google Cloud Storage 를 백업으로 사용하기</title>
      <link>http://blog.wimy.com/414</link>
      <description>&lt;p&gt;구글에서 클라우드(&lt;a href="https://cloud.google.com"&gt;https://cloud.google.com&lt;/a&gt;)라는 이름으로 여러 서비스들을 하고 있다. 대표적으로 Google App Engine, Compute Engine, Big Query 등이 있는데, 이 중에 Google Storage 라는 게 있다. AWS 의 S3 에 해당하는, 클라우드 파일 저장 공간쯤되는데, 어느날 구글에서 준 100만원쯤이었나 여튼 큰 쿠폰이 있어서 써보기 시작했었다.&lt;/p&gt;

&lt;p&gt; 이런 저런 정리를 해보니 내 컴퓨터에서 가장 소중하다고 할만한 것들을 추려보니, 사진과 소스 코드가 남았고, 이들을 정리해서 올려보기로 했다. 대략 용량은 300기가 정도. 모두 올리고 요금을 보니 한달에 약 1만원쯤 나온다. 우리 집에 불이나도 나의 15년 간의 내용이 안전하게 보관된다고 생각하면 크게 나쁘지 않은 요금이라는 생각이었다.&lt;/p&gt;

&lt;p&gt; 구글의 막강한 클라우드 환경을 사용하고, 최근에는 일본에 IDC 가 생겼기 때문에 속도도 나쁘지 않았다. 그리고 Google App Engine 을 꽤 오래 사용했기 때문에 안정성이나 확장성은 믿을 수 있었다.&lt;/p&gt;

&lt;p&gt; 그런데 막상 쓰기 시작하니 이런저런 문제가 발견되었다.&lt;/p&gt;

&lt;p&gt; 첫번째로 한글 사용에 문제가 있다. 정확하게는 파일 복사, 즉 업로드를 하는 gsutil 이라는 프로그램에서 윈도우에서(!) 한글 파일을 제대로 업로드하지 못하는 문제가 있다. 파이썬으로 만들어진 프로그램이라서 대충 패치를 해서 쓰고 있긴 하다(대충 우회만 하는 패치라서 구글에 보내봤더니 rejected ㅠㅜ).&lt;/p&gt;

&lt;p&gt; 두번째도 gsutil 에 관한 것인데, 백업에 맞게(!), 편리하게(!) rsync 라는 명령이 제공된다. 특정 폴더를 클라우드의 특정 폴더에 말그대로 sync 해주는 기능인데, 이게 제대로 동작하지 않는다... rsync -n 으로 복사가 필요한 목록을 뽑은 다음에 rsync 를 실행시켜서 sync 가 되었겠지 했는데, 다시 rsync -n 으로 확인해보면 여전히 복사가 필요하다고 한다... 한글 때문일까...;; 이건 자세히 살펴보지는 않았음&lt;/p&gt;

&lt;p&gt; 세번째로 웹 기반 회사인 구글이다보니 &lt;a href="https://console.developers.google.com"&gt;https://console.developers.google.com&lt;/a&gt; 에서 웹으로 파일들을 관리할 수 있게 해준다. 그런데 이 웹이 구글의 이름에 걸맞지 않게 버그가 많다. 종종 화면이 멈춰버리고, 파일들을 삭제했는데 응답도 없고, 화면에 삭제한 파일들이 남아있어서 다른 페이지에 갔다가 와야 반영되기도 한다.&lt;/p&gt;

&lt;p&gt; 결론은, Google Cloud Storage 는 윈도우에서 한글에 대한 배려가 부족하고, 웹콘솔은 아직 베타의 느낌이 남아있다. 그러니 이를 이용한 서비스를 개발할 때 이런 내용들을 고려해야 할 것 같다. 아마 구글에서도 인식하고 있으니 조만간 고쳐질 것 같긴한데, 서비스할 때는 한번쯤 체크~&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/414</guid>
      <pubDate>Wed, 15 Oct 2014 15:58:44 GMT</pubDate>
    </item>
    <item>
      <title>프로그래머의 실력에 대한 짧은 생각...</title>
      <link>http://blog.wimy.com/413</link>
      <description>&lt;p&gt;프로그래머의 실력에 대해서 고민해본 적이 있다. 누구나 저 사람이 나보다 실력이 있다라는 걸 느낌으로는 알고 있다. 하지만 왜? 라고 질문해본다면, 어떤점을 보면 저사람이 나보다 살력 있음을 알 수 있을까...&lt;br /&gt;
최근 회사 생활을 하면서 이런 생각을 했다. 나는 왜 이렇게 우유부단할까...... 어떤 결정을 내려야할 때 A는 이런 장단점이 있고 B는 이런 장단점이 있다. 모든 일에는 각각의 장단점이 있다는걸 안다. 하지만 결정을 내리기가 힘들다. 이 때 실력자는 A를 선택하라고 한다. 이런저런 이유를 들어서 이 장점이 단점을 상쇄한다. 확고한 기준이 있다. 그렇다고 항상 A가 맞다고 주장하지도 않는다. 유연하면서도 확실히 알고 있다는 느낌.&lt;br /&gt;
요즘 책을 읽다보면, 아... 내가 왠지 찜찜하게 느꼈던게 이거구나라는 생각을 한번씩 한다. 누군가는 나의 그 느낌을 잘 정리해서 객관화시킨 후 하나의 단어로 압축시켜놓았고 실력자들은 그 단어를 사용한다. 경험을 실력으로 바꾸려면 독서가 필요하다.&lt;br /&gt;
결론은 책을 읽자...... ㅋ&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/413</guid>
      <pubDate>Sat, 23 Aug 2014 07:21:15 GMT</pubDate>
    </item>
    <item>
      <title>이사 후기</title>
      <link>http://blog.wimy.com/412</link>
      <description>&lt;p&gt;이사일번지, 영구클린, Z이사 중 이사일번지로 골랐다. 친절한 상담원과 방문견적과 괜찮은 가격이 원인이었다.&lt;br /&gt;
영구클린은 이사전문이 아니라 청소전문인거 같은 느낌과 좀 비싼가격. 그리고 Z이사는 작은 업체라서 그런지 다음날 전화주겠다며 전화도 안주고... 기다리다가 그냥 이사일번지로 결정 ㅋ&lt;/p&gt;

&lt;p&gt;사람과 대면하는 직업은 정말 친절도가 절반이상은 먹고 들어가는듯. 그러고보니 얼마전에 에어콘을 살 때도 하이마트의 직원과 엘지베스트샵의 친절도 차이가 생각난다. 엘지베스트샵 직원분의 친절은 지금 생각해도 흐뭇할 정도. 뭐가 어떻게 다른지, 이 모델을 왜 권하는지 친절히 설명해주고, 질문도 당연히 잘 대답해주고. 하이마트는 일단 멀뚱멀뚱서있고 그냥 이 모델 사시면 돱니다라고.... 그리고 나올 때 가관인 한마디. 다른데 알아보시고 오시면 더 할인해드릴께요~ 저런말을 하는 직원에게서 물건을 사고 싶지는 않다.&lt;/p&gt;

&lt;p&gt; 인테리어 업체는 동네 인테리어 업체를 골랐는데, 나중에 AS 가 쉬울 거라는 생각이었다. 그런데 조금 아쉬운데, 부동산에서 권해주는 업체에게 맡겼는데, 나중에 동네 가게에서 들은 얘기로는 해당 부동산과 인테리어 업체는 서로 연결되어 있다는 것. 그리고 그 옆의 인테리어 업체가 작지만 더 잘한다는 얘기... 부동산에서 권해주는 인테리어 업체는 동네 가게에서 평판을 슬쩍 물어보자.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/412</guid>
      <pubDate>Sat, 09 Aug 2014 09:27:15 GMT</pubDate>
    </item>
  </channel>
</rss>