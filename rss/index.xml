<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>blog.wimy.com</title>
    <link>http://blog.wimy.com/</link>
    <description>zelon의 프로그래밍과 일상</description>
    <pubDate>Sun, 19 Jan 2025 03:34:26 GMT</pubDate>
    <generator>wimyblog</generator>
    <item>
      <title>마루 부리 글꼴 소개 - Maru buri font</title>
      <link>http://blog.wimy.com/479</link>
      <description>&lt;p&gt;전자책으로 책을 보기 시작하면서 왠지 기본 글꼴들이 마음에 들지 않아서 글꼴을 조금 찾아봤다. 평소에 코딩할 때도 네이버의 D2Coding 글꼴을 주로 사용하기 때문에 네이버의 글꼴 모음(&lt;a href="https://hangeul.naver.com/font"&gt;https://hangeul.naver.com/font&lt;/a&gt;)에서 나온 마루부리 글꼴(&lt;a href="https://hangeul.naver.com/maruproject_11"&gt;https://hangeul.naver.com/maruproject_11&lt;/a&gt;)이 제법 마음에 들어서 모든 전자책 앱에서 '마루 부리 글꼴'을 사용하게 되었다. 특히 마루 부리 글꼴 중에서도 semi-bold 의 굵기가 전자책을 읽기에 가장 괜찮은 것 같다&lt;/p&gt;

&lt;p&gt;간단히 소개하자면, "화면에서 고딕체로 편중된 글꼴 환경을 넘어 콘텐츠를 폭넓게 담을 수 있는 디지털 한글의 원형을 제시하는 글꼴" 이라고 한다. 보통 컴퓨터에서는 sans-serif 라고 하는 '획의 삐침(serif)'이 없는 글꼴(D2Coding, 돋움체등)을 주로 쓴다. 반대로 serif 라고 하면 대표적으로 '궁서체'가 있는데, 초창기 윈도우에서는 한글 글꼴의 다양성을 주는 고마운 존재였다. 아래의 스크린샷을 보면 그 차이를 쉽게 알 수 있다&lt;/p&gt;

&lt;p&gt;&lt;img src="maruburi_sample.png" alt="maruburi_sample.png" /&gt;&lt;/p&gt;

&lt;p&gt;참고로 OTF/TTF 가 있는데 OTF가 좀 더 발전된 형태의 파일이다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;글꼴 테스트 사이트: &lt;a href="https://hangeul.naver.com/fonts/search?f=maru"&gt;https://hangeul.naver.com/fonts/search?f=maru&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;글꼴 다운로드 사이트: &lt;a href="https://hangeul.naver.com/font"&gt;https://hangeul.naver.com/font&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;blog 에서 직접 다운로드: &lt;a href="maruburi_font.zip"&gt;maruburi_font&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;사실 이 포스팅을 하는 이유가 너무 마음에 드는 마루 부리 글꼴 소개도 있지만, 공식 사이트를 통해서는 모바일/전자책에서 글꼴 다운로드가 쉽지 않아서도 있다 :)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/479</guid>
      <pubDate>Thu, 02 Jan 2025 15:39:00 GMT</pubDate>
    </item>
    <item>
      <title>2024년 결산</title>
      <link>http://blog.wimy.com/478</link>
      <description>&lt;p&gt;2024년의 결산&lt;/p&gt;

&lt;h1&gt;Throne and Liberty Global Launching&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;드디어 진짜 기다려온, TL의 글로벌 런칭. 그리고 마무리를 위한 미국 출장(샌디에고). 12년 만에 외국 출장&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;책&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;부자 아빠 가난한 아빠&lt;/li&gt;
&lt;li&gt;불편한 편의점&lt;/li&gt;
&lt;li&gt;채식주의자: 노벨문학상을 받았다길래 읽어보고 좋으면 아이들에게 추천하려고 했었지만, 읽어보니 아이들이 한참 큰 다음에 얘기해야할 듯;;&lt;/li&gt;
&lt;li&gt;선재업고 튀어 대본집&lt;/li&gt;
&lt;li&gt;&lt;p&gt;누가 내 치즈를 옮겼을까: 분명 2번은 읽었던 거 같은데 기억이 나지 않아서, 밀리의 서재에 있길래 다시 읽어봄&lt;/p&gt;

&lt;h1&gt;밀리의 서재&lt;/h1&gt;

&lt;p&gt;알뜰폰 요금제를 뒤져보다가 '밀리의 서재'를 요금제에 묶어파는 게 있어서 사용하기 시작했는데 생각보다 많은 책들이 있었고, 앱도 제법 괜찮아서 계속 사용하게 됨. 채식주의자나 내가 원하는 만화책은 없었지만, 제법 유명한 책들이 많아서 나의 독서에 많은 도움이 되고 있음&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;영화 &amp;amp; 드라마&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;플래시: 정말 재밌게 봤다. 그런데 시즌이 이렇게 많은지 모르고 보기 시작했다가... 지쳐서 쉬는 중.&lt;/li&gt;
&lt;li&gt;킬빌&lt;/li&gt;
&lt;li&gt;럭키&lt;/li&gt;
&lt;li&gt;데드풀과 울버린&lt;/li&gt;
&lt;li&gt;선재업고 튀어: 올 해의 드라마라고 칭송이 자자하고 아내와 딸이 너무 좋아해서 보게 됨. 나도 정말 재미있었음. 그래서 대본집도 밀리의 서재에 있길래 거의 완독함&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;게임&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;쓰론 앤 리버티: 개발하고 있으니 당연히 제법함. 열심히 하다가 바빠서...&lt;/li&gt;
&lt;li&gt;철권8: 버추어파이터 만큼은 아니지만 그래도 폴로 꽤 열심히 했었음&lt;/li&gt;
&lt;li&gt;클래시 로얄: 깔았다가 열심히 하다가 지웠다가 반복...&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;원피스&lt;/h1&gt;

&lt;p&gt;원나블(원피스/나루토/블리츠)가 꼭 봐야하는 만화라는 얘기를 듣고, 나루토는 다 봤으니 원피스를 정주행했다. 알라딘 전자책으로 한권한권씩 틈틈히 봤다. 특히 새로운 섬으로 갈 때마다의 새로운 모험 배경 설정은 정말 잘 만들었고, 주인공의 레벨업과 미리 던진 떡밥을 연결하는 것도 정말 잘 구성되어 있는 것 같다&lt;/p&gt;

&lt;h1&gt;말해보카&lt;/h1&gt;

&lt;p&gt;매일매일 분량을 다 하지는 못했지만 출석이라도 꼭 하자면서 '말해보카(앱)' 을 결재했다. 332일간 출석했고, 연속 출석은 252일간 했다. 중간에 출장 다녀오면서 시차 때문에 계산상으로 하루가 미출석이 되어서 얼마나 억울하던지 ㅠㅜ 그래도 2985분 공부했고, 7342개의 문제를 풀었으니 나름 영어공부를 한 것 같다&lt;/p&gt;

&lt;h1&gt;자전거&lt;/h1&gt;

&lt;p&gt;종종 자전거로 출퇴근을 하고 있었는데 회사분들과 몇 시간씩 자전거를 타봤다. 너무너무 힘들었지만 즐거운 추억!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;서울 투어&lt;/li&gt;
&lt;li&gt;출퇴근&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;가족&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;아버지 장례&lt;/li&gt;
&lt;li&gt;어머니 칠순&lt;/li&gt;
&lt;li&gt;어머니 병원&lt;/li&gt;
&lt;li&gt;장모님 칠순 제주도 가족여행&lt;/li&gt;
&lt;li&gt;나윤이 초등학교 졸업 및 중학교 입학&lt;/li&gt;
&lt;li&gt;갤럭시S24 울트라 구입: 7년만에 드디어 휴대폰 교체함&lt;/li&gt;
&lt;li&gt;건후 반 축구 우승: 폭우가 오던 날 결승전에서 극적으로 이겨서 드디어 우승!!&lt;/li&gt;
&lt;li&gt;건후 대표팀 축구 우승: 2년동안 못하던 우승을 3번이나!!&lt;/li&gt;
&lt;li&gt;나윤이 벙커 침대와 함께 방 독립&lt;/li&gt;
&lt;li&gt;나윤이와 둘이서 서울 구경&lt;/li&gt;
&lt;li&gt;손흥민 직관: 갑자기 들어온 소식에 직관하러 가서 진짜 봄&lt;/li&gt;
&lt;li&gt;수빈이네와 아마존 아쿠아파크 당진&lt;/li&gt;
&lt;li&gt;탁구장&lt;/li&gt;
&lt;li&gt;&lt;p&gt;나윤이 한국무용 공연: 오랜만에 나윤이의 공연!&lt;/p&gt;

&lt;p&gt;2024년은 처음과 끝이 힘들어서 매우 힘든 한 해였다고 생각했는데, 돌아보니 생각보다 즐거운 일도 많았고 새로운 경험들도 많았다. 2025년에는 즐겁고 좋은 일들이 가득하길 소원해본다&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/478</guid>
      <pubDate>Thu, 02 Jan 2025 15:03:00 GMT</pubDate>
    </item>
    <item>
      <title>MSSQL 2022 windows docker image 만들기. Making MSSQL 2022 windows docker image</title>
      <link>http://blog.wimy.com/477</link>
      <description>&lt;p&gt;MSSQL 2019부터는 Microsoft 에서 공식적으로 리눅스 컨테이너에서의 MSSQL 을 지원하게 되면서 간단하게 mssql을 컨테이너에서 실행할 수 있게 되었다. 하지만 오히려 윈도우 컨테이너용 MSSQL을 공식적으로 지원하지 않게 되어버렸다.&lt;/p&gt;

&lt;p&gt;윈도우용 서버 프로그램을 개발하는 입장에서는 윈도우용 컨테이너와 리눅스용 컨테이너를 혼용해서 사용해야하는 상황이 되어버려서 좀 찾아보니, 윈도우용 컨테이너에서 MSSQL을 실행하는 방법들이 있었다&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/microsoft/mssql-docker/tree/master/windows/mssql-server-windows-developer"&gt;https://github.com/microsoft/mssql-docker/tree/master/windows/mssql-server-windows-developer&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;위의 주소에 가보면, MSSQL 2019 버전을 윈도우 컨테이너로 만드는 방법이 있는데, MSSQL 2022 버전으로 만들어 보았다.&lt;/p&gt;

&lt;p&gt;github url: &lt;a href="https://github.com/zelon/DockerUtil/tree/main/MSSQLWindowsServer"&gt;https://github.com/zelon/DockerUtil/tree/main/MSSQLWindowsServer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;docker build 에 필요한 SQLServer2022-DEV-x64-ENU.box, SQLServer2022-DEV-x64-ENU.exe 파일은 &lt;a href="https://www.microsoft.com/en-us/sql-server/sql-server-downloads"&gt;https://www.microsoft.com/en-us/sql-server/sql-server-downloads&lt;/a&gt; 에서 다운 받은 후 실행하면 '미디어 다운로드' 를 하면 받을 수 있다&lt;/p&gt;

&lt;p&gt;Dockerfile 의 내용에 따라서&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t mssql-win-zelon .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위와 같이 빌드를 하고&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 1433:1433 -v C:/temp/:C:/temp/ -e sa_password=Abcd!234 -e ACCEPT_EULA=Y mssql-win-zelon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위와 같이 실행을 하면 된다. 다만 sa_password 에는 원하는 암호로 변경하면 되는데 충분히 복잡한 암호를 사용해야 한다. 그렇지 않으면 sa 암호 설정이 되지 않는다&lt;/p&gt;

&lt;p&gt;이렇게 만들어진 이미지는 아래의 hub.docker.com 에 공유되어 있다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MSSQL2022 on WindowsServer2019: &lt;a href="https://hub.docker.com/repository/docker/zelonion/mssql2022-winsvr2019"&gt;https://hub.docker.com/repository/docker/zelonion/mssql2022-winsvr2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MSSQL2022 on WindowsServer2025: &lt;a href="https://hub.docker.com/repository/docker/zelonion/mssql2022-winsvr2025"&gt;https://hub.docker.com/repository/docker/zelonion/mssql2022-winsvr2025&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;참고 Link:&lt;br /&gt;
 * setup.exe 인자들 설명: &lt;a href="https://learn.microsoft.com/en-us/sql/database-engine/install-windows/install-sql-server-from-the-command-prompt?view=sql-server-ver15"&gt;https://learn.microsoft.com/en-us/sql/database-engine/install-windows/install-sql-server-from-the-command-prompt?view=sql-server-ver15&lt;/a&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/477</guid>
      <pubDate>Wed, 01 Jan 2025 12:28:00 GMT</pubDate>
    </item>
    <item>
      <title>Windows Server 에서 winget 설치하기. Installing winget on Windows Server</title>
      <link>http://blog.wimy.com/476</link>
      <description>&lt;p&gt;윈도우 10 1709 이상의 버전에서는 기본적으로 winget 이라는 명령을 사용하여 각종 프로그램을 설치할 수 있다(&lt;a href="http://blog.wimysoft.com/471/"&gt;http://blog.wimysoft.com/471/&lt;/a&gt;). 하지만 윈도우 서버(Windows Server)에서는 기본적으로 설치가 되어 있지 않은데, 공식 사이트의 샌드박스에서의 설치 방법(&lt;a href="https://learn.microsoft.com/ko-kr/windows/package-manager/winget/"&gt;https://learn.microsoft.com/ko-kr/windows/package-manager/winget/&lt;/a&gt;)과 github 의 comment(&lt;a href="https://github.com/microsoft/winget-cli/issues/700#issuecomment-825918522"&gt;https://github.com/microsoft/winget-cli/issues/700#issuecomment-825918522&lt;/a&gt;)를 참고하면 아래와 같이 설치하면 된다&lt;/p&gt;

&lt;p&gt;먼저 아래와 같이 powershell 권한을 상승시켜준다&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PS&amp;gt; Set-ExecutionPolicy RemoteSigned
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;그 후 아래의 스크립트를 실행하면 된다&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$progressPreference = 'silentlyContinue'
Write-Host "Installing Microsoft.UI.Xaml v2.7.3..."
$latestUIXamlAppxUri = "https://github.com/microsoft/microsoft-ui-xaml/releases/download/v2.7.3/Microsoft.UI.Xaml.2.7.x64.appx"
$latestUIXamlAppxOutFileName = $latestUIXamlAppxUri.Split("/")[-1]
Invoke-WebRequest -Uri $latestUIXamlAppxUri -OutFile "./$latestUIXamlAppxOutFileName"
Add-AppxPackage "./$latestUIXamlAppxOutFileName"
Write-Host "Installing Microsoft.VCLibs.x64.14.00..."
Invoke-WebRequest -Uri https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx -OutFile Microsoft.VCLibs.x64.14.00.Desktop.appx
Add-AppxPackage Microsoft.VCLibs.x64.14.00.Desktop.appx
Write-Host "Download WinGet:latest License..."
$latestWingetLicenseUri = $(Invoke-RestMethod https://api.github.com/repos/microsoft/winget-cli/releases/latest).assets.browser_download_url | Where-Object {$_.EndsWith("_License1.xml")}
$latestWingetLicenseOutfileName = $latestWingetLicenseUri.Split("/")[-1]
Invoke-WebRequest -Uri $latestWingetLicenseUri -OutFile "./$latestWingetLicenseOutfileName"
Write-Host "Installing WinGet:latest..."
$latestWingetMsixBundleUri = $(Invoke-RestMethod https://api.github.com/repos/microsoft/winget-cli/releases/latest).assets.browser_download_url | Where-Object {$_.EndsWith(".msixbundle")}
$latestWingetMsixBundleOutfileName = $latestWingetMsixBundleUri.Split("/")[-1]
Invoke-WebRequest -Uri $latestWingetMsixBundleUri -OutFile "./$latestWingetMsixBundleOutfileName"
Add-AppxProvisionedPackage -Online -PackagePath "./$latestWingetMsixBundleOutfileName" -LicensePath "./$latestWingetLicenseOutfileName" -Verbose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;설치되고 나면 해당 폴더에 다운로드 받은 파일들은 삭제하자.&lt;/p&gt;

&lt;p&gt;위의 스크립트의 내용을 살펴보면, 공식 사이트(&lt;a href="https://learn.microsoft.com/ko-kr/windows/package-manager/winget/"&gt;https://learn.microsoft.com/ko-kr/windows/package-manager/winget/&lt;/a&gt;)의 방법대로 하면 windows server 에서는 Microsoft.UI.Xaml 이 없어서 설치가 실패한다. 그래서 Microsoft.UI.Xaml 을 설치해준다. 최신 버전은 오히려 winget 설치가 안되어서 2.7버전을 지정해서 설치한다. 그리고 그냥 winget 을 설치하면 License 가 없다고 오류가 나기 때문에 License 파일도 받아서, Add-AppxProvisionedPackage 명령으로 설치해준다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/476</guid>
      <pubDate>Sun, 30 Jul 2023 14:40:00 GMT</pubDate>
    </item>
    <item>
      <title>wimy.com 에서 wimysoft.com 으로 이사합니다</title>
      <link>http://blog.wimy.com/475</link>
      <description>&lt;p&gt;2003년부터 사용했던 wimy.com 에서 wimysoft.com 으로 이사합니다. 블로그도, 다른 사이트들도 wimy.com 에서 wimysoft.com 으로 이사합니다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/475</guid>
      <pubDate>Sun, 30 Jul 2023 14:00:00 GMT</pubDate>
    </item>
    <item>
      <title>2023년 6월 런던 여행</title>
      <link>http://blog.wimy.com/474</link>
      <description>&lt;p&gt;6월말부터 7월초까지 10일간 영국 런던 여행에 대한 정리. 런던 여행을 계획하는 분들, 특히 가족 여행을 위한 최신 정보가 되었으면 좋겠다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4인 가족, 아빠/엄마/딸/아들&lt;/li&gt;
&lt;li&gt;자유여행. 호텔, 항공 모두 인터파크에서 직접 예약&lt;/li&gt;
&lt;li&gt;&lt;p&gt;렌트카 안함. 지하철, 버스, 기차 타고 여행&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2023년 7월 기준 영국 입국시에 코로나19 입국제한 조치는 전면 해제되었다. 그래서 입국 시에 백신 접종서 같은 것을 가지고 가야하나, 백신을 맞아야 하나 걱정할 필요가 없다. 여기에 대해 여기저기 검색해보면 다 괜찮다고 말은 하는데 괜히 가족 여행을 망치면 안되어서 제일 믿음이 가는 곳을 찾아내었다. 주영국 대한민국 대사관의 공지내용 - 영국정부 코로나19 입국제한 조치 전면 해제 안내(&lt;a href="https://overseas.mofa.go.kr/gb-ko/brd/m_25447/view.do?seq=1345083&amp;amp;page=5"&gt;https://overseas.mofa.go.kr/gb-ko/brd/m_25447/view.do?seq=1345083&amp;amp;page=5&lt;/a&gt;)이다.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;영국은 유로가 아닌 파운드를 사용한다(GBP)&lt;/li&gt;
&lt;li&gt;영국 여행 책은 실물로 하나쯤 구입해두면 좋다. 특히 코로나 이전 정보가 있는 책들이 많으니, 항상 최신판인지 확인하고 구입하자. 나는 저스트고/프렌즈가 순위가 높아서 둘다 구입해보았는데 여행정보는 저스트고가 조금 더 낫고, 런던에 대한 읽을거리는 프렌즈에 좀 더 점수를 주고 싶다&lt;/li&gt;
&lt;li&gt;아시아나 비행기를 탔는데, 생각보다 비행기에서 제공하는 영화/예능 등이 꽤 종류가 많아서 시간을 보낼만 했다&lt;/li&gt;
&lt;li&gt;아시아나 항공에서 키즈밀(kids-meal, child-meal)로 검색해보면 탑승 24시간 전에 주문하면 어린이용 기내식을 제공해준다. 아이마다 호불호가 있을 수 있으나, 받아보고 아이가 싫어하면 엄마나 아빠의 식사를 바꿔주면 되니 아이가 있다면 주문해두자&lt;/li&gt;
&lt;li&gt;비행기표 구입 후 비행기 좌석 위치를 미리 지정할 수 있다. 구입한 곳의 메뉴, 항공사 홈페이지의 메뉴를 잘 찾아보자. 아이들이 해외여행이 처음이라면 창가에 미리 지정하면 당연히 좋아한다&lt;/li&gt;
&lt;li&gt;USB-A 로 꽂을 수 있는 휴대폰 케이블을 하나씩 챙겨가면 좋다. 공항 버스, 비행기, 기차 안에서도 이 단자가 있는 곳이 많아서 짬짬이 충전하기 좋다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="usb-a.png" alt="usb-a.png" /&gt;&lt;br /&gt;
 * 영국 영어가 미국 영어와 다르다고 여행책에 여러개의 단어가 소개되는데 한번쯤 읽고 가면 좋다. 참고로 책에는 elevator -&gt; lift 라고 적혀있지만 외국인을 배려해서 인지 elevator 도 종종 있다&lt;br /&gt;
 * 식당에서 아이와 함께 식사를 할 때 제일 많이 필요한 영어는 table for four?(4명용 테이블인가요?), side plates?(앞접시 드릴까요?)&lt;br /&gt;
 * 팁 문화는 대부분의 경우(호텔 레스토랑 포함) 달라는 곳이 없었고, 영수증에 service charge 등으로 포함되어 있다고 보면 된다. 10일 중 딱 1군데 식당(wagamama)에서 카드 결제할 때 팁을 입력해달라고 했다. 안 줘도 된다고 하지만 10% 정도 팁을 주었다&lt;br /&gt;
 * 아이랑 여행하는데 힘든 게 화장실이다. 책에서도 설명이 잘 되어 있는데, 한국에는 대부분의 공용 화장실이 무료이지만, 런던에는 무료 화장실이 없는 곳들이 많으므로(심지어 공원 화장실도 유료인 곳도 종종 있다), 음식점에서 나갈 때는 아이들의 화장실을 잘 챙기자. 참고로 지하철 화장실은 어린 아이가 싫어할 정도로 위생상태가 안 좋은 곳도 있다. 화장실 입장료가 0.5파운드, 0.2파운드도 있고, 동전만 받는 곳(잔돈은 안 준다), 카드로만 받는 곳도 있다. 참고로 지하철이 아닌 기차(train)는 중간에 화장실이 있다. 대형 시설에서는 대부분 무료인데, 화장실 줄이 길다면 다른 코너의 화장실을 찾아보자. 이번 여행에는 대영박물관의 모든 화장실이 붐볐는데, 그 중 피자리아 화장실은 늘 한산했다. 여튼 아이들 화장실은 잘 챙기자&lt;br /&gt;
 * 오이스터 카드 충전은 5파운드 단위로 할 수 있는데 하루에 지하철/버스를 많이 타도 7파운드 제한이 있으니 숙박일수에 7곱하면 대략 된다&lt;br /&gt;
 * 해리포터 스튜디오의 공식 홈페이지에서의 예약은 1달 전에 하는 것은 불가능하다. 미리 할 수 없다면 구입 대행 업체들(마이리얼트립 등)을 통해서 시도해보자. 참고로 대행 업체들은 입장권과 다른 상품(기차표등)을 묶어서 판다. 해리포터 스튜디오에 갈 예정이 있다면 킹스크로스역의 9와 4분의 3플랫폼은 안 가도 된다. 꽤 줄이 길기도 하고, 해리포터 스튜디오에 비슷하게 사진을 찍을 수 있는 곳이 있다(심지어 3종류의 포토존). 참고로 해리포터 지팡이, 해리포터 펜촉은 기내 수화물이 가능했다&lt;br /&gt;
 * 토트넘 경기장에 방문하는 일정이 있었는데, 토트넘 지역이 런던에서 좀 멀리 있어서 간 김에 둘러볼만 한 곳이 있는지 주위를 검색해봤다. 아이들 중에 한 명이 꼬마흡혈귀 소설을 좋아해서, 토트넘 묘지에 잠깐 들러서 분위기를 느끼고 왔다&lt;br /&gt;
 * 호텔 체크아웃 후 비행기 타는 시간이 좀 늦다면 캐리어를 보관해주는 서비스를 찾아보자. 대형 기차역 등에도 종종 있고, 묵었던 호텔에서도 Luggage Storage 서비스를 제공해주기도 한다. 호텔에 따라다르겠지만 내가 이용한 호텔에서는 체크아웃 후에도 보관해준다고 확인 받고 이용했다&lt;br /&gt;
 * 히드로공항 2터미널은 제법 괜찮은 기념품가게와 과자 초콜릿 등을 판다. 작은 선물들은 여기서 사도 될듯&lt;br /&gt;
 * 귀국 비행기에서 세관 관련 적던 서류가 사라졌다(신고할 물품이 있는 사람만 적도록 바뀜). 대신에 코로나 관련하여 건강 체크하는 서류가 생겼다(미리 Q-code 로 인터넷으로 입력하는 방법도 있다)&lt;br /&gt;
 * 귀국 후 인천공항에서 홀린 듯이 경기도/서울가는 버스를 대면으로 표를 구입했는데, 무인발권기가 있다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/474</guid>
      <pubDate>Sat, 15 Jul 2023 13:00:00 GMT</pubDate>
    </item>
    <item>
      <title>2022년 결산</title>
      <link>http://blog.wimy.com/473</link>
      <description>&lt;p&gt;2022년은 코로나로부터 일상 생활을 되찾아가는 한 해였던 거 같다. 이제 실내에서 마스크를 써야한다는 것 외에는 크게 영향을 받지 않게 되었다. 캐리비안 베이도 (마스크를 쓰긴 했지만) 큰 불편없이 즐길 수 있게 되었다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;게임&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;세키로를 연초에 많이 했던 것 같다. 다크소울3 이후 오랜만에 열심히 한 게임이었다. 스팀의 최종 1개의 업적(모든 스킬 다모으기) 빼고 업적을 대부분 달성했다&lt;/li&gt;
&lt;li&gt;It takes two 는 아이들과 함께 엔딩을 2번 봤다. 아이들의 게임 실력이 엄청 올라간듯&lt;/li&gt;
&lt;li&gt;엘든링은 생각보다 취향이 안 맞고 그 당시에 시간이 없었음 ㅜㅡ&lt;/li&gt;
&lt;li&gt;버파5 Ultimate Showdown은 올해의 게임. 매뉴얼과 공략을 찾아볼 정도로 열심히 했다. 슌으로 레벨 38까지 승급해봄&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;개발&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rust 언어를 좀 더 훑어봄. 개념만 들어보다가 공식 설명서를 처음부터 끝까지 정독하면서 따라가봄. 아직 뭔가를 만들어 본 게 없어서 아쉬움. 뭔가 재미있게 개인 프로젝트를 진행해보면 좀 더 내 것으로 만들 수 있지 않을까함&lt;/li&gt;
&lt;li&gt;github commit 한것도 몇개 되지 않는다 ㅠㅜ&lt;/li&gt;
&lt;li&gt;블로그는 딱히 글 쓴 것도 없다. 그나마 랜선 뽑기 테스트(&lt;a href="https://blog.wimy.com/470/"&gt;https://blog.wimy.com/470/&lt;/a&gt;) 한게 볼만하다&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;여행&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;칠갑산 얼음분수축제&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;기타&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;연초 설날에 온가족이 코로나에 걸렸었다. 불행중 다행으로 주위에 전파는 안 되었고, 네 명이 다 같이 걸려서 그나마 편했다&lt;/li&gt;
&lt;li&gt;작년에 키워서 알을 받은 장수풍뎅이가 태어났다. 그리고 사슴벌레를 샀다 -0-&lt;/li&gt;
&lt;li&gt;현재 회사에 다닌지 10년이 되어서 10주년 복지를 받았다&lt;/li&gt;
&lt;li&gt;여름에 말도 안되는 폭우가 쏟아졌다. 탄천의 가로등 윗부분까지 물살에 떠내려간 잡초들이 감겨있었다&lt;/li&gt;
&lt;li&gt;나윤이가 5월 초하루 촬영(&lt;a href="https://www.youtube.com/watch?v=VHSlVop9TXM&amp;amp;t=293s"&gt;https://www.youtube.com/watch?v=VHSlVop9TXM&amp;amp;t=293s&lt;/a&gt;)을 했다&lt;/li&gt;
&lt;li&gt;캐리비안베이에 처음으로 빌리지를 빌려서 가보았다&lt;/li&gt;
&lt;li&gt;중앙 공원에서 김창환의 콘서트를 처음 가봤다&lt;/li&gt;
&lt;li&gt;금오산의 오리배를 타봤다&lt;/li&gt;
&lt;li&gt;대전 (구)엑스포과학박물관에 갔다&lt;/li&gt;
&lt;li&gt;스토리스쿨 1회 윈터페스티벌에 참가했다&lt;/li&gt;
&lt;li&gt;크리스마스에 온가족이 인사동에 갔다&lt;/li&gt;
&lt;li&gt;코로나 때문에 몇년간 못가던 코엑스 아쿠아리움에 갔다&lt;/li&gt;
&lt;li&gt;아버지 칠순 사진을 어머니 생신날 가족 사진으로 찍었다&lt;/li&gt;
&lt;li&gt;건후 생일 선물로 드론을 주고 드론을 날려봄. 어른이 날려도 꽤 재미있었음. 이제는 연날리기 대신 드론&lt;/li&gt;
&lt;li&gt;건후 대표팀 축구. 예선탈락 -&gt; 우승 -&gt; 준우승 등등. 여름 이후 정말 주말마다 열심히 다녔다. 건후가 제법 축구를 잘해서 뿌듯하다&lt;/li&gt;
&lt;li&gt;Disney+ 구독을 해서 극장 영화 이후의 마블 시리즈들을 정주행했다&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/473</guid>
      <pubDate>Sat, 31 Dec 2022 10:25:00 GMT</pubDate>
    </item>
    <item>
      <title>윈도우 랜덤 배경 화면 이미지 파일 저장하기</title>
      <link>http://blog.wimy.com/472</link>
      <description>&lt;p&gt;윈도우의 바탕화면 이미지를 따로 설정하지 않거나 아래와 같이 'Windows 추천' 으로 설정했다면 한번씩 윈도우의 바탕화면 이미지가 자동으로 이런저런 멋진 이미지로 바뀐다. 한번씩 다운받아서 계속 사용하고 싶은 생각이 들기도 한다&lt;/p&gt;

&lt;p&gt;&lt;img src="WindowsRecommendationBackground.png" alt="WindowsRecommendationBackground.png" /&gt; &lt;/p&gt;

&lt;p&gt;이 때 해당 파일을 얻으려면 아래와 같이 하면 된다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;탐색기에서 %UserProfile%\AppData\Local\Packages\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\LocalState\Assets 로 이동&lt;/li&gt;
&lt;li&gt;해당 폴더의 파일들을 특정 폴더(C:\Temp 같은)로 모두 복사&lt;/li&gt;
&lt;li&gt;복사한 폴더(C:\Temp 같은)에서 파워쉘이나 터미널을 열어서 cmd / c "ren &lt;em&gt;.&lt;/em&gt; *.jpg" 를 입력하여 확장자를 붙여준다&lt;/li&gt;
&lt;li&gt;해당 파일들을 둘러보면 원하는 파일을 얻을 수 있고, 좀 더 고화질 사진을 얻으려면 구글 이미지 검색(&lt;a href="https://www.google.com/imghp?hl=ko"&gt;https://www.google.com/imghp?hl=ko&lt;/a&gt;)에 이미지 파일을 드래그해서 검색해보자&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/472</guid>
      <pubDate>Sun, 06 Nov 2022 09:35:00 GMT</pubDate>
    </item>
    <item>
      <title>winget 사용하여 간단하게 프로그램 설치하기</title>
      <link>http://blog.wimy.com/471</link>
      <description>&lt;p&gt;리눅스 진영에는 apt, yum 같은 패키지 관리자들이 오래전부터 존재하여 쉽게 패키지, 프로그램들을 설치할 수 있었다. 윈도우에도 WinStore 같은게 있지만 GUI 기반이고 이런저런 문제로 많이 쓰이고 있지는 않다. 우분투의 apt(이전에는 aptget)에 영향을 받아서인지, 최근에 winget(&lt;a href="https://learn.microsoft.com/ko-kr/windows/package-manager/winget/"&gt;https://learn.microsoft.com/ko-kr/windows/package-manager/winget/&lt;/a&gt;)이라는 게 만들어져서 조금 써봤는데 그냥 apt 의 윈도우 버전이라고 보면 될 것 같다. 모든 것이 winget에 있다고 할 수는 없지만 상당히 많은 프로그램들이 winget 으로도 설치할 수 있게 된 상황이다&lt;/p&gt;

&lt;p&gt;winget을 사용하려면, 윈도우10 이상의 윈도우즈가 설치되어 있어야 하고, 가능하면 최신 업데이트가 되어 있어야 한다. Windows 10 1709 이전 버전의 윈도우에서는 제공되지 않는다. 하지만 1709 이상 버전이라고 바로 winget을 사용할 수 있는게 아니다. 아래의 간단한 과정을 거쳐야 사용할 수 있다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Microsoft Store 앱에서 '다운로드 및 업데이트' 클릭&lt;/p&gt;

&lt;p&gt;&lt;img src="microsoftStoreUpdate.png" alt="microsoftStoreUpdate.png" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;'앱 설치 관리자' 업데이트&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="앱설치관리자업데이트.png" alt="앱설치관리자업데이트.png" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;다운로드 완료 기다리기&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="downloading.png" alt="downloading.png" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;다운로드가 완료되면 콘솔창(cmd, powershell)에서 winget 명령어를 사용할 수 있음(첫 실행 시에 라이센스 동의 필요)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="winget.png" alt="winget.png" /&gt;&lt;/p&gt;

&lt;p&gt;예를 들어 gimp 를 설치하고 싶다고 하면 아래와 같이 search 해본 다음에 install 명령으로 설치하면 자동으로 설치 파일을 다운로드 받아서 실행해준다&lt;/p&gt;

&lt;p&gt;&lt;img src="winget_example.png" alt="winget_example.png" /&gt;&lt;/p&gt;

&lt;p&gt;2022년 10월 기준 아래와 같은 패키지들이 사용가능하다. 주로 내가 사용하는 것들만 나열해봤는데, search 명령으로 더 많이 찾아볼 수 있다. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chrome&lt;/li&gt;
&lt;li&gt;7zip&lt;/li&gt;
&lt;li&gt;Everything&lt;/li&gt;
&lt;li&gt;qBittorrent&lt;/li&gt;
&lt;li&gt;VLC&lt;/li&gt;
&lt;li&gt;Audacity&lt;/li&gt;
&lt;li&gt;Visual Studio 2022 포함 모든 버젼&lt;/li&gt;
&lt;li&gt;Python3&lt;/li&gt;
&lt;li&gt;gVim&lt;/li&gt;
&lt;li&gt;Steam&lt;/li&gt;
&lt;li&gt;EpicGamesLauncher&lt;/li&gt;
&lt;li&gt;DockerDesktop&lt;/li&gt;
&lt;li&gt;Visual Studio Code&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/471</guid>
      <pubDate>Sun, 09 Oct 2022 09:35:00 GMT</pubDate>
    </item>
    <item>
      <title>Tcp 연결 중 랜선 뽑기 테스트</title>
      <link>http://blog.wimy.com/470</link>
      <description>&lt;p&gt;일반적인 생각으로는 랜선을 뽑으면 당연히 연결된 tcp connection 도 끊어질거라고 마냥 생각하고 있었는데 아니라는 얘기를 들어서 직접 테스트를 해보았다.&lt;/p&gt;

&lt;p&gt;간단히 C#으로 코드를 만들어본 결과(&lt;a href="https://github.com/zelon/TestLanCableReconnect"&gt;https://github.com/zelon/TestLanCableReconnect&lt;/a&gt;),&lt;/p&gt;

&lt;p&gt;클라이언트측 랜선을 뽑았을 때 클라이언트의 send 는 계속 유지되고(아마 send buffer 용량만큼 계속 쌓기만 하는듯), 서버는 (당연하게도) receive 가 멈춘다. 다시 랜선을 연결했을 때 그동안 send 되었던 내용들이 한번에 서버측에서 receive 되었다. 접속 끊어짐은 발생하지 않았다&lt;/p&gt;

&lt;p&gt;좀 신기한 것은 랜선을 뽑은채 계속 지켜보았는데(5분 이상), 계속 서버측에서는 접속 끊어짐이 발생하지 않았다. 이런 동작이 윈도우/리눅스의 차이가 있는지는 확인하지 못했지만, 서버 프로그래밍에서는 항상 ping test 등을 통해서 클라이언트가 정상적으로 연결되어 있는지를 꼭 확인해야 할 것 같다&lt;/p&gt;

&lt;p&gt;&lt;img src="ReconnectLanCable.gif" alt="ReconnectLanCable" /&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/470</guid>
      <pubDate>Mon, 15 Aug 2022 11:05:00 GMT</pubDate>
    </item>
    <item>
      <title>개발 머신을 Windows Server에서 Windows 10으로 돌아온 이유</title>
      <link>http://blog.wimy.com/469</link>
      <description>&lt;p&gt;일단 서버 프로그래머이기 때문에 실제로 서버가 실행될 OS를 좀 더 친숙하게 쓰고 싶고, 새롭게 개발 머신을 받은 기회가 있어 Windows 10을 설치하지 않고 Windows Server 2022를 설치해보았다. 결과는 실패...&lt;/p&gt;

&lt;p&gt;다음과 같은 이유들에 의해서 다시 Windows 10 으로 돌아왔다&lt;br /&gt;
* 대부분의 하드웨어 드라이버들이 서버용을 공식적으로 지원하지 않고 Win10 용을 지원한다&lt;br /&gt;
    + 사실 Win10 용을 설치해도 큰 문제는 없어보였는데 아무래도 억지로 설치하는 느낌을 지울 수 없었다&lt;br /&gt;
    + 게임 개발을 해야하는데 XBOX 360 무선 컨트롤러도 쉽게 설치할 수 없었다&lt;br /&gt;
    + 블루투스 동글도 자동 인식이 되지 않았다&lt;br /&gt;
* 작업 관리자에서 GPU 사용 정보가 보이지 않았다. 특정 방법을 이용하면 나오게 할 수 있었는데, 그래도 GPU 온도는 보이지 않았다&lt;br /&gt;
* 인덱싱 서비스가 기본적으로 꺼져있는데, 서비스를 켜도 아웃룩 등에서 검색할 때 계속 인덱싱 서비스를 켜라고 한다&lt;br /&gt;
* 사소하지만 리부팅할 때 번거러운 팝업이 뜬다&lt;br /&gt;
* 무척이나 편리하게 복사-붙여넣기를 강력하게 해주는 단축키인 윈도우키+V 를 지원하지 않는다&lt;/p&gt;

&lt;p&gt;이런 이유들이 있었는데, 마지막의 윈도우키+V 는 은근히 계속 불편했고, 유틸리티 프로그램을 간단히 만들려 하다가 이게 무슨 짓인가 싶어서 그냥 Win10을 다시 설치했다.&lt;/p&gt;

&lt;p&gt;결론은 데스크탑에서는 데스크탑OS를 쓰자!&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/469</guid>
      <pubDate>Sun, 06 Mar 2022 14:05:00 GMT</pubDate>
    </item>
    <item>
      <title>ASP.NET Core 에서 커스텀 json 파일 사용하기</title>
      <link>http://blog.wimy.com/468</link>
      <description>&lt;p&gt;ASP.NET Core를 재미있게 보고 있어서 appsettings.json 에 이런 저런 설정을 많이 넣다가 별도의 파일에 특정한 설정들만 분리해서 넣고 싶어서 찾아보니 아래와 같은 방법으로 사용할 수 있었다. .NET 6.0 기준이다. 재미있는 점은 json 파일의 내용이 변경되었을 때 바로 변경된 내용을 반영해주는 옵션이 제공된다는 점이다&lt;/p&gt;

&lt;p&gt;mydata.json 파일을 추가한 다음에 Properties 창에서 Copy to Output Directory 옵션이 Copy if newer 인지만 잘 확인하고 사용하자.&lt;/p&gt;

&lt;p&gt;Program.cs 를 아래 코드를 참고하여 수정&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var builder = WebApplication.CreateBuilder(args);
builder.Configuration.AddJsonFile("mydata.json", optional: false, reloadOnChange: true);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;특정 페이지에서 아래와 같이 사용&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private readonly IConfiguration _configuration;

public IndexModel(IConfiguration configuration)
{
    _configuration = configuration;
}

public void OnGet()
{
    var section = _configuration.GetSection("Additional");
    var k = section.GetSection("MySetting").GetSection("Default")["Max"];
    System.Diagnostics.Trace.WriteLine(k);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1&gt;ASP.NETCore #json #data&lt;/h1&gt;
</description>
      <guid>http://blog.wimy.com/468</guid>
      <pubDate>Tue, 01 Mar 2022 01:37:00 GMT</pubDate>
    </item>
    <item>
      <title>CPU TPM BIOS 제한 없이 구형 컴퓨터에서 윈도우11 클린 설치하기</title>
      <link>http://blog.wimy.com/467</link>
      <description>&lt;p&gt;&lt;img src="Win11.png" alt="Win11" /&gt;&lt;/p&gt;

&lt;p&gt;얼마전(10월 5일)에 윈도우11이 출시되었다. 늦게나마 세컨드 컴퓨터에 설치해서 써보려고 하는데 세컨드 컴퓨터의 사양은 2010년에 발매된 i7-930 이다. TPM이니, UEFI니 이런거 없다.&lt;/p&gt;

&lt;p&gt;인터넷을 좀 찾아보니 윈도우11에서 요구하는 사양들을 통과하는 레지스트리 설정이 있었다. 레지스트리의 특정 위치에 특정 제약 사항들을 체크하지 않는 설정을 하는 것이다. 참고: &lt;a href="https://www.techpowerup.com/287584/windows-11-tpm-requirement-bypass-it-in-5-minutes"&gt;https://www.techpowerup.com/287584/windows-11-tpm-requirement-bypass-it-in-5-minutes&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;윈도우11 iso 파일 다운받아서 USB 드라이브에 넣어준다&lt;/li&gt;
&lt;li&gt;&lt;a href="bypass.reg"&gt;bypass.reg 링크&lt;/a&gt; 파일을 설치용 USB 드라이브에 복사-붙여넣기로 넣어준다&lt;/li&gt;
&lt;li&gt;USB 드라이브로 부팅&lt;/li&gt;
&lt;li&gt;설치 시작 화면에서 Shift+F10 을 누른 후 regedit 엔터&lt;/li&gt;
&lt;li&gt;레지스트리 편집기에서 파일 -&gt; 가져오기 를 통해서 해당 bypass.reg 파일을 연다&lt;/li&gt;
&lt;li&gt;일반적인 설치 과정 진행&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위와 같이, 설치 과정에서 해당 레지스트리를 입력해주면 관련 사양 체크없이 설치가 된다. i7-930, 12GB RAM, HDD, GeForce 210 의 사양으로도 딱히 윈도우10과 다를바 없이 설치 및 사용이 가능하다.&lt;/p&gt;

&lt;p&gt;잠깐 써보니 설정창이 꽤 바뀐 것 외에는 크게 와닿는게 없고, 아래의 스샷처럼 전체화면 아이콘을 마우스를 오버하면 적절한 크기로 창을 키울 수 있다. 큰 모니터를 사용할 때 꽤 유용하게 사용할 수 있을 것 같다&lt;/p&gt;

&lt;p&gt;&lt;img src="Win11Snap.png" alt="Win11Snap" /&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/467</guid>
      <pubDate>Mon, 11 Oct 2021 09:14:00 GMT</pubDate>
    </item>
    <item>
      <title>제주도 전기차 렌터카 후기</title>
      <link>http://blog.wimy.com/466</link>
      <description>&lt;p&gt;얼마전 제주도 여행을 다녀오면서 '오라렌트카' 에서 'SM3 ZE 전기차'를 4박 5일동안 렌트한 소감이다&lt;/p&gt;

&lt;h1&gt;기대&lt;/h1&gt;

&lt;p&gt;처음으로 전기차를 렌트했는데 일단 다음과 같은 점 때문에 렌트했다&lt;br /&gt;
* 전기차를 타보고 싶었다. 다음 번에 차를 살 때는 왠지 전기차를 사게 될 것 같아서 미리 경험해보고 싶었다&lt;br /&gt;
* 그나마 전기차라서 연식이 오래되지 않았다. 2019년식이었음&lt;br /&gt;
* 전기차가 일반차보다 렌트 가격이 약간이나마 싸다. 참고로 아이오닉5는 최신 전기차라서인지 훨씬 더 비싸다&lt;br /&gt;
* 작년 제주도 여행에서 여행지마다 전기차 충전소가 보여서 제주도에서의 충전은 쉽게 될 것 같았다&lt;br /&gt;
* 충전료가 주유비보다 저렴할 거라 생각했다&lt;/p&gt;

&lt;h1&gt;타보니&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;엑셀을 밟으니 잘 나간다. 정말 시속 100km 까지는 슈웅 나간다는 느낌이다. 와이프 말로는 xx랜드의 범퍼카 타는 느낌이란다&lt;/li&gt;
&lt;li&gt;조용하다는 건 잘 모르겠다. 원래 내 차가 하이브리드 차다...&lt;br /&gt;
&lt;img src="SM3ZE.jpg" alt="SM3ZE_계기판" /&gt;&lt;/li&gt;
&lt;li&gt;계기판이 깔끔하다. 하이브리드 차를 타면 엔진과 모터 계기판이라서 더 복잡하기도 한데, 전기사용현황(+충전현황)과 남은 배터리 상황, 속도 정도만 보여줘서 계기판이 깔끔하다&lt;/li&gt;
&lt;li&gt;충전료는 생각보다 엄청 저렴하지는 않았다. 무제한 충전권을 대여하는데 2만 5천원이었는데, 대략 300km 정도 운전했고, 충전하는데 1만 5천원쯤 충전료가 표시되었다. 무제한 충전권을 대여했기 때문에 당연히 추가 요금을 내지는 않았다. 숙소 앞 바다에서 이틀을 놀았기 때문에 운전을 적게 한 것을 고려하면 4박 5일에 대한 충전권 대여료는 적절한 듯.&lt;/li&gt;
&lt;li&gt;충전소 찾는건 EV Infra 라는 app을 스마트폰에 설치하거나, &lt;a href="https://www.ev.or.kr/evmonitor"&gt;https://www.ev.or.kr/evmonitor&lt;/a&gt; 사이트를 참고&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;단점은 자세히&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;배터리 때문인 것 같은데, 트렁크가 꽤 작다. 4명 가족이 캐리어 2대를 넣으니 매우 빡빡했다&lt;/li&gt;
&lt;li&gt;작은 관광지에는 충전소가 없는 곳이 많다. 작년에 제주도에 방문했을 때는 매우 유명한 곳을 다녔기 때문에 충전소가 매우 많다고 느꼈는데, 올 해 다시 방문하니 작년에 방문했던 곳 중에 정말 좋았던 곳만 다시 방문하고 나머지는 그나마 덜 유명한 곳에 방문했는데 충전소가 없는 곳도 많았다&lt;/li&gt;
&lt;li&gt;전기차는 충전 방식이 여러개 있다. SM3 ZE는 'AC3상' 이라는 충전방식이었는데, 이게 없어져가는 충전 방식이다. 좀 찾아보면(&lt;a href="https://young.hyundai.com/magazine/motors/detail.do?seq=18031"&gt;https://young.hyundai.com/magazine/motors/detail.do?seq=18031&lt;/a&gt;), 국내는 'DC콤보' 가 표준이 되었고, 앞으로는 'DC콤보' 방식만 사용하게 될거란다. 'AC3상'은 구형 충전기 혹은 여러 충전 방식을 지원하는 충전기에서 볼 수 있다. 참고로 내가 이번에 방문한 관광지에서는 '조랑말 체험공원', '정방폭포'에서만 지원해줬다. 이렇게 충전 방식이 나뉘다보니 생각보다 충전소 갯수가 여유롭지 않았다&lt;/li&gt;
&lt;li&gt;충전 시간이 꽤 오래 걸린다. '급속' 충전이지만 배터리가 20% 남았을 때 충전을 시작했는데 1시간을 충전해도 95% 정도까지 밖에 충전이 되지 않았다. 충전을 걸어놓고 관광지를 둘러보면 딱 좋긴 한데, 충전 때문에 여행와서 별도로 시간을 쓰기는 아깝다&lt;/li&gt;
&lt;li&gt;계기판에서 남은 주행거리를 표시해주지만, 충전이 오래 걸리고, 충전소의 충전 단자 종류가 나뉘어져있고, 다른 사람이 충전 중일 수도 있기 때문에 남은 주행거리가 어느 정도 떨어지게 되면 마음이 불안해진다. 참고로 3종류의 단자를 지원하는 충전기가 3종류 중 2종류는 고장이 나 있는 경우도 2번 보았다 ㄷㄷ&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;다음에는&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;숙소에 충전이 가능하고 충전 종류가 맞다면 무조건 전기차를 이용할 것 같다&lt;/li&gt;
&lt;li&gt;가격/연식을 고려해서 전기차가 더 나으면 전기차를 이용할 것 같다. 특히 DC콤보 방식의 전기차는 다시 도전해볼만할 듯 하다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;렌트 업체&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;제주속으로(&lt;a href="https://jejussok.com/"&gt;https://jejussok.com/&lt;/a&gt;)라는 사이트에서 예약했는데 오라렌트카에서 차를 받았다. 제주속으로 라는 업체는 제주의 소규모 렌트카들의 예약 대행 같은 느낌이었다. 오라렌트카는 또 제주로렌트카와 갤럭시렌트카와 같은 사무실에서 렌트를 해주고 있었다. 뭔가 의아하긴 하다. 연합의 연합체... 하지만 결론적으로는 나쁘지 않았다&lt;/li&gt;
&lt;li&gt;오라렌트카는 작년에 이용했던 스타렌트카와 다르게 인터넷에서 바로 차량 확정이 가능했고(스타렌트카는 이상하게 인터넷에서 예약 후 전화로 다시 확정을 해야했다), 카카오톡으로 온 url을 통해서 운전면허등을 미리 등록할 수 있어서 미리 등록해놓으면 현장에서 빠르게 서류처리가 가능해서 좋았다&lt;/li&gt;
&lt;li&gt;소규모 업체에서는 사고 발생 시 문제가 있다고들 하는데 사고가 안나서 별 문제는 없었다. 차를 빌릴 때 휴대폰 등으로 미리 사진을 여기저기 찍어두기도 했고(업체에서도 미리 찍기를 권한다), 잔기스 등으로 문제 삼지도 않아보였다&lt;/li&gt;
&lt;li&gt;전기차 무제한 충전권을 대여했기 때문에 반납시 충전량으로 추가 요금을 내지도 않았다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/466</guid>
      <pubDate>Mon, 11 Oct 2021 06:50:00 GMT</pubDate>
    </item>
    <item>
      <title>[책] 판타지 사전</title>
      <link>http://blog.wimy.com/465</link>
      <description>&lt;p&gt;&lt;img src="판타지_사전.jpg" alt="판타지_사전" /&gt;&lt;/p&gt;

&lt;p&gt;판타지 사전. 어디선가 잠깐 봤는데 너무 사고 싶다는 생각이 들어서 사놓고는 정말 조금씩 조금씩 완독했다. 책도 얇고(260페이지), 단락마다 따로 읽기 좋다.&lt;/p&gt;

&lt;p&gt;이 책은 판타지 세계에 등장하는 모든 것들에 대해 설명하고 있다. 무기, 세계관, 종교, 마법, 언데드, 상점에 대해 짧고 핵심적인 내용을 소개해준다.&lt;/p&gt;

&lt;p&gt;'사제와 주교는 누가 더 높은 계급인가', '성창 - 못 박힌 그리스도를 찌른 창. 롱기누스의 창이라고 하며, 히틀러도 그 행방을 찾았다고 전해진다', '던전은 이런저런 이유로 감옥을 던전이라고 부르게 되면서...', '악마의 계급 체계는...' 와 같은 형태로 적절한 그림과 함께 설명하고 있다.&lt;/p&gt;

&lt;p&gt;게임 업계에 종사하는 사람은 무조건 한 번 읽어보라고 권하고 싶다. 아마 게임을 좋아하는 모든 사람, 그리고 영화계에 있는 사람들도 한번쯤은 흥미있게 읽을 수 있을 것 같다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/465</guid>
      <pubDate>Mon, 29 Mar 2021 15:25:00 GMT</pubDate>
    </item>
    <item>
      <title>2020년 결산</title>
      <link>http://blog.wimy.com/464</link>
      <description>&lt;p&gt;늦었지만 2020년 결산해본다.&lt;/p&gt;

&lt;p&gt;일단 코로나... 코로나 때문에 바뀐 삶은 명확하다. 집에 있고, 마스크 쓴다.&lt;br /&gt;
 어머니가 어깨 수술을 했을 때 못 찾아뵈었다. 생신 때 못 찾아뵈었다. 제주도 여행은 미루고 미루다가 3차 대유행 직전에 다녀왔다.&lt;/p&gt;

&lt;p&gt;셜록 시즌 나온거 다 봤다. &lt;br /&gt;
 슬기로운 의사 생활 시즌1 다 봤다. 너무 재미있었다...&lt;br /&gt;
 젤다 야생의 숨결 영문판으로 깼었는데 한글판으로 한번 엔딩 봤다. 한글판 굳이 안 해도 되었을 것 같다... 영문판할 때 너무 스트레스 받아서(나는 모르는 단어나오면 하나하나 다 찾아가며 게임하는 스타일이다...). 다시 해도 잘 만들었더라&lt;br /&gt;
 판타지 사전 책 다 읽었다. 게임을 만드는 사람은 정말 한번쯤 봐두면 좋을 책이다. 2020년에는 저렇게 백과사전식 책이 몇권 더 나온 것 같다&lt;/p&gt;

&lt;p&gt;집콕생활하면서 많이 정리했다. 신박한 정리를 보고 아이들도 필요와 욕구로 정리했다&lt;/p&gt;

&lt;p&gt;턱걸이를 1개 이상할 수 있게 되었다. 근데 문이 벌어졌다...&lt;br /&gt;
 동물의 숲 애들이랑 열심히 했다. 코로나 대박 동물이 숲&lt;/p&gt;

&lt;p&gt;집에서 회사 노트북으로 일할 수 있게 되었다. 내 시간이 없어졌다. 너무 회사 일만 한다. 적절하게 책도 봐야하는데 책을 안 보게 되었다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/464</guid>
      <pubDate>Fri, 29 Jan 2021 15:25:00 GMT</pubDate>
    </item>
    <item>
      <title>wimybox 서비스 종료</title>
      <link>http://blog.wimy.com/463</link>
      <description>&lt;p&gt;Wimybox - &lt;a href="http://box.wimy.com"&gt;http://box.wimy.com&lt;/a&gt; 을 이제 더이상 서비스할 수 없게 되었다. 그래서 더이상 개발도 하지 않게 되었다.&lt;/p&gt;

&lt;p&gt;회사 일도 바쁘고 조금 지친 것도 있지만, 직접적인 원인은 YouTube API를 쓰는데 너무 복잡한 것을 요구해왔기 때문이다&lt;/p&gt;

&lt;p&gt;아마 YouTube API를 쓰는 다른 사람들도 관련 메일을 받았겠지만 얼마 전부터 YouTube API측에서 약관을 지키라면서 Audit Form(사용 방법 등 - &lt;a href="https://support.google.com/youtube/contact/yt_api_form"&gt;https://support.google.com/youtube/contact/yt&lt;em&gt;api&lt;/em&gt;form&lt;/a&gt;)을 등록하라고 해왔고, 귀찮기도 하고, 엄청나게 긴 영어로 된 약관을 하나하나 읽어보기는 힘들었기 때문에 Audit Form을 보내지 않았다. 참고로 읽어보고 준수해야 하는 약관은 3개이며 그 중에 1개는 이만큼(&lt;a href="https://developers.google.com/youtube/terms/developer-policies"&gt;https://developers.google.com/youtube/terms/developer-policies&lt;/a&gt;)의 길이다. 여튼 Form을 보내지 않았더니 YouTube API 접근이 제한되었고 결국 wimybox 서비스는 오류를 발생하게 되었다.&lt;/p&gt;

&lt;p&gt;시간이 되어서 Audit Form을 채워서 보냈더니, "이런저런 약관이 위배되었으니 A,B,C를 고쳐주세요"라고 답변 받았고, 다시 예전 소스를 꺼내서 수정하고, 약관을 첫 화면 잘 보이는 곳에 배치하고, 링크도 걸고 해서 답변을 보냈더니, 아래처럼 답변이 왔다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Screencast or Video recording(s) that clearly demonstrates how your API Client and its users access and use the YouTube API Services&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Please confirm that you don't wish to use the YouTube API services any longer in the future for this project key. Once we get the confirmation, we will revoke access for the project keys from our end&lt;/p&gt;

&lt;p&gt;동영상을 만드는 것도 힘들고, 나의 구현 방법을 알려달라는 것도 웃기고... 사용 안할거면 알려달라고 친절하게 설명도 해준다(내가 귀찮아한다는 것을 알았나...) 그래서 wimybox 서비스를 종료하기로 결정했다.&lt;/p&gt;

&lt;p&gt;2009년 무한도전 듀엣 가요제의 냉면을 들으면서 열심히 만들고, 2011년 원더걸스의 Be My Baby를 들으면서 재미있게 업그레이드 했던 기억이 난다. 아쉽지만 여기까지.&lt;/p&gt;

&lt;p&gt;시간이 되면 코드만 마지막으로 정리하고, 정식으로 사이트 닫아야 겠다. 앞으로 취미 삼아 토이프로젝트 만들 때도 이제 구글의 API를 가능하면 사용하지 않도록 해야겠다&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/463</guid>
      <pubDate>Tue, 30 Jun 2020 15:25:00 GMT</pubDate>
    </item>
    <item>
      <title>리눅스 데스크탑은 여전히 쓸만한 물건이 아니다</title>
      <link>http://blog.wimy.com/462</link>
      <description>&lt;p&gt;몇 년만에 집의 데스크탑PC에 우분투 리눅스 19.10버전을 설치했는데, 로그인이 안 되었다. 클린 설치였는데도... "우분투 무한 로그인" 으로 검색해보면 수많은 글들이 나온다. 대충 보면 그래픽카드와의 충돌 현상이며, 이래저래 회파하면 된다. 하지만 웃긴 건 저 문제는 꽤 오래 되었다는 것이다. NVidia 그래픽 카드와의 충돌 현상이 몇 년 째 해결되지 않고 있다. 오픈소스라서 누군가는 고칠까... 과연...?&lt;/p&gt;

&lt;p&gt;결국에는 너무 짜증이 나서 다른 배포판을 깔았는데, 다른 배포판은 또 괜찮았다. 우분투의 문제... 사실 우분투면 리눅스 데스크탑에서 가장 기본이 되고, 다른 배포판들도 우분투를 기반으로 나오는 경우가 많은데 이정도라니 안타깝다.&lt;/p&gt;

&lt;p&gt;아직 리눅스 데스크탑은 갈 길이 멀었다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/462</guid>
      <pubDate>Tue, 24 Mar 2020 15:43:00 GMT</pubDate>
    </item>
    <item>
      <title>KT에서 U+알뜰모바일로 셀프개통 통신사 이동 후기</title>
      <link>http://blog.wimy.com/461</link>
      <description>&lt;p&gt;드디어 1월 4일부로 KT의 2년 약정이 끝나서 알뜰 통신사로 옮겨가게 되었다. 이상하게 좀 알아보니, U+알뜰모바일과 헬로모바일 요금이 완전 같아서(헬로모바일 주소가 lghellovision인 걸 봐서는 뭔가 합쳐진듯) 고민하다가 그냥 GS25에서 유심을 구하고, '셀프개통'을 할 수 있는  U+알뜰모바일로 선택했다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;요금제 및 셀프개통: &lt;a href="https://gs25.uplussave.com/prtn/gs25/index.mhp"&gt;https://gs25.uplussave.com/prtn/gs25/index.mhp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;직접 해보니 신기(?)한 것이 통신사 대리점에서 할 법한 일들을 내가 직접 하면서 새로운 유심을 등록한다. KT에다가 ARS로 전화해서 확인하고, 본인 인증을 내 카드로 하고 등등... 여튼 완전 자동은 아니지만, 대리점 직원이 아닌 나도 한번에 할 수 있을 정도의 수준이었다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;장점들&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;U+알뜰모바일 및 KT와도 상담사 연결을 할 필요가 없었다. 기껏해야 ARS에 숫자 입력해주는 정도&lt;/li&gt;
&lt;li&gt;매달 4만 8천원을 내면서 데이터 2기가를 받고 있었는데 2만 5천원에 15기가를 받는 요금제로 옮겨간 것이다. 절반가격으로 데이터를 7배 넘게 받는다. 이게 핵심. 이걸 왜 이제야했을까...(사실 KT 2년 약정 때문이었지만;;)&lt;/li&gt;
&lt;li&gt;크롬 웹 브라우저로 진행이 가능하다(!!!!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;아쉬운 점들&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;이상하게 GS25 편의점에서 산 유심이 잘못된 유심일련번호라면서 등록이 안되는데, 이게 홈페이지의 오류처럼 보인다. 내가 혹시나하고, U+알뜰모바일 사이트를 여기저기 다니면서 '셀프개통' 시작페이지가 여러 군데인 것을 확인했고, 이 여러군데 중 한곳은 나의 유심 일련번호를 제대로 인식했다. 홈페이지의 특정 페이지를 잘못 만든듯하다&lt;/li&gt;
&lt;li&gt;컴퓨터 앞에서 진행하다가, 휴대폰으로 카톡이 와서 양쪽 진행?? 같은 게 이상하다&lt;/li&gt;
&lt;li&gt;KT에서 문자가와서 해당 url을 클릭하라는 설명이 있는데 있는데  KT의 문자에는 해당 url이 없었다. 그래서 잠깐 헤매었다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;안전한 것들&lt;/h1&gt;

&lt;p&gt;사실 내 환경에서는 날아간게 하나도 없어서 적기도 민망하지만 일단 찝찝했지만 안전한 것들을 적어본다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;카카오톡을 백업할 필요도 없었다&lt;/li&gt;
&lt;li&gt;문자 메시지도 날아가지 않는다. 보통 문자 메시지를 유심에 저장하지 않기 때문에 괜찮다&lt;/li&gt;
&lt;li&gt;삼성 페이가 기본적으로 동작하지 않게 된다. 삼성 페이 앱을 직접 실행해주면 유심이 바뀌었다가면서 다시 본인 확인 후 정상 동작한다. 다만 교통카드 기능도 함께 초기화되는 데 난 안 썻기 때문에 어떻게 될지 모르겠다. 내가 안 쓰는 이유는 신한카드를 교통카드로 사용하는데 삼성 페이를 통해서 교통카드 결재를 하면 교통카드 혜택이 안되기 때문이다&lt;/li&gt;
&lt;li&gt;T전화를 다시 등록하라고 왔다. T전화 초기화를 눌렀지만 다행히 주소록이 날아가지는 않았다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;기타&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;실제로 컴퓨터에 앉아서 약 20분이 걸렸으며, 실제로 통화가 안 되는 시간은 정말 2~3분 정도 밖에 안될 것 같다&lt;/li&gt;
&lt;li&gt;유심을 갈아끼우고 해당 카드에 정보를 기록했다면서 리부팅이 한번 있었다. 그런데 이 때 리부팅 한다는 앱(?)이 전체 화면을 가려서 잠시 동안 폰 리부팅을 안하면 아무것도 못하는 상황이 벌어진다

&lt;ul&gt;
&lt;li&gt;구글로부터 이상한 문자 하나가 왔다. Google SIM verification 이라고 오면서 url이 하나 오는데 따라가서 읽어보면 원래 전화번호가 바뀌면 문자를 보내면서 바뀐 인증 같은 걸 한단다. 사실 전화번호가 바뀐게 아니라 유심만 바뀌었지만 뭐...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;U+알뜰모바일에서 문자가 3통 밖에 안 왔다. 그 내용도 담백하다 ㅋㅋ KT에 처음 가입했을 때 문자가 정말 10통은 넘게 왔었던 것 같은데, 다 쓸데없는 내용으로 기억한다. 그리고 문자 하나에 고객님 어쩌구부터, 마지막에는 초능력 5G라는 둥... 내용을 읽게 힘드는 문구들이 가득하다. U+ 알뜰모바일에서는 이래도 되나 싶을 정도로 문자가 적고, 오히려 빠져나오는 KT에서 여러 문자를 보내면서 이런저런 내용(남은 요금이 어쩌구)을 안내했다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;결론&lt;/h1&gt;

&lt;p&gt;KT에서 U+ 알뜰모바일로 꽤 쉽게 넘어갈 수 있으며, GS25에서 유심을 미리 사서 시작하면 약 20분 만에 통신사를 바꿀 수 있다. 다들 3대 통신사를 쓰고 있다면 한번쯤 알아보시길~~&lt;/p&gt;

&lt;h1&gt;ps&lt;/h1&gt;

&lt;p&gt;아내도 KT에서 U+알뜰모바일로 가려고 했는데, KT가 더 싼 조건이 있긴 했다. 바로 3만원 대 요금을 쓰면서 무제한 음성통화를 사용할 경우. 아내의 평균 월 통화량이 거의 400분이어서... 아내의 상황에서는 KT가 더 쌌다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/461</guid>
      <pubDate>Wed, 08 Jan 2020 06:12:00 GMT</pubDate>
    </item>
    <item>
      <title>2019년 돌아보기</title>
      <link>http://blog.wimy.com/460</link>
      <description>&lt;p&gt;이 글을 쓰기 시작할 때는 2019년 정말 한 일이 없구나하면서 시작했는데, 다 적고 보니 나름 열심히 살았는 것 같다. 2020년도 화이팅~~!!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;블로그(&lt;a href="http://blog.wimy.com"&gt;http://blog.wimy.com&lt;/a&gt;)에 글 10개. 나쁘지 않은 갯수. 2020년에는 한달에 1개씩 적어보자&lt;/li&gt;
&lt;li&gt;github(&lt;a href="http://github.com/zelon"&gt;http://github.com/zelon&lt;/a&gt;)에 commit 271개. 2020년에는 365개를 넘길려나&lt;/li&gt;
&lt;li&gt;wimygit(&lt;a href="http://github.com/zelon/wimygit"&gt;http://github.com/zelon/wimygit&lt;/a&gt;) - p4v처럼 만든 git gui client. 이제 원하는 기능이 대부분 구현되었다. 다만 내가 쓰는 기능들 위주. 코드 구현도 마음에 드는 수준까지 올라왔고, 덕분에 WPF/MVVM 구현에 제법 익숙해졌다. 2019년에 개인 프로젝트로 재미있게 코딩한 듯&lt;/li&gt;
&lt;li&gt;기술

&lt;ul&gt;
&lt;li&gt;WPF/MVVM : 이제 제법 이걸로 데스크탑 애플리케이션을 만들 수 있을 것 같다&lt;/li&gt;
&lt;li&gt;C#/.NET CORE : 최신 트렌드를 따라가봤다. 이제 하나의 실행 파일로 .NET이 배포되는 것 만으로도 정말 좋아졌다&lt;/li&gt;
&lt;li&gt;ASP.NET CORE : ASP.NET 은 십 몇년간 사용하지 않았었는데, .NET CORE의 발전과 회사에서의 사용으로 어느 정도 다시 감을 찾았다&lt;/li&gt;
&lt;li&gt;docker : 2019년 말에 갑자기 필이 꽂혀서 이것저것 해봤다. 아직 실전에는 투입 못해봤지만, 개발용으로는 제법 쓸 수 있다&lt;/li&gt;
&lt;li&gt;UnrealEngine : 클라이언트 게임 프로그래밍은 유니티를 만지고 놀았는데 이제 언리얼 엔진을 좀 보기 시작했다. 열심히 온라인 강좌도 듣고, 책도 보지만 이제 겨우 간단한 플랫포머 게임 하나 만들 정도&lt;/li&gt;
&lt;li&gt;git : 개인 프로젝트들은 당연히 git으로 관리되고, Wimygit을 만들면서 좀 더 다양하게 사용하게 되었다. 다만 혼자만 쓰는 코드 관리이기 때문에 conflict 상황에 대해 경험치는 계속 안 쌓이는 듯...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;책

&lt;ul&gt;
&lt;li&gt;클린 소프트웨어(&lt;a href="http://blog.wimy.com/456/"&gt;http://blog.wimy.com/456/&lt;/a&gt;) 완독. 좀 많이 두꺼워서 읽는 데 1년이 넘게 걸린듯... 그래도 오랜만에 두꺼운 책을 다 봐서 만족감이 있다&lt;/li&gt;
&lt;li&gt;WPF MVVM 일주일만에 배우기(&lt;a href="http://blog.wimy.com/451/"&gt;http://blog.wimy.com/451/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;달빛조각사 거의 완독(회사 도서관에 있는 것 - 54권까지). 2018년 6월부터 시작해서 2019년 7월까지 읽음

&lt;ul&gt;
&lt;li&gt;달빛조각사 게임 만드시는 지인이 있어서 읽기 시작했는데 꽤 재미있어서 쭈욱 정주행했다. 그런데 정작 달빛조각사 게임 개발한 지인은 안 읽으셨다고...&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;영화 - 육아를 하면서 아이들과 꽤 많은 영화를 봤지만 인상 깊었던 것들

&lt;ul&gt;
&lt;li&gt;스파이더맨 : 뉴 유니버스 - 이건 정말 두고두고 보고 싶은 영화. 특히 비주얼이 멋지다&lt;/li&gt;
&lt;li&gt;레고 무비 - 이것도 정말 대박. 이것이 진정한 레고 정신&lt;/li&gt;
&lt;li&gt;맨 프럼 어스&lt;/li&gt;
&lt;li&gt;알라딘&lt;/li&gt;
&lt;li&gt;칠드런 오브 맨&lt;/li&gt;
&lt;li&gt;쥬만지: 새로운 세계&lt;/li&gt;
&lt;li&gt;조선명탐정2, 3&lt;/li&gt;
&lt;li&gt;세 얼간이&lt;/li&gt;
&lt;li&gt;명량&lt;/li&gt;
&lt;li&gt;흐르는 강물처럼&lt;/li&gt;
&lt;li&gt;겨울왕국2&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/460</guid>
      <pubDate>Wed, 01 Jan 2020 05:10:00 GMT</pubDate>
    </item>
    <item>
      <title>Visual Studio WPF Designer View에서 Exit Code: 80131623</title>
      <link>http://blog.wimy.com/459</link>
      <description>&lt;p&gt;.NET Core 3.0으로 WPF로 GUI Git client(&lt;a href="https://github.com/zelon/wimygit"&gt;https://github.com/zelon/wimygit&lt;/a&gt;)를 취미삼아 만들고 있는데, 특정 상황에서 Visual Studio의 WPF Designer View에서 80131623 에러를 내면서 제대로 미리보기를 보여주지 않았다. 버그 리포팅을 해도 묵묵부답이고... 뭔가 내 컴퓨터에서만 발생하는 문제인가 싶기도 한데, window10의 샌드박스에서 테스트해도, Visual Studio 2019 preview 버전에서도 같은 문제가 발생했다.&lt;/p&gt;

&lt;p&gt;&lt;img src="XAML_Designer_Error.png" alt="XAML Designer Error" /&gt;&lt;/p&gt;

&lt;p&gt;문제의 원인은 XAML 코드를 여기저기 주석처리하다가 알았는데, ListBox에 MultiBinding을 사용할 때였다. 문제도 없는 코드이고 빌드 및 실행도 잘되는데, XAML preview에서만 'The XAML Designer has exited unexpectedly. (Exit code: 80131623)' 과 같은 화면을 띄우면서 preview를 보여주지 못했다. 이런저런 방법을 써도 잘 안되다가 정말 엉뚱한 방법으로 문제를 회피(!)했다. 바로 MultiBinding Coverter에 사용되는 클래스 이름을 바꾸는 것. 희안하게 클래스의 이름을 줄였더니 이 문제가 회피가 되었는데, 웃기는 것이 XAML Designer에서는 새롭게 변경한 클래스 이름을 발견을 못한다. 그래서 경고 밑줄을 띄우면서, preview는 잘보여준다. 아마 내가 사용했던 클래스 이름이 반쯤(?) 인식되어서 뭔가 동작을 하다가 멈춘게 아닌가 생각된다. 이름을 더 길게도 해보고 어떤 패턴이나 어떤 단어에 문제가 생기는 지 더 찾고 싶지만 이 문제에 너무 오래 시달려서 일단 preview가 보이는 데서 만족하고 포스팅 중...&lt;/p&gt;

&lt;p&gt;혹시나 이런 문제를 겪는 사람이 있다면 일단 클래스 이름을 바꿔 보시길.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/459</guid>
      <pubDate>Thu, 21 Nov 2019 13:28:00 GMT</pubDate>
    </item>
    <item>
      <title>Visual Studio WPF Designer에서 내가 만든 UserControl을 인식하지 못할 때</title>
      <link>http://blog.wimy.com/458</link>
      <description>&lt;h1&gt;업데이트&lt;/h1&gt;

&lt;p&gt;아래의 내용은 임시로 취해진 조치이며, 결국에는 Visual Studio 16.4 버전이 릴리즈되면서 해결되었다&lt;/p&gt;

&lt;h1&gt;예전&lt;/h1&gt;

&lt;p&gt;Visual Studio의 WPF Designer에서 내가 만든 UserControl을 추가했는데, 실행은 문제가 없는데 Could not load type xxxx 라면서 Designer에서 제대로 previwe가 안 될 때는, bin 폴더를 삭제하고, 다시 빌드 시켜본다. 뭔가 임시 파일에서 정보를 캐싱하는 게 있는지 삭제하고 빌드를 해야 인식하는 경우가 있다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/458</guid>
      <pubDate>Sun, 27 Oct 2019 15:25:00 GMT</pubDate>
    </item>
    <item>
      <title>구글 클라우드 쉘에서 VS Code 사용하기</title>
      <link>http://blog.wimy.com/457</link>
      <description>&lt;p&gt;구글 클라우드에서 돌아가는 toy project가 있어서 오랜만에 유지보수를 하려니, SDK 설치부터 너무 힘들었다. 그래서 좀 뒤져보다 보니, google에서도 Cloud Shell을 제공하고 있었고, Cloud Shell에는 이미 SDK 및 관련 툴들이 이미 설치되어 있어서 개발 환경을 구축할 필요없이 바로 개발을 이어갈 수 있었다.&lt;/p&gt;

&lt;p&gt;하지만 파일 편집 환경이 너무 불편해서 좀 더 찾아보니, Cloud Shell안에서 VS Code를 웹 서버로 띄워서 사용할 수 있다고 한다. &lt;a href="https://medium.com/google-cloud/how-to-run-visual-studio-code-in-google-cloud-shell-354d125d5748"&gt;https://medium.com/google-cloud/how-to-run-visual-studio-code-in-google-cloud-shell-354d125d5748&lt;/a&gt; 에서 해당 내용을 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;정리하자면 아래와 같다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cdr/code-server/"&gt;https://github.com/cdr/code-server/&lt;/a&gt; 라는 프로젝트가 VS Code를 웹 서버로 띄울 수 있도록 해준다&lt;/li&gt;
&lt;li&gt;Google Cloud Shell 안(!)에서 해당 프로젝트를 다운 받아서 압축을 해제한 후 실행한다. 그러면 8080를 통해서 VS Code를 서비스해준다&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Google Cloud Shell의 Web Preview 기능을 통해서 해당 포트를 연결하는 주소를 생성해주고 해당 주소를 통해서 VS Code 서비스에 접속해서 사용한다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;혹시나 'Not Found' 같은 오류가 난다면, 주소줄에서 xxxx.appspot.com 이후의 문자열들을 삭제한 주소로 접속하면 된다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;재미있는 것은 이렇게 열린 VS Code in WebBrowser를 통해서, Google Cloud Shell도 열 수가 있다는 것이다. 뭔가 현대적인 클라우드 컴퓨팅을 사용한다는 느낌이 팍팍 든다.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src="VSCodeInWebBrowser.png" alt="VS Code in WebBrowser" /&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/457</guid>
      <pubDate>Mon, 21 Oct 2019 14:39:00 GMT</pubDate>
    </item>
    <item>
      <title>[책 후기] 클린 소프트웨어</title>
      <link>http://blog.wimy.com/456</link>
      <description>&lt;p&gt;꽤 흥미롭게 읽었다. 꽤 두꺼웠지만, 하루에 한 챕터 혹은 힘들면 반 챕터씩 읽었다. 나에게 꾸준함을 다시 일깨워준 책이다.&lt;/p&gt;

&lt;p&gt;내용은 프로그램을 애자일 방법으로 설계하고 코딩 해나가는 방법에 대한 것이다. 나에게 많은 위로를 줬던 것이, 한번에 잘 설계할 수는 없다는 내용이다. 설계는 초기 설계가 있으면 당연히 코드가 자라면서 그 설계 방향과 형태는 계속 흔들리면서 자라나게 된다는 것이다. 한번에 설계를 잘하면 좋겠지만 다들 그렇게는 안된다고 한다. (다행이다. 나만 그런게 아니라...)&lt;/p&gt;

&lt;p&gt;주요 구문들을 정리해서 구글 문서(&lt;a href="https://docs.google.com/document/d/1SjjrAc3Hni2OFK3odyXBIZwLn1AR7KBXns5Pvjnwelo/edit?usp=sharing"&gt;https://docs.google.com/document/d/1SjjrAc3Hni2OFK3odyXBIZwLn1AR7KBXns5Pvjnwelo/edit?usp=sharing&lt;/a&gt;)에 올렸지만, 그 중에서도 많이 와 닿은 문장들을 적어본다&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;시스템에 대한 이해를 계속 유지하기 위해 지속적으로 코드를 읽고 소화한다&lt;/li&gt;
&lt;li&gt;애자일 선언문

&lt;ul&gt;
&lt;li&gt;프로세스와 툴보다 개인과 상호작용이 우선이다&lt;/li&gt;
&lt;li&gt;포괄적인 문서보다 동작하는 소프트웨어가 우선이다&lt;/li&gt;
&lt;li&gt;계약 협상보다 고객 협력이 우선이다&lt;/li&gt;
&lt;li&gt;계획을 따르는 것보다 변화에 대한 반응이 우선이다&lt;/li&gt;
&lt;li&gt;왼쪽 항목 각각에도 가치는 있지만, 우리는 오른쪽 항목에 더 가치를 부여한다는 뜻이다&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;그 필요가 급박하고 중요하지 않다면 아무 문서도 만들지 마라 - 마틴의 문서화 제1법칙&lt;/li&gt;
&lt;li&gt;테스트 케이스와 코드는 함께 진화하며, 테스트 케이스가 코드보다 아주 약간 앞서는 정도다. 이 방식은 리팩토링을 굉장히 용이하게 만든다&lt;/li&gt;
&lt;li&gt;어떻게든 동작하는 가장 단순한 것을 생각한다. DB없이 파일로 할 수 있다면 파일로 한다. 멀티스레딩 없이 현재 스토리를 구현할 수 있다면, 멀티스레딩을 포함시키지 않을 수도 있다. 그리고 실제로 구현할 수 있을 정도로 최대한 단순한 솔루션을 선택한다&lt;/li&gt;
&lt;li&gt;코드는 부패하기 쉽다. 기능 요소 다음에 또 기능 요소를 추가하고 버그 다음에 또 버그를 잡아나갈수록 코드 구조는 퇴화한다&lt;/li&gt;
&lt;li&gt;테스트를 먼저 작성함으로써, 프로그래머는 자신이 반드시 테스트 가능한 프로그램을 설계하도록 강제할 수 있다&lt;/li&gt;
&lt;li&gt;모든 소프트웨어 모듈에는 세 가지 기능이 있다. 동작하는 기능, 변경 기능, 읽는 사람과 의사소통하는 기능이다. 변경이 힘든 모듈은 망가진 것이다. 읽기 힘든 모듈도 망가진 것이다&lt;/li&gt;
&lt;li&gt;아무 악취도 나지 않을 때는 원칙을 적용하지 않는다. 그저 원칙이라는 이유만으로 무조건 따르는 것은 좋지 않다. 원칙에 대한 맹종은 불필요한 복잡성이란 설계의 악취로 이어진다&lt;/li&gt;
&lt;li&gt;현재 시점에서는 유용하지 않은 요소가 설계에 포함되어 있다면, 이 설계는 불필요한 복잡성을 포함하는 것이다&lt;/li&gt;
&lt;li&gt;요구사항의 변경 때문에 소프트웨어는 부패하지만, 프로그래머인 우리들 대부분은 요구사항이 프로젝트에서 가장 변덕스러운 요소임을 인식하고 있다. 만약 계속되는 요구사항 변경 때문에 설계가 실패한다면, 우리의 설계와 방식에 문제가 있는 것이다. 이런 변경에 대해서도 탄력적인 설계를 만드는 방식을 찾아야 한다&lt;/li&gt;
&lt;li&gt;SRP: 한 클래스는 단 한 가지의 변경 이유 만을 가져야 한다&lt;/li&gt;
&lt;li&gt;OCP: 확장에 대해 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 한다. 해결책은 추상화다&lt;/li&gt;
&lt;li&gt;LSP: 서브타입은 그것의 기반 타입으로 치환 가능해야 한다&lt;/li&gt;
&lt;li&gt;DIP: 상위 수준의 모듈은 하위 수준의 모듈에 의존해서는 안 된다. 둘 모두 추상화에 의존해야 한다&lt;/li&gt;
&lt;li&gt;ISP: 인터페이스 분리 원칙. 클라이언트가 자신이 사용하지 않는 메소드에 의존하도록 강제되어서는 안 된다&lt;/li&gt;
&lt;li&gt;순환을 끊으려녀 인터페이스를 만들어서 해결하거나 두 개의 패키지가 둘 다 의존하는 새로운 패키지를 만든다&lt;/li&gt;
&lt;li&gt;패키지 구조는 시스템이 성장하고 변화하면서 같이 진화하는 것으로 보인다&lt;/li&gt;
&lt;li&gt;애플리케이션이 계속 성장하면서 재사용 가능한 요소를 만드는 일도 고려하기 시작한다&lt;/li&gt;
&lt;li&gt;패키지 의존 관계 그래프는 조금씩 흔들리면서 성장한다&lt;/li&gt;
&lt;li&gt;어떤 패키지는 불안정하고 또 어떤 패키지는 안정적인 설계가 우리가 원하는 패키지 구조의 설계다&lt;/li&gt;
&lt;li&gt;패키지는 안정적인 만큼 추상적이기도 해야한다. 반대로 불안정한 패키지는 구체적이어야 한다&lt;/li&gt;
&lt;li&gt;팩토리 패턴은 큰 도움이 되지만 피하려면 피할 수도 있는 복잡함이다&lt;/li&gt;
&lt;li&gt;잦은 변경을 겪게 될지는 예상 할 수 밖에 없으며, 처음에는 간단하게 시작하고 필요에 따라 구조를 발전시키는 것이 가장 좋다&lt;/li&gt;
&lt;li&gt;어떤 모듈을 테스트하려면, 그 모듈을 시스템의 다른 모듈로부터 분리할 수 있어야 한다&lt;/li&gt;
&lt;li&gt;테스트를 먼저 생각해본 것이 설계에서 결합을 줄이는 일에 도움이 되었다&lt;/li&gt;
&lt;li&gt;이 세상에 충분한 분석 같은 것은 없다. 얼마나 잘 설계하든 고객이 언제나 그 구조를 망쳐버릴 새로운 변경사항을 들고 나온다는 사실을 알게 될 것이다.&lt;/li&gt;
&lt;li&gt;시간이 흐르면서 시스템에 대한 요구사항이 변경되면 이 구조들도 변경되어야 한다. 이런 변경들을 잘 해나갈 수 있는 비결은 시스템을 되도록 단순하고 유연하게 유지하는 것이다&lt;/li&gt;
&lt;li&gt;적어도 세 번 이상 그 프레임워크를 기반으로 애플리케이션을 구축해봐야(그리고 실패해봐야) 그 도메인에 맞는 올바른 아키텍처를 구축했다는 자신감이 그런대로 생길 수 있다 - 레베카 워프스-브록&lt;/li&gt;
&lt;li&gt;복잡성을 다루기 위해, 소프트웨어는 계층 구조로 설계된다&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/456</guid>
      <pubDate>Thu, 10 Oct 2019 14:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Hyper-V에서 네트워크가 제대로 되지 않을 때</title>
      <link>http://blog.wimy.com/455</link>
      <description>&lt;p&gt;언제부터인지는 모르겠지만, 윈도우 10 Pro 1903버전에서 Hyper-V를 통해 VM을 만들면 네트워크가 Default Switch라는 걸로 기본 설정이 되고, 이 설정으로 VM을 만들면 네트워크가 제대로 되지 않는다. 인터넷에서 검색해보면 이런 현상이 다른 사람들도 종종 겪고 있는 것 같은데, 이런저런 삽질 끝에 나는 아래의 방법으로 성공하였다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hyper-V 관리자에서 메인 메뉴 중 '동작 -&gt; 가상 스위치 관리자'를 열어서 '새 가상 네트워크 스위치'를 눌러서 '외부' 가상 스위치를 만든다&lt;/li&gt;
&lt;li&gt;기존의 VM이 실행 중이라면 종료한다&lt;/li&gt;
&lt;li&gt;기존의 VM에서 기존의 Default Switch 네트워크 어댑터를 제거하고 새로 만든 '외부' 가상 스위치를 연결한다&lt;/li&gt;
&lt;li&gt;&lt;p&gt;VM 재시작&lt;/p&gt;

&lt;p&gt;위와 같이 하면 VM안의 네트워크가 정상적으로 실행된다&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/455</guid>
      <pubDate>Wed, 09 Oct 2019 14:36:35 GMT</pubDate>
    </item>
    <item>
      <title>[게임 플레이 후기] Limbo</title>
      <link>http://blog.wimy.com/454</link>
      <description>&lt;p&gt;2019-06-17 Limbo 플레이 후기&lt;/p&gt;

&lt;p&gt;뭔가 있어보이는 분위기로 시작해서, 뜬금없이 퍼즐 게임인가 싶다가... 액션 퍼즐이 되는 게임... 나무위키의 '해설'을 보면 '그래... 그럴수도 있겠다' 싶긴 하지만, 퍼즐을 풀 때 너무 뜬금없는 것들이 있다. 중반까지는 꽤 재미있고 흥미진진하고, 분위기에 흠뻑 젖어드는데, 후반으로 갈수록 '너무 퍼즐인데...' 싶다. 분위기를 잘 이어나가면서 퍼즐에 힘을 조금 뺐으면 어땠을까 싶다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/454</guid>
      <pubDate>Sat, 05 Oct 2019 14:20:35 GMT</pubDate>
    </item>
    <item>
      <title>AMD CPU 컴퓨터에서 idle 상태에서 CPU가 사용되고 있을 때</title>
      <link>http://blog.wimy.com/453</link>
      <description>&lt;p&gt;최근에 AMD CPU를 가진 컴퓨터를 구입했는데, 이상하게도 idle 상태일 때 CPU가 계속 사용 중인 것처럼 나타났다. 이래저래 살펴보다 보니, 결국 CPU 꾸미는 소프트웨어가 문제였다.&lt;/p&gt;

&lt;p&gt;LightingService.exe 가 점유율을 많이 차지한다면. Aura app을 실행 한 후에 Off시켜봐라. CPU 그래프 1개가 완전 꺽이는 현상을 볼 수 있다. 아마 '무지개'를 켰을 때 계속 계산하기 위해서 인듯 싶다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/453</guid>
      <pubDate>Mon, 10 Jun 2019 14:20:35 GMT</pubDate>
    </item>
    <item>
      <title>Office 365 설치 중 멈춰있을 때</title>
      <link>http://blog.wimy.com/452</link>
      <description>&lt;p&gt;&lt;img src="Screenshot.png" alt="Office 설치 중" /&gt;&lt;/p&gt;

&lt;p&gt;Office 365 설치 중 특정 진행 단계에서 멈추는 경우가 있다. 작업 표시줄의 아이콘을 클릭하면 "백그라운드에서 Office 설치 중 (26%)"와 같이 표시되면서 더이상 퍼센트가 올라가지 않는 현상이 있다. 구글링해보니 이런저런 방법들이 있는 것 같지만, 나는 특이하게도 무선 네트워크를 유선 네트워크로 전화시켜보니 진행이 다시 시작되었다. 즉, 그냥 유선랜선을 꽂았더니 해결되었다. 전에도 이런 현상이 있어서, 프로세스를 강제로 종료시키고 다시 설치를 진행하기도 했었는데, 그냥 랜선을 꽂으면 되는 거였다. 아마 다운로드 속도가 너무 느리면, 이런 현상이 발생하는 것으로 추측된다.&lt;/p&gt;

&lt;p&gt;일단 노트북에서 멈춤 현상이 있는 분들은 먼저 랜선을 꽂아보시길...&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/452</guid>
      <pubDate>Sun, 02 Jun 2019 14:20:35 GMT</pubDate>
    </item>
    <item>
      <title>WPF MVVM 일주일 만에 배우기 - 책 소개</title>
      <link>http://blog.wimy.com/451</link>
      <description>&lt;p&gt;간만에 얇고 재미있게 본 책이 있어서 소개해 본다.&lt;/p&gt;

&lt;p&gt;&lt;img src="mvvm.jpg" alt="MVVM 일주일 만에 배우기" title="MVVM 일주일 만에 배우기" /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;얇다. 212페이지다&lt;/li&gt;
&lt;li&gt;C#이니, XML이니 이런거 알고 있다는 전제하에 WPF/MVVM이 뭐가 다른지 어떻게 쓰면 되는지를 핵심을 짚어서 설명해준다. 이게 정말 좋다&lt;/li&gt;
&lt;li&gt;&lt;p&gt;이런/저런 것들도 있긴 하지만 잘 쓰이지 않는다고 얘기해준다. 이런건 키워드가 기억해뒀다가 필요할 때 그 키워드로 구글링을 잘해서 쓰면 된다&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/zelon/wimygit"&gt;https://github.com/zelon/wimygit&lt;/a&gt; 를 만들어보면서 너무 대충 코딩했는데 이제 코드 정리를 어떤 식으로 해야하는지, WPF를 어떤 식으로 써야하는지 감이 잡혔다. 물론 좀 더 전문적인 책을 보면 좋겠지만, WPF의 핵심을 파악하는데는 무척 유용한 책이었다&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/451</guid>
      <pubDate>Sat, 02 Mar 2019 15:21:08 GMT</pubDate>
    </item>
    <item>
      <title>CD ROM에서 Audio CD를 인식하지 못해서 고생함</title>
      <link>http://blog.wimy.com/450</link>
      <description>&lt;p&gt;그냥 몇 일간 고생한 게 억울해서 글로 남겨본다.&lt;/p&gt;

&lt;p&gt;책을 사면, 오디오 시디를 주는 책들이 있고, 당연히 휴대폰이나 차에서 들으려고 mp3로 만들어서 듣는다. 요즘은 데스크탑PC에는 CD-ROM/DVD-ROM을 보통 장착하지 않고, 나같이 꼭 필요한 사람들은 휴대용(Portable) CD-ROM/DVD-ROM을 사서 필요할 때만 USB로 연결해서 쓴다. 그런데!!!&lt;/p&gt;

&lt;p&gt;이상하게 윈도우를 재설치한 이 후로 오디오 시디를 컴퓨터가 인식하지 못했다. 혹시나 해서 노트북에 휴대용 CD-ROM/DVD-ROM을 연결해도 오디오 시디를 인식하지 못했다. 사용하지 않던 데스크탑용 CD-ROM/DVD-ROM도 있었는데 이걸 연결해도 인식하지 못했다. 웃긴건 오디오 시디는 인식하지 못하는데 DVD는 인식해서 플레이도 잘 되었다. 당연히 다른 오디오 시디를 넣어도 안되고...&lt;/p&gt;

&lt;p&gt;혹~~~시나 해서 휴대용 CD-ROM/DVD-ROM을 하나 새로 사서 연결하니 잘 되었음 ㅠㅜ 결론은 휴대용 CD-ROM/DVD-ROM과 데스크탑용 CD-ROM/DVD-ROM 둘다 오디오 시디만 인식 못하는 문제가 있는 걸로 결론남.&lt;/p&gt;

&lt;p&gt;핵심: CD-ROM 기능과 DVD-ROM기능은 별개의 기능으로 별도로 고장날 수 있음. 물론 나의 PS3처럼 둘다 한번에 고장날 수도 있음&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/450</guid>
      <pubDate>Fri, 01 Mar 2019 14:10:08 GMT</pubDate>
    </item>
    <item>
      <title>윈도우10에서 미러링 중 &amp;#39;다시 동기화하는 중&amp;#39; 퍼센트가 나오지 않는 현상</title>
      <link>http://blog.wimy.com/449</link>
      <description>&lt;p&gt;윈도우10에서 RAID-1(Mirroring)으로 HDD를 사용 중인데, 어쩌다 디스크 관리에 들어가면 아래처럼 '다시 동기화하는 중(Resynching)'으로 나온다. 그런데 얼마나 동기화가 진행되었는지 그 퍼센트(아래에서 빨간 네모 안의 숫자)가 나오지 않는 경우가 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src="resynching.png" alt="다시 동기화하는 중" /&gt;&lt;/p&gt;

&lt;p&gt;한동안 그냥 지켜보다가 꽤 오래 컴퓨터를 사용해도 퍼센트가 나오지 않길래 답답한 마음에 구글링을 해보니 꽤 옛날 자료가 많고해서 좀 뒤져본 결과, 윈도우10에서는 저 상황이 벌어지면 F5를 눌러주면 된다. 몇 십초쯤 뒤에 잘 나온다... 뭔가 억울하지만 여튼 퍼센트 잘 나온다.&lt;/p&gt;

&lt;p&gt;#다시동기화하는중 #Resynching #F5&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/449</guid>
      <pubDate>Thu, 20 Dec 2018 15:27:08 GMT</pubDate>
    </item>
    <item>
      <title>갤럭시 노트8 사용기</title>
      <link>http://blog.wimy.com/448</link>
      <description>&lt;p&gt;갤럭시 노트8을 작년(2017년) 12월쯤 샀던 것 같다. 아내가 그 한달 전에 샀고, 나도 아이들의 사진과 동영상을 좀 더 좋은 품질로 찍어주고 싶어서 샀던 것 같다. 그 전에 쓰던 휴대폰은 구글의 레퍼런스 폰인 넥서스5(Nexus5)이다&lt;/p&gt;

&lt;p&gt;일단 좋은 점들이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;카메라는 좋다. 정확히 말하면 카메라로 찍은 사진의 품질과 해상도 그리고 버튼을 눌렀을 때 빠른 반응으로 찍힌다는 점이다. 그리고 어두운 곳에서도 그전 폰에 비해서 확실히 잘 나온다.&lt;/li&gt;
&lt;li&gt;펜은 꽤 좋은데, 지원해주는 앱들이 거의 없다. 삼성에서 만든 앱만 제대로 '펜'과 '터치'를 지원해준다. 하지만 삼성앱이 꽤 잘 만들긴했다&lt;/li&gt;
&lt;li&gt;&lt;p&gt;방수 기능. 노파심에 방수 커버를 씌워서 물놀이를 하긴 하지만, 확실히 안심된다&lt;/p&gt;

&lt;p&gt;이제부터 단점들이다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;무겁다. 커서 무겁다는 느낌보다도 더 묵직했다. 다행히 이건 쓰면 쓸수록 적응되긴 했다.&lt;/li&gt;
&lt;li&gt;엣지 스크린이라는, 좌우의 화면이 부드럽게 곡면이다. 이거 때문에 사기 싫을 정도였는데, 카메라 좋은 것을 찾다보니 어쩔 수 없이 선택했었다. 써보니 역시 싫다. 액정보호 필름도 잘 안 붙는다. 그냥 삼성이 기술력보이려고 했는데, 나는 엣지 스크린이 싫다. 주위에 물어보면 좋아하는 사람은 거의 없는듯... 한 2만원정도 더 주고서라도 빼고 싶은 기능&lt;/li&gt;
&lt;li&gt;지문 인식이 뒤에 있다. 기술적으로 어쩔 수 없다고 하지만, 정말 아쉽다. 그냥 홈버튼도 앞에 있고 지문 인식도 뒤에 있는게 훨씬 좋을 것 같다. 인식률이 문제가 아니라 그냥 뒤에 있어서 불편하다. 이것도 5만원쯤 더 주더라도 앞으로 돌리고 싶다&lt;/li&gt;
&lt;li&gt;삼성 페이. 안 쓰게 되더라. 지문인식이 불편한 것도 있고, 난 주로 교통카드로 쓰려고 했는데, 카드에 있는 교통카드 할인이 안되더라!!!!! 이 사실 알고 깜짝 놀랐었음. 그리고 교통카드 인식률도 실제 카드보다 낮아서 종종 실패함. 특히 마을버스에서 너무 잘 실패함. 참고로 어찌어찌하다보면 삼성 페이에서 막 마케팅 알림도 보내옴. 어찌어찌 메뉴에 잘 들어가서 막긴했음&lt;/li&gt;
&lt;li&gt;알림 표시줄의 아이콘들. 왜 KT아이콘과 HD아이콘이 계속 떠 있는지 도대체 이해할 수가 없다. 알림 표시줄이 뭔지를 모르는 것 같다. KT마크가 대체 어떤 정보를 가지고 있는가. 내가 KT망을 쓰는 줄 모르는 줄 아나... 불필요한 정보를 가진 건 빼는게 기본인데, 검색해보면 추노마크라고 불리면서 엄청 사용자들이 싫어하는 걸 삼성은 모르나보다. 그리고 통화할 때 좀 음질 좋게 통화하는 HD voice 기능이 켜져있다는 HD아이콘... 이거도 왜 항상 떠 있는지 모르겠다. 이런 아이콘 제거해준다면 2만원쯤 주고서라도 빼고 싶다&lt;/li&gt;
&lt;li&gt;안면 인식. 잘 안된다. 나처럼 안경 쓰고 있으면 더 잘 안된다. 없다 치자.&lt;/li&gt;
&lt;li&gt;참고로 보안툴이 깔려있어서 계속 감시를 하는데, 내가 만든 SMS 전달 앱을 악성 코드로 인식하더라. 관련 팀에 메일까지 보내서 풀기는 했는데, 대충 내용보니, 내가 앱 업데이트하면 또 악성 코드로 인식될 것 같다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;삼성은 혁신하기 힘들면 위의 단점들만 커버해서 제대로 내 놓아도 좋을 것 같다&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <guid>http://blog.wimy.com/448</guid>
      <pubDate>Fri, 27 Jul 2018 14:25:08 GMT</pubDate>
    </item>
    <item>
      <title>더이상 배우려 하지 않는 개발자 : Expert Beginner의 등장</title>
      <link>http://blog.wimy.com/447</link>
      <description>&lt;p&gt;좋은 글을 읽어서 공유한다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/@jwyeom63/%EB%8D%94-%EC%9D%B4%EC%83%81-%EB%B0%B0%EC%9A%B0%EB%A0%A4-%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90-expert-beginner%EC%9D%98-%EB%93%B1%EC%9E%A5-dd40c40aeedf"&gt;더이상 배우려 하지 않는 개발자 : Expert Beginner의 등장&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;뭐, 결론은 계속 공부하자. 자신이 알고 있는 것을 돌아보자 정도로 요약할 수 있겠다. 경력상 어느 정도 중반에 들어선 나에게 좋은 자극이 되는 글이다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/447</guid>
      <pubDate>Fri, 10 Nov 2017 13:13:19 GMT</pubDate>
    </item>
    <item>
      <title>여름 앱의 종료가 아쉽다</title>
      <link>http://blog.wimy.com/446</link>
      <description>&lt;p&gt;&lt;img src="Summer.png" alt="여름 서비스 종료" /&gt;&lt;/p&gt;

&lt;p&gt;여름이라는 앱이 종료되었다. 그렇게 많이 알려진 앱은 아니지만, SK텔레콤에서 제공했던 문자 앱이다. 구글에 '여름 문자 대체'를 검색해보면 꽤 많은 사람들이 이 앱을 잘 쓰고 있었음을 알 수 있다. 물론 나도 그 중의 한 사람이다.&lt;/p&gt;

&lt;p&gt;나는 넥서스5라는 기기를 사용하고 있는데, 구글에서 제공해주는 기본 문자앱이 영 마음에 들지 않아서 다른 문자앱을 찾아보고 있었는데, 다들 고만고만하기도 하고, 외국 앱이 우리나라의 MMS를 제대로 지원해주지 않을 것같고, T전화를 워낙 만족스럽게 쓰고 있었기 때문에 같은 회사에서 나온 '여름' 앱을 골랐었다. 그런데 앱 서비스가 종료되었다.&lt;/p&gt;

&lt;p&gt;사실 "T전화"가 꽤 인기가 있다. 기본적인 스팸 관리 기능이 사용자들에게 좋은 평가를 얻고 있으면서, SKT외에도 다른 사용자들에게도 사용하게 해준게 꽤 좋은 평가를 얻고 있는게 아닌가 싶다. 그래서 여름앱을 만족스럽게 쓰면서 자연스레 "이거 SKT에서 통신사의 새로운 기준을 제시하겠구나"라는 생각이 들었었다. 바로, 통신사에서 제일 잘할 수 있는, "전화와 문자 서비스"를 제대로 짚었기 때문이었다.&lt;/p&gt;

&lt;p&gt;T전화와 여름앱은 SKT에서 만들었지만, 모든 통신사들에서 쓸 수 있었다. 삼성에서 만든 휴대폰이든, LG, 구글에서 만든 휴대폰이든 SKT, KT, LGT를 쓰든, 모든 안드로이드 폰이 이 앱을 사용할 수 있었다. 정말 제대로 잘 만든다면, 전세계 모든 안드로이드 앱의 전화와 문자앱을 SKT에서 먹어버릴 수 있는 상황이었다. 특히 T전화는 삼성에서도 T전화를 벤치마킹한다는 말이 나올 정도였다.&lt;/p&gt;

&lt;p&gt;만약 이렇게 계속 영향력을 넓혀서 문자 시장에서도 최고자리를 차지한다면, 자연스럽게 다른 앱으로 영향력을 넓힐 수 있을 것이었다. 예를 들면, 구글의 inbox처럼 문자를 할 일 목록처럼 관리해서 개인비서나 노트앱 시장을 노려본다와 같은 시도를 해볼 수 있었을 것이다.&lt;/p&gt;

&lt;p&gt;사실 딱히 돈이 안되고, 당장 눈에 보이는 성과가 없으니 서비스를 종료하지 않았나하는 생각이 든다. 특히 문자 시장은 저물어가는 시장으로 인식되어서 그런가 싶다. 하지만 이 상황에서도 통신사가 본의아니게 우위를 점하고 있는게 사실 전화와 문자이다. 역설적이지만, 카카오톡과 같은 메신저들이 득세를 해도 모든 휴대폰에는 문자앱이 설치되어 있다. 그리고 아직까지는 많은 서비스들(카드 결제 알림, 공과금 안내 등)이 문자를 통해서 이루어지고 있다. 앞에서 얘기한 것처럼 T전화가 전화 서비스를 제대로 제공하고 사용자들에게 다가가는데 성공했다면, 자연스레 문자앱 시장에서도 성공하는게 당연한 수순으로 보였다.&lt;/p&gt;

&lt;p&gt;한국 통신사에서 재미난 사업 방향을 제시한 것 같았는데 아니어서 아쉽고, 사용자 입장에서 괜찮은 앱 하나가 사라져서 아쉽다. 여름 앱의 종료는 정말 아쉽다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/446</guid>
      <pubDate>Sat, 23 Sep 2017 14:28:59 GMT</pubDate>
    </item>
    <item>
      <title>블로그 이전 및 WimyBlog 소개</title>
      <link>http://blog.wimy.com/445</link>
      <description>&lt;p&gt;블로그를 이사했다. 티스토리가 백업을 중지한 후부터 언젠가는 티스토리를 떠나야겠다라고 생각하고 있었는데, 이런저런 생각을 해보다가 github로 가자는 결론을 내렸고 정적 페이지로 블로그를 만들어야겠다고 생각하고 있었다. 하나 걸리는 것이 github의 공식적인 블로그툴이 Jekyll 이라는 툴인데, 루비 언어로 만들어져있었고, 조금 들여다보니 '정적인 페이지들인데 간단히 만들 수 있지 않을까' 라는 생각에 직접 만들기 시작했다.&lt;/p&gt;

&lt;h1&gt;WimyBlog&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/zelon/WimyBlog"&gt;WimyBlog on github&lt;/a&gt;에 C#, .NET Core 2.0에서 동작하는 소스를 올려두었다. 참고로 이 블로그는 &lt;a href="https://github.com/zelon/blog.wimy.com"&gt;blog.wimy.com on github&lt;/a&gt;에 소스가 있다. 즉, &lt;a href="https://github.com/zelon/blog.wimy.com"&gt;blog.wimy.com on gihub&lt;/a&gt;에 markdown 형식으로 글을 쓰고, &lt;a href="https://github.com/zelon/blog.wimy.com"&gt;WimyBlog on gihub&lt;/a&gt;를 실행해서 html들을 뽑아내게 된다&lt;/p&gt;

&lt;p&gt;그냥 기존처럼 파이썬이나 Go를 쓰지 않고, 정적인 페이지들을 만들면 되니까 어떤 언어를 써도 상관은 없었는데, C++ 다음으로 관심이 많은 C#을 좀 더 써보기로 하고, 최신(!) 트렌드인 .NET Core로 만들어보기로 했다. 1.1에서 만들었는데, 도중에 2.0이 나와서 업데이트. Microsoft에서 한창 밀고 있는 .NET Core가 어떤지 궁금하기도 했다.&lt;/p&gt;

&lt;h1&gt;장점: github에서 직접 markdown으로 글 작성 가능&lt;/h1&gt;

&lt;p&gt;Markdown이 글의 원본이다. github.com에서 원래 웹 브라우저에서 Repository에 파일을 생성할 수 있고, Markdown파일의 경우 꽤 편리하게 편집할 수 있기 때문에, 웹에서 글을 편집할 수 있고, 글 배포를 위해서 정적 페이지를 만들 때만 git pull을 한 후 정적 파일들을 만들어내게 되었다. 꽤 좋은 장점이 될듯. 물론 로컬에서 직접 Atom Editor에서 preview를 보면서 편집하는 것도 편하다&lt;/p&gt;

&lt;h1&gt;장점: Local Web Server&lt;/h1&gt;

&lt;p&gt;사용성 입장에서 생각해보면 index.md는 Atom Editor에서 preview를 보면서 편집할 수 있지만, 정적 페이지는 실제로 github에 push를 해야만 볼 수 있다. 그냥 웹 브라우저에 html을 드래그하면 상대 경로나 절대 경로 때문에 css를 제대로 못 가져오거나, 링크가 제대로 연결되지 않는다. 그래서 간단한 웹 서버를 내장하면 layout이나 css편집이 쉬워질 것 같아서 웹 서버를 추가했다. .NET Core에서는 기존의 간단한 방식의 C# Console로는 작성이 안되고(HttpListener클래스가 없어졌음;;) ASP.NET Core로 프로젝트를 만들어야 된다. 실제로 만들어보니 꽤 간단한 코드로 동작이 되어서 만족스러움. 이 로컬 웹 서버 덕분에 github에 push하지 않아도 css, html 편집을 쉽게 할 수 있다&lt;/p&gt;

&lt;h1&gt;참고: github의 정적 페이지 서비스 방식&lt;/h1&gt;

&lt;p&gt;특정 디렉토리에 index.md, index.html이 있으면 해당 디렉토리의 url을 요청했을 때, index.html을 먼저 보여주고, index.xml도 바로 서비스 해준다. 즉, blog.wimy.com/5 라는 디렉토리에 index.md와 index.html 파일이 있으면 항상 index.html 파일을 보여준다. 그래서, index.md는 원본이 되고, 서비스하는 파일은 index.html 파일이 되도록 구성했다. 그래서 하나의 글은 하나의 디렉토리 아래에 모을 수 있었다. 글에 embed된 이미지 파일이나 metadata 파일도 하나의 디렉토리에 모이도록 구성했다.&lt;/p&gt;

&lt;p&gt;그리고 rss를 위해서 조사해보니, index.xml도 바로 서비스를 해줬다. 글들을 모은 후에 rss 형식으로 rss 디렉토리 아래에 index.xml 파일을 만들어주면 blog.wimy.com/rss 서비스를 할 수 있었다.&lt;/p&gt;

&lt;h1&gt;참고: index.md 에서 github 형태로 index.html로 변환&lt;/h1&gt;

&lt;p&gt;pandoc을 이용하면 github 문법으로 index.html로 변환해준다&lt;/p&gt;

&lt;h1&gt;참고: RSS&lt;/h1&gt;

&lt;p&gt;아무래도 나도 다른 블로그의 글을 항상 feedly로 rss를 통해서 보기 때문에 rss를 달지 않을 수 없었다. 티스토리의 rss와 공식 스펙을 보면서 그대로 구현했다. 딱히 어려운 점은 없었고, GMT 시각으로 변환하는 점만 주의하면 끝&lt;/p&gt;

&lt;h1&gt;참고: 기존 데이터의 이전&lt;/h1&gt;

&lt;p&gt;전체 들인 시간 중에 가장 많은 공을 들인 부분. 기존 티스토리 백업 파일(xml)에서 index.md 파일들을 뽑아내는 것이었다. 검색을 해보면, 3~4가지의 포스팅과 소스 파일이 나오는데, 내가 원하는 형태가 없었다. php라든지, 첨부 파일을 고려하지 않았다든지.. 그래서 직접 만들어봤다. &lt;a href="https://github.com/zelon/TistoryConvertor"&gt;TistoryConvertor on Github &lt;/a&gt;에 소스를 올려두었다. 사실 한번만 제대로 실행되고 버려질 프로젝트이지만 ㅠㅜ&lt;/p&gt;

&lt;h1&gt;에필로그&lt;/h1&gt;

&lt;p&gt;티스토리의 데이터 복원 기능 종료가 2013년이었다고 하니, 거의 4년을 마음 속에만 간직한 작업을 이제야 끝냈다. 물론 기능은 너무 미미하지만, 대학교 때 처음 php로 내 전용 게시판을 만들 때처럼 감회가 새롭다. 덕분에 .NET Core를 좀 써볼 기회가 있었고, 유닛테스트를 제법 고려한 코딩을 해보기도 했다. 앞으로 WimyBlog에 얼마나 더 시간을 쓸 수 있을지는 모르겠지만, 대부분의 개인 프로젝트가 그렇듯이 즐거운 마음으로 시작했고, 재미있게 코딩해서 좋았던 것 같다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/445</guid>
      <pubDate>Sat, 26 Aug 2017 14:28:17 GMT</pubDate>
    </item>
    <item>
      <title>[책후기] 게임 프로그래밍 패턴</title>
      <link>http://blog.wimy.com/444</link>
      <description>&lt;p&gt;&lt;img src="GameProgrammingPattern.jpg" alt="GameProgrammingPattern" /&gt;&lt;/p&gt;

&lt;p&gt;한참 회사 일에 여유가 있을 때 읽기 시작했는데, 갑자기 엄청나게 바빠져서 미뤄두다가, 찝찝함을 견디지 못하고 다시 읽기 시작해서 끝까지 읽게 되었다.&lt;/p&gt;

&lt;p&gt;일단 책의 내용은 너무 와닿는다. 전혀 추상적이지 않고, 짤막한 예제들로 이루어져 있어서 술술 읽힌다. 그리고 책도 두껍지 않다;; 게임 프로그래밍을 하고 있는 입장에서는 필독서라고 불릴만한 것 같다.&lt;/p&gt;

&lt;p&gt;다른 책들은 읽으면서 요점들을 구글 문서에 정리했었는데, 이 책은 정리할 수가 없었다. 한번 읽은 후에는 제목만 봐도 무슨 얘기를 하는지 알 정도의 자세한 설명이 있기 때문이다. 정리를 꼭 해야 한다면 책을 베끼는 수준이 될지도...;&lt;/p&gt;

&lt;p&gt;전반적으로 패턴들을 소개하면서, 해당 패턴의 장점뿐만 아니라 단점도 소개하면서 해당 패턴을 사용할 때 어떤점들을 고려해야 하는지에 대해서 자세히 설명되어 있는 부분이 특히 좋았다.&lt;/p&gt;

&lt;p&gt;게임 프로그래밍을 한다면 다들 읽어보시길...&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/444</guid>
      <pubDate>Sat, 29 Jul 2017 09:16:23 GMT</pubDate>
    </item>
    <item>
      <title>[책후기] 훌륭한 프로그래머 되는 법</title>
      <link>http://blog.wimy.com/443</link>
      <description>&lt;p&gt;책 제목부터가 멋지다 '훌륭한 프로그래머 되는 법'. 나는 스스로 훌륭한 프로그래머라고 생각하지만 늘 그렇지 않다는 사실을 깨달으며 살고 있기 때문에, 대체 어떻게 하면 훌륭한 프로그래머가 될 수 있을까를 고민하며 책을 읽기 시작했다.&lt;/p&gt;

&lt;p&gt;내가 가장 많이 느낀 건, 코드에 신경을 쓰라는 것이다. 오랜 코딩에 익숙해져 너무나 당연히 한줄한줄 쓰는 코드를 돌아보는 계기가 되었다. 어떤 일이 주어지면 주욱 코드를 적어내는데, 이제는 다시 한번 이렇게 코딩하는 것이 맞는 것인가, 아니면 더 좋은 방법이 있는가, 이 코드가 최선인가라는 생각을 한번쯤은 하면서 코딩을 하게 되었다.&lt;/p&gt;

&lt;p&gt;책 내내 유닛테스트의 중요성에 대해서 강조한다. 이 책을 읽으면서 테스트 케이스를 가능하면 만들려고 노력하게 되었다. 그 덕분에 조금이나마 테스트 가능한 코드에 대한 고민을 더 하게 되었고, 그에 기반하여 조금 더 자신감있는 리팩토링을 할 수 있게 되었다. 사실 유닛 테스트는 다른 책들에서도 항상 강조하는 것이었는데, 이 책을 보면서 다시 한번 마음 잡고 습관화하려고 노력하고 있다.&lt;/p&gt;

&lt;p&gt;책의 많은 부분이 마음가짐에 대한 것이다. 실수를 해도 용기를 내고, 이렇게 하는 것이 우울함에 빠져있는 것보다 더 나은 방법이라는 등, 프로그래머의 삶에서 중요한 마음가짐과 태도에 대한 얘기가 많다.&lt;/p&gt;

&lt;p&gt;프로그래머라면 한번쯤 읽어볼만한 좋은 책인 것 같다. 그리고 꽤 얇다 :)&lt;/p&gt;

&lt;p&gt;이 책을 읽으며 메모한 내용을 &lt;a href="https://docs.google.com/document/d/e/2PACX-1vQxjG3v1QNhYCUqpJEVlediT902t0-zcU4a0iMT7KDNIHmcT6Qty_2CYOI3cde1yogz62tzRbQyP6-_/pub"&gt;구글 문서&lt;/a&gt;에 공유한다&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/443</guid>
      <pubDate>Tue, 18 Jul 2017 14:12:23 GMT</pubDate>
    </item>
    <item>
      <title>미니멀리즘 책을 읽고 실행하다</title>
      <link>http://blog.wimy.com/442</link>
      <description>&lt;p&gt;회사에서 eBook 대여를 해주기 시작하면서, 아내가 관심있어하고, 직장 동료도 관심을 가지고 실천해서, 미니멀리즘 관련 책을 3권쯤 읽어봤다.&lt;/p&gt;

&lt;p&gt;"나는 단순하게 살기로 했다", "버리면 버릴수록 행복해졌다", "미니멀라이프 아이디어 55"&lt;/p&gt;

&lt;p&gt;기본은 불필요한 물건을 버리기. 버리면 공간이 넓어진다. 버린 후 남겨진 물건들에 집중하게 된다. 모든 물건들은 메시지를 보낸다고 한다. "날 좀 봐줘!! 날 언제쓸꺼야! 난 잊어버린거야?" 이런 메시지들이 여기저기서 받게 되면, 우리는 은연 중에 스트레스를 받게 된다.&lt;/p&gt;

&lt;p&gt;나는 기본적으로 쇼핑을 즐기지 않고, 뭔가를 막 사모으는 사람은 아니지만, 뭔가를 정말 버리지 못하는 사람인 건 확실했다. 그런데 버리기 시작하니 기분이 좋다. 뭔가 마음의 짐을 버리는 느낌이다.&lt;/p&gt;

&lt;p&gt;책을 읽고나서, 많은 물건들을 필요한 사람에게 주고, 팔고, 버렸다. 특히 읽지도 않고 쌓아두던 많은 책들을 버렸다;; 그랬더니, 남은 책들은 열심히 읽기 시작했다. 그리고 버려두었던 블로그에도 다시 글을 쓰기 시작했다.&lt;/p&gt;

&lt;p&gt;버릴 것들을 정리하면서, 쓸 수 있는 것들을 다시 확인해보니, 넥서스7가 있었다. 이제 넥서스7을 들고다니면서 eBook을 퇴근길에 보기 시작했다. 하루에 조금이라도 더 책을 읽기 시작하니, 삶에 활력이 더해지는 느낌이다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/442</guid>
      <pubDate>Tue, 04 Apr 2017 14:23:23 GMT</pubDate>
    </item>
    <item>
      <title>Clean Code를 읽다</title>
      <link>http://blog.wimy.com/441</link>
      <description>&lt;p&gt;&lt;img src="CleanCode.jpg" alt="CleanCode" /&gt;&lt;/p&gt;

&lt;p&gt;Clean Code를 읽었다. 육아에 지치고, 컴퓨터에 앉으면 코딩을 우선시하느라 당분간 책을 못 읽었었는데, 마음잡고 하루에 1챕터씩 읽어내려갔다. 하루에 1챕터라는 목표를 정하고, 애들 재우고 나와서 무조건 책을 읽고 다른 일을 시작한다고 정하니 확실히 목표를 달성할 수 있었다.&lt;/p&gt;

&lt;p&gt;책 내용은 코딩의 전반적인 권장 사항에 관해서이다. 결론을 요약하자면, "읽기 좋게 코드를 짜라. 테스트 코드를 짜라. 시간을 들여서 코드를 재검토해라"로 요약해볼 수 있겠다. 알면서도 지키지 못했던 부분들을 꼬집는 내용을 읽을 때마다 뜨끔뜨끔했다;; 그리고 어렴풋이 그러리라 생각했던 부분들을, 왜 그런지, 어떻게 해야하는지를 명확히 적어놓은 부분들이 많았다. 꼭 몸에 익히도록 해야겠다.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.google.com/document/d/1jLGEkWy5V7CCus5gWjioVJNMoAk3aBgRJHVISuA_hnE/pub"&gt;구글 문서에 정리한 내용 링크&lt;/a&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/441</guid>
      <pubDate>Tue, 04 Apr 2017 14:07:16 GMT</pubDate>
    </item>
    <item>
      <title>나의 프로그래밍 언어 선택 기준</title>
      <link>http://blog.wimy.com/437</link>
      <description>&lt;p&gt;언젠가 한번 글로 정리해봐야지 하던 것을 한번 적어본다.&lt;/p&gt;

&lt;p&gt;내가 처음 hello world를 모니터에 띄워본지 꽤 되었기 때문에, 지금은 어느 정도 쓸 수 있다고 생각하는 언어가 몇 개 있다. C++, Python, C#, Java, Go, Javascript 정도가 있다. 물론 언어마다 숙련도가 꽤 차이가 난다.&lt;/p&gt;

&lt;p&gt;어떤 새로운 프로그램을 만들 때 어떤 기준으로 언어를 고를까를 생각해보다가, 나에게는 2가지의 기준이 있다는 생각이 들었다.&lt;/p&gt;

&lt;h1&gt;Garbage Collection&lt;/h1&gt;

&lt;p&gt;먼저 Garbage Collection 이 있느냐 없느냐이다. 이 기준은 성능에 민감한, 특히 온라인 게임 서버 중 필드 던전(불특정 다수가 만나서 전투를 할 수 있는 공간)을 랙 없이 구현할 수 있는 언어이냐 아니냐를 판단하는 기준이 된다. 쉽게 생각해서 Garbage Collection이 동작하게 되었을 때, 전투가 벌어진다면, 버벅이게 될 것이기 때문이다. 그래서 Garbage Collection이 있는 언어는 이런 서버를 제작할 때는 배제되어야 한다. &lt;/p&gt;

&lt;p&gt;그래서, 이런 서버를 만들 때는 C++을 쓸 수 밖에 없을 것 같다. Rust라는 언어가 최근에 나온 언어 중에는 Garbage Collection이 없다고 하는데, 아직 한번도 안 써봐서, 기회가 온다면 한번 살펴봐야 겠다.&lt;/p&gt;

&lt;h1&gt;동적 타입 vs 정적 타입&lt;/h1&gt;

&lt;p&gt;그리고 또 하나의 기준은 동적 타입이냐, 정적 타입이냐이다. 동적 타입인 python+Javascript로 약 4천줄의 코드를 5년 정도 유지보수하면서 느낀 것은 컴파일을 하면 쉽게 잡히는 버그들을 실행시간에 만나게 된다는 것이다. 그냥 함수 이름을 하나 더 알아보기 쉽게 바꾸었는데, 혹시나 내가 검색하지 못한 곳에서 참조하고 있을까봐 전전긍긍하게 되거나, 변수 하나 삭제했는데, 테스트 못한 케이스가 있을까봐 조바심을 낸다. 혹시나 이런 경우는 유닛 테스트를 잘 짜지 못해서 그렇다고 할 수도 있지만, 글쎄, 많은 케이스들을 로직 검증을 위해서가 아닌, code coverage 테스트를 위해서 하나하나 유닛 테스트로 짜고 있는 자신을 보고 있으면, 내가 왜 이러고 있나라는 생각이 든다.&lt;/p&gt;

&lt;p&gt;그래서, 동적 타입의 스크립트 언어(pytho, javascript등)는 실행시켰을 때, if/for/while 등의 조건 분기가 없는 코드를 짜는 것 정도는 납득할만하다. 어차피 한번 실행시키면 대부분의 코드가 테스트되기 때문이다. 그 외에 복잡한 로직이 들어가고 depth가 깊어지는 코드라면 동적 타입의 언어는 버리자. 사실 이렇게 생각하면, python을 쓸 수 없는데, 그자리를 go언어와 C#스크립트(Visual Studio 2015 Update3이상 설치)가 이제 그 대안이 될 수 있을 것 같다. 그리고 javascript의 경우에는 typescript를 통해서 컴파일해낸 javascript를 사용하게 될 것 같다.&lt;/p&gt;

&lt;h1&gt;나의 결론&lt;/h1&gt;

&lt;p&gt;python 이제 봉인하자&lt;/p&gt;

&lt;p&gt;javascript는 typescript로 컴파일해내서 쓴다&lt;/p&gt;

&lt;p&gt;스크립트는 가능하면 C# script, cross platform은 go언어&lt;/p&gt;

&lt;p&gt;랙없어야 하는 서버는 C++. 시간나면 rust 잠깐 봐두자&lt;/p&gt;

&lt;p&gt;랙이 큰 문제없는 서버는 내가 만들 일이 거의 없긴 한데, C#을 기본으로 하고, java를 보는게 어떨까 고민 중...&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/437</guid>
      <pubDate>Wed, 28 Sep 2016 14:43:47 GMT</pubDate>
    </item>
    <item>
      <title>[책소개] 코딩을 지탱하는 기술</title>
      <link>http://blog.wimy.com/436</link>
      <description>&lt;p&gt;예전에 재미있게 읽었던 책인데, 제목만 적어놓고 내용이 없었다...;&lt;/p&gt;

&lt;p&gt;마치 프로그래머의 교양서 같은 느낌의 책으로, 짬짬이 공부는 하기 싫고(!) 뭔가 책 읽고는 싶을 때 읽어보면 재밌게 읽을 수 있을 것 같다. 게다가 책이 얇기(270페이지)까지 하다.&lt;/p&gt;

&lt;p&gt;왜 프로그래밍 언어가 이렇게 발달해왔는지, 우리가 무심코 사용하는 프로그래밍 기법들이 어떻게 생겨났는지에 대한 얘기를 재미있게 해준다.&lt;/p&gt;

&lt;p&gt;프로그래머라면 한번쯤 읽어볼만하다.&lt;/p&gt;

&lt;p&gt;&lt;img src="book.jpg" alt="코딩을 지탱하는 기술" /&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/436</guid>
      <pubDate>Fri, 08 Jul 2016 00:53:31 GMT</pubDate>
    </item>
    <item>
      <title>대체 누가 내 스택에 숫자 2를 적었나</title>
      <link>http://blog.wimy.com/435</link>
      <description>&lt;p&gt;&lt;a href="http://blogs.unity3d.com/kr/2016/04/25/debugging-memory-corruption-who-the-hell-writes-2-into-my-stack-2/"&gt;http://blogs.unity3d.com/kr/2016/04/25/debugging-memory-corruption-who-the-hell-writes-2-into-my-stack-2/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;갑자기 스택에 이상한 값이 쓰여지는 현상을 디버깅하는 과정을 정리한 글. 과정을 따라가는 것이 흥미롭다.&lt;/p&gt;

&lt;p&gt;결론은 시스템 콜 안에서 예외가 발생해서 unwinding 되었고, 콜 안에서 사용된 스택 변수의 값이 뒤늦게 세팅되어서 발생되었다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/435</guid>
      <pubDate>Wed, 18 May 2016 09:36:17 GMT</pubDate>
    </item>
    <item>
      <title>[영화감상] 하늘에서 음식이 내린다면</title>
      <link>http://blog.wimy.com/434</link>
      <description>&lt;p&gt; 하늘에서 음식이 내린다면2가 있길래, 우와 1편이 꽤 재미있었나보다. 애들이랑 같이 봐야지하고 빌렸는데, 애들이랑 같이보면서, 정작 내가 엄청 신나게 봤다.&lt;/p&gt;

&lt;p&gt; 하늘에서 비가 아닌 음식이 내리면 어떻게 될까라는 생각에서 시작된 영화인데, 정말 재미있는 상황들이 벌어진다. 가족애, 멜로, 액션, (말도 안되는)과학, 자기 개발(?) 등 다양한 재미를 준다. 후반부를 볼 때, 애들이랑 저녁 먹으면서 봐서, 윈도우10에 DVD Player App 을 설치하면서 까지 다시 뒷장면을 제대로 봤다. 애들이 있다면 강추~&lt;/p&gt;

&lt;p&gt; 내가 봤을 때는 포탈, 스타워즈, 모탈컴뱃, 반지의 제왕 정도의 오마주가 있었다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/434</guid>
      <pubDate>Sun, 08 May 2016 12:31:05 GMT</pubDate>
    </item>
    <item>
      <title>유니티 클라우드 빌드에서 만든 app 이 유니티 로그 화면에서 멈출 때</title>
      <link>http://blog.wimy.com/433</link>
      <description>&lt;p&gt; 집에서 종종 unity 만지면서 놀다가, 유니티 클라우드 빌드를 써보기로 하고 간단히 설정해서 써봤는데, 로컬에서 빌드하면 잘 시작되는데, 유니티 클라우드 빌드에서 빌드한 apk 를 받아서 실행하면 유니티 로그 화면에서 멈추는 것이다. 이 문제로 고생하다가 해결하려고 마음 먹고 adb 로 로그를 찍어봐도 별 이상없고 해서 유니티 클라우드 빌드 웹페이지의 설정 화면을 살펴보니, 해결할 수 있었다.&lt;/p&gt;

&lt;p&gt; Config -&amp;gt; Show Advanced Options -&amp;gt; Edit Advanced Options 클릭 -&amp;gt; Scene List 에 본인의 Scene 파일 이름(예를 들면 Default)를 적고 Add 버튼을 누른 후 저장하자. 아마 제대로 된 경로(Assets/Default.unity)를 보여줄 것이다. &lt;/p&gt;

&lt;p&gt; 즉, 클라우드 빌드 시에 기본으로 시작할 scene 을 지정해주지 않아서 발생한 문제였다(사실 이걸 왜 굳이 설정해줘야 하는지는 의아하지만;;). 여튼 이제 다시 빌드를 후 apk 를 설치해보자. 잘 시작된다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/433</guid>
      <pubDate>Mon, 25 Apr 2016 15:30:33 GMT</pubDate>
    </item>
    <item>
      <title>동방불패를 보다</title>
      <link>http://blog.wimy.com/432</link>
      <description>&lt;p&gt;이제야 영화 '동방불패' 를 봤다. 1992년 작품이다. 아는 형이 '동방불패'를 외치며 뛰어다닐 때도 그러려니 하고 있었는데, 난 명작 영화를 놓친 게 너무 많다. 돌이켜보면 사실 저 시대에는 난 국민학교 6학년이었고, 그 나이가 볼 영화도 그 당시에 볼 환경도 아니었던 것 같다.&lt;/p&gt;

&lt;p&gt; '양들의 침묵' 을 봤을 때 느꼈던, 그 이후에 나온 많은 영화들이 그 모티브를 가져와서 너무 식상해진 명작 영화를 보는 느낌이었지만, 동방불패는 지금봐도 꽤 볼만하다는 느낌이었다. 동성애와 원수와의 사랑이 적절하게 녹아있고, 오랜 만에 봐서인지 중국식 칼싸움 액션(!)이 꽤 멋있다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/432</guid>
      <pubDate>Mon, 07 Mar 2016 13:14:00 GMT</pubDate>
    </item>
    <item>
      <title>한국에서 appengine 응답이 느린 이유는 위치 때문이다</title>
      <link>http://blog.wimy.com/431</link>
      <description>&lt;p&gt;뭐 당연한 얘기일 수도 있는데, go언어를 appengine 으로 개발하면서 로컬에서 띄운 서버인데도 1초 정도 걸렸다. 너무 느려서 stackoverflow 에 질문했더니... &lt;a href="http://stackoverflow.com/questions/33942583/too-slow-ttfblatency-with-go-language-in-appengine/" class="uri" class="tx-link"&gt;&lt;a href="http://stackoverflow.com/questions/33942583/too-slow-ttfblatency-with-go-language-in-appengine/"&gt;http://stackoverflow.com/questions/33942583/too-slow-ttfblatency-with-go-language-in-appengine/&lt;/a&gt;&lt;/a&gt; 실서버에서는 괜찮을거라고...&lt;/p&gt;

&lt;p&gt;근데 나는 실서버에 올려도 느려서 혹시나 하고 developer console 에서 확인해보니 appengine 의 위치가 us-central 이다. 그래서 azure 를 통해서 가상 컴퓨터를 미국 중부에 만들어서 접속해보니 37ms 안에 응답이 시작되었다. 역시...&lt;/p&gt;

&lt;p&gt;appengine 을 쓸 때는 빠른 응답을 기대하고 쓰면 안되겠군.&lt;/p&gt;

&lt;p&gt;테스트 사이트 : &lt;a href="http://test-try-go.appspot.com/" class="uri" class="tx-link"&gt;&lt;a href="http://test-try-go.appspot.com/"&gt;http://test-try-go.appspot.com/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;소스 코드 : &lt;a href="https://github.com/GoogleCloudPlatform/appengine-try-go" class="uri" class="tx-link"&gt;&lt;a href="https://github.com/GoogleCloudPlatform/appengine-try-go"&gt;https://github.com/GoogleCloudPlatform/appengine-try-go&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/431</guid>
      <pubDate>Sat, 28 Nov 2015 02:53:14 GMT</pubDate>
    </item>
    <item>
      <title>TubeEnglish 를 소개합니다</title>
      <link>http://blog.wimy.com/430</link>
      <description>&lt;p&gt;Google Hackfair 에 내려고 만들었는데, 안타깝게도 전시회에는 못 나가게 되었음 ㅠㅜ 마무리하는 의미로 블로그에 소개글 남겨본다.&lt;/p&gt;

&lt;p&gt;메인 주제는 YouTube 를 통한 영어 공부를 할 때 도움이 되는 웹앱이다.&lt;/p&gt;

&lt;p&gt;&lt;img src="tube_english.png" width="700" height="524" /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;다음과 같은 기능이 있다.&lt;/p&gt;

&lt;p&gt;* 구간 반복&lt;/p&gt;

&lt;p&gt;* 속도 조절&lt;/p&gt;

&lt;p&gt;* 5초/10초 앞으로 가기&lt;/p&gt;

&lt;p&gt;* 자막 켜고 끄기&lt;/p&gt;

&lt;p&gt;* 사전 연동&lt;/p&gt;

&lt;p&gt;소개 동영상 주소는 &lt;a href="https://www.youtube.com/watch?v=_UVfek-zRqE" class="uri" class="tx-link"&gt;&lt;a href="https://www.youtube.com/watch?v=_UVfek-zRqE"&gt;https://www.youtube.com/watch?v=_UVfek-zRqE&lt;/a&gt;&lt;/a&gt; 이다.&lt;/p&gt;

&lt;p&gt;홈페이지 주소는 &lt;a href="http://tube-english.appspot.com/" class="uri" class="tx-link"&gt;&lt;a href="http://tube-english.appspot.com/"&gt;http://tube-english.appspot.com/&lt;/a&gt;&lt;/a&gt; 이다. 여기서 검색 창에 YouTube 주소를 붙여넣고 검색하면 위의 화면처럼 로딩되면서 앞의 기능들을 사용할 수 있다. 크롬 웹브라우저에서는 &lt;a href="https://chrome.google.com/webstore/detail/bcojlbpjgjmaniipjelppbehhfhankcb/publish-accepted?hl=ko&amp;amp;utm_source=chrome-ntp-launcher" class="tx-link"&gt;[플러그인]&lt;/a&gt; 을 설치하면 YouTube 에서 동영상을 보다가 원클릭에 갈 수 있다.&lt;/p&gt;

&lt;p&gt;오픈소스이며 주소는 &lt;a href="https://github.com/zelon/youtube-english" class="uri" class="tx-link"&gt;&lt;a href="https://github.com/zelon/youtube-english"&gt;https://github.com/zelon/youtube-english&lt;/a&gt;&lt;/a&gt; 이다. 개발 환경은 golang + appengine, javascript, bootstrap, chrome extension 이다.&lt;/p&gt;

&lt;p&gt;나름 열심히 준비했는데, 아이디어가 조금 부족했던 것 같다. 나름 요긴하게 쓰는 사이트가 되겠지만 말이다. 아쉽지만, 다음을 기약하며 관련 지식을 좀 더 습득했는 걸로 만족하자.&lt;/p&gt;

&lt;p&gt;끝.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/430</guid>
      <pubDate>Tue, 24 Nov 2015 15:24:40 GMT</pubDate>
    </item>
    <item>
      <title>go언어 + appengine 으로 개발하면서 겪은 것들</title>
      <link>http://blog.wimy.com/429</link>
      <description>&lt;p&gt;google hackfair 2015 를 준비하면서 겪었던 것들을 잊기 전에 정리해본다. 아쉽게도 전시회 명단에는 들지 못했지만 ㅠㅜ&lt;/p&gt;

&lt;p&gt;go 로 만든다고 매우 큰 속도 향상은 없었다. 연산을 많이 하는 작업은 빨라질 거라 예상하는데, 단순한 request~response 의 경우 속도가 그렇게 빠르다는 느낌은 없다. (내가 아직 잘 몰라서겠지만)오히려 단순한 작업의 경우 1,2초의 응답 속도를 보일 때가 있다. 왜 그런지는 좀 더 파악해봐야 할듯.&lt;/p&gt;

&lt;p&gt;appengine 에서 datastore 를 사용할 때 로컬에서는 문제가 없었는데 실제 서버에서 "" 이런 오류가 날 경우가 있다. 해당 쿼리문의 조합을 지원하는 복합 인덱스가 있어야 한다는 것인데, 로컬 서버에서는 문제가 없었기 때문에 좀 난감했다. 로컬 서버를 띄울 때 'devappserver.py --require_indexes yes .' 형태로 띄우면 로컬 서버에서도 해당 문제가 재현이 된다. 원인은 index.yaml 에 복합 인덱스를 실수로 수동으로 지웠기 때문이었다. require indexes 옵션없이 로컬에서 서버를 동작시키면 index.yaml 파일을 갱신해주는데 이 파일을 수동으로 편집하고 서버에 올렸기 때문에 발생한 문제였다. 이것도 나중에 자세히 살펴봐야할듯. 여튼 중요한 건, 쿼리문에서 2개 이상의 필드를 함께 사용하면 그 필드들이 묶인 복합 인덱스가 필요하다. filter("A").order("B") 이면 A+B 의 복합 인덱스가 필요.&lt;/p&gt;

&lt;p&gt;datastore 에서 1500자 넘는 문자열은 string 으로 저장이 안되는 것으로 나오는데, 좀 더 살펴보니 index 를 걸지 않으면 사용할 수 있다. 자동으로 index 가 걸려서 사용 못하나 싶었지만, `datastore:",noindex"` 를 구조체 필드에 붙여주면 index 를 걸지 않게 된다.&lt;/p&gt;

&lt;p&gt;일반 go 언어에서는 http.Get 으로 다른 웹페이지를 가져오지만, appengine 에서는 "appengine/urlfetch" 를 사용해야 한다&lt;/p&gt;

&lt;p&gt;index.yaml 에서 특정 디렉토리 전체를 업로드/노출시킬 수 있다. static_dir 구문을 사용하면 쉽게 가능하다.&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/429</guid>
      <pubDate>Tue, 24 Nov 2015 14:48:20 GMT</pubDate>
    </item>
    <item>
      <title>어느 게임 서버 개발자의 하루</title>
      <link>http://blog.wimy.com/428</link>
      <description>&lt;p&gt;어느날 갑자기 나는 회사에서 무엇을 하고 있는가하는 생각이 들었다. 블로그가 원래 개인의 기록을 남기는 것이기 때문이기도 하고 혹시나 게임 서버 개발자가 되고 싶어하는 사람들이 궁금해할까 싶기도 하고...&lt;/p&gt;

&lt;p&gt; 대략 9시 전후로 자전거를 타고 출근을 한다. 집에서 나서서 회사 자리에 앉기까지 대략 20분 정도 걸리는 거리라서 부담이 없다. 오히려 버스를 타면, 걸어나오는 시간, 버스 기다리는 시간 등 때문에 더 오래 걸린다. 비오면 버스타야함. 9시 30분 기준으로 업무가 시작되며, 좀 늦게 와도 뭐라하는 사람은 없다. 다만, 업무시간 8시간은 다들 알아서 지킨다.&lt;/p&gt;

&lt;p&gt; 출근해서 자리에 앉으면, 어느 자리에서나 보이는, 매우 커다란 모니터에 주기적으로 개발 상태를 체크하는 CI(젠킨스)가 현재 어떤 문제가 발생했는지 알려준다. 문제가 발생하면 빨간 배경에 'XXX Failed, YYY Failed' 같은 화면을 보여주고, 문제가 없으면 '최신 걸그룹 뮤직 비디오' 를 보여준다. 5일 중에 2일 정도는 이런저런 문제가 있기 때문에 이런 문제를 해결한다. 보통은 단순 실수, CI 프로세스의 버그 정도이다. 물론 해결하기 골치 아픈거라서 임시 땜빵으로 넘어가는 경우도 있다. 이런 문제를 해결하는 데 대략 1시간 정도 소모되는 것 같다.&lt;/p&gt;

&lt;p&gt; 일단 급해보이는 'XXX Failed' 들을 해결하고나서 걸그룹 뮤직 비디오가 나오는 걸 잠시 잠깐 보고나서... 덤프 수집 웹페이지를 확인하고 처리한다. 그리고 팀원들의 commit log 들을 훑어보기 시작한다. 어떤 일들이 진행되고 있는지, 내가 실수한 걸 다른 팀원들이 고쳐주지는 않았는지, 다른 팀원들은 어떻게 코드를 만드는지, 나만 이상한 형태로 코드를 만들고 있지는 않은지 확인한다. 좀 관심있거나 흥미를 끄는 commit 은 파일 한줄한줄 diff 하면서 자세히 훑어본다. 궁금한게 있으면 작성자에게 의도를 물어보거나, 내가 생각한 방법은 어떤지 의견을 교환하기도 한다. 의견을 교환하면서 많이 배운다는 느낌도 받는다. 대략 30분~60분 정도의 시간이 소모된다.&lt;/p&gt;

&lt;p&gt; 여기까지 오면 대략 10시나 11시쯤 된다. 12시부터 점심 시간이므로 이 때부터 점심시간 전까지는 코드를 다듬는 시간으로 한다. 지난번 구현에서 일정 부족으로 Ctrl+CV 했던 코드를 정리하거나, 특정 코드들을 모아서 클래스로 뽑아낸다. 평소에 마음에 들지 않았던 코드들을 조금씩 손보는 시간으로 활용한다. 일정과 상관없이 팀장님이 시킨 일들도 한다. 평소에 이런 일을 조금씩 계속 진행해놓아야 디버깅도 편하고, 가슴속의 답답함도 줄어들고, 숨겨진 버그들도 발견되어 수정된다. 물론 바쁜 일정이 있다면 일정을 진행한다.&lt;/p&gt;

&lt;p&gt; 점심시간에는 운동하고 밥 먹거나(50%) 찜질방에서 자고 밥 먹거나(40%) 게임하고 밥 먹는다(10%)&lt;/p&gt;

&lt;p&gt; 오후에는 일정에 따른 일들을 주로 한다. 기획팀에서 주도하는 '이런저런 기능을 추가해주세요', '이거 불편해요' 이런것들이다. 이런 일들을 하기 위해서, 생각도 하고, 코딩도 하고, 기획팀이랑 얘기도 한다. 그러다보면 팀장님이 와서 '뭐 도와줄거 없어요?' 라든지 '이거 좀 이상해요' 라면서 새로운 잡일들을 맡기고 간다... 간단한 일이면 바로 하고 아니면 할일목록에 넣어둔다. 또 계속 일정 진행... &lt;/p&gt;

&lt;p&gt; CI 는 주기적으로 계속 체크를 하기 때문에, 갑자기 빨간색 화면을 보여준다. 그러면 살짝 쉴겸 CI 가 알려주는 문제를 해결한다. 이게 빨리 해결이 안되면 일정 진행을 미루고 해결하는데 시간을 들인다. 여기의 빨간색 화면은 적게는 몇십명, 많게는 백여명이 될 수 있으므로 가능하면 빨리 해결해야 한다.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; 다시 일정을 진행하려고 했는데, 누군가와서 이 덤프 좀 확인해주세요라며 덤프 확인을 요청한다. 나한테 왔다는건 내가 일을 저질렀다는 것이다. 열심히 일을 처리한 후, 핫픽스가 필요하면 해당 브랜치에 핫픽스를 진행하고 다시 배포를 진행한다.&lt;/p&gt;

&lt;p&gt; 다시 일정을 진행하려고 하는데, 이번에는 기획팀원이 와서 이런저런 것들을 물어본다. 당연히 친절히 설명해준다. 나도 잘 모르면 잘 아는 팀원에게 같이가서 설명을 듣는다. 그리고 기획팀원이 헷갈려하는 부분을 헷갈려하지 않도록 하는 방안이 나온다면 또 할일목록에 넣어둔다.&lt;/p&gt;

&lt;p&gt; 일정진행 좀 한다...&lt;/p&gt;

&lt;p&gt; 5일 중에 하루나 이틀은 오후에 팀원들이랑 티타임을 하는 시간이 생겼다. 한번은 꼭 팀장님이 전체 팀원을 모으고, 그냥 몇몇 팀원들이 모여서 티타임을 가지기도 한다. 한창 바쁜데 무슨 티타임이냐고 할 수도 있지만, 팀원들간의 티타임은 중요하다고 생각한다. 서로 개인적인 이야기나 일에 대한 의견교환, 그리고 시덥잖은 농담따먹기도 팀웍에 도움이 된다고 생각한다. 이 팀웍이 일을 할 때 커뮤니케이션 비용을 줄여주고, 불필요한 설명이나 논쟁을 줄여준다. 그리고 사실 나에게도 잠시의 휴식도 필요하고... 어디서 논문인지 통계인지를 봤는데, 직장인이 가장 행복할 때는 상사의 인정, 월급, 승진 같은 것보다도 직장 동료와 즐겁게 대화하는 시간이라고 한다. 나는 행복해...&lt;/p&gt;

&lt;p&gt; 잠시의 휴식 시간을 가진 후 다시 일정 진행...&lt;/p&gt;

&lt;p&gt; 회의가 하나 잡혀있다. 대부분 1시간 정도 회의를 진행한다. 갔다오면 할일목록에 할일 추가 ㅋㅋㅋ&lt;/p&gt;

&lt;p&gt; 다시 일정진행...&lt;/p&gt;

&lt;p&gt; 오후 6시 30분이 퇴근 시간이다. 이 시간이 가까워지면 보통 살짝 다른 형태로 일을 진행하게 된다. 먼저, 함부로 commit 을 만들지 않는다. commit 해서 빌드가 깨지거나 큰 문제가 발생하면 집에 못가는 거다. 그 상태로 집에 가면 무책임하다는 소리가 나올 수 밖에 없다. 물론 조금 늦게 갈 거면 상관없다. 그리고 새로운 작업을 가능하면 시작하지 않는다. 그 대신 밀린 메일을 읽거나, 다른 팀원들의 commit log 를 보기도 한다. 물론 일정이 급하면 일정을 최대한 진행한다.&lt;/p&gt;

&lt;p&gt; 좀 재미있는게, 'XXX Failed' 라는 메시지를 보는 팀원들의 시각이다. 누구나 빨간 배경 화면을 보면 무언가 문제가 있다는 것을 안다. 그리고 누군가는 이 문제를 해결해야 겠다. 누군가는 이 문제를 알려야 겠다. 누군가는 신경 안 쓴다... 누군가 해결하고 있겠지... 하지만 이건 단순한 현상일 뿐이고, 실제로는 얼마큼 해결할 수 있냐에 따라서 반응하는 것 같다. 저게 뭐야 해결해볼까... 아... 어렵구나... 흰건 배경이고 까만건 글자인데... 아몰랑... 그래서 팀에 합류한지 오래되면 문제 해결을 더 잘하게 되는 경향이 있다. 그런데 이걸 잘 해결한다고 해서 프로그래밍을 잘하게 된다거나 그런건 아니다. 그냥 소모적인 시간을 좀 더 쓸 뿐...&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/428</guid>
      <pubDate>Wed, 02 Sep 2015 16:23:51 GMT</pubDate>
    </item>
    <item>
      <title>코드가 망가지는 과정</title>
      <link>http://blog.wimy.com/427</link>
      <description>&lt;p&gt;누군가 코드를 만든다. 꽤 잘 만들었다.&lt;/p&gt;

&lt;p&gt;다른 누군가 그 코드에 수정사항을 가할 일이 생겼다. 원래 코드의 의도를 100% 이해하지는 못하고 만들게 된다. 당연하다. 일정이 있고, 간단해보이는 일을 하는데, 원래 전체 코드를 다 읽고 일할 수는 없다. 하지만, 특정 함수가 길어지게 되었다.&lt;/p&gt;

&lt;p&gt;또다른 누군가가 새로운 기능을 추가한다. 또다시 전체 코드를 모두 이해하고 작업을 하지 않는다. 하지만 새 기능은 제대로 동작하며, 딱히 고쳐야할 이유는 없다. 기존의 코드와 모양새가 다르고, 독립적인 모듈처럼 보이기도 한다.&lt;/p&gt;

&lt;p&gt;또 새로운 기능이 추가되는데 앞의 기능과 비슷한 기능이다. 앞에서 누군가가 만든 클래스와 비슷한(복사~붙여넣기를 한) 클래스를 만들어서 하위 모듈로 추가한다. 여전히 잘 동작한다. 꽤 큰 기능인데, 쉽게 만들었다고 좋아한다.&lt;/p&gt;

&lt;p&gt;앞의 4명 중, 처음 2명이 퇴사를 하였다. 누구도 코드의 의도를 제대로 파악한 사람이 없다.&lt;/p&gt;

&lt;p&gt;새로운 누군가가 정말 간단한 기능을 추가했다. 그런데 중요한 기능이 동작하지 않는다. 디버깅을 한다. 헤맨다. 함수는 엄청나게 길고, 비슷한 클래스들이 여기저기 있고, 이상하게 코드들이 일관성이 없다. 읽기가 힘들다. 이 파일 저 파일을 따라가면서 디버깅을 해야한다.&lt;/p&gt;

&lt;p&gt; What the XXXX. 코드가 왜 이렇게 된거야~~~~~!!!&lt;/p&gt;
</description>
      <guid>http://blog.wimy.com/427</guid>
      <pubDate>Tue, 01 Sep 2015 15:21:00 GMT</pubDate>
    </item>
  </channel>
</rss>